{"version":3,"file":"main.caede7b2489ed901f349.js","mappings":"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AAG,CAAC,CAAC;IACpD,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,IAAI,KAAK,IAAI,GAAG,EAAE,CAAC;AACjD,CAAC,CAAC;AAEK,MAAM,eAAe,GAAG,CAAC,GAAW,EAAE,EAAE;IAC7C,OAAO,GAAG;SACP,SAAS,CAAC,KAAK,CAAC;SAChB,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC;SAC/B,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC;SACzB,iBAAiB,EAAE,CAAC;AACzB,CAAC,CAAC;;;;;;;;;;;;;;;;AC3BF,gFAAgF;AAChF,mEAAmE;AACnE,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,sEAAsE;;;;;;;;;;;;;;;;;;ACfvB;AAGF;AACY;AAEzD,IAAI,6EAAsB,EAAE;IAC1B,6DAAc,EAAE,CAAC;CAClB;AAED,wEAAwB,CAAC,eAAe,CAAC,sDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["./$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/button-icon/button-icon.component.ts","./src/app/components/button-icon/button-icon.component.html","./src/app/components/button-icon/button-icon.module.ts","./src/app/components/display-users/display-users.component.ts","./src/app/components/display-users/display-users.component.html","./src/app/components/display-users/display-users.module.ts","./src/app/components/filters/filters.component.ts","./src/app/components/filters/filters.component.html","./src/app/components/filters/filters.module.ts","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/components/login/login.module.ts","./src/app/components/map/map.component.ts","./src/app/components/map/map.component.html","./src/app/components/map/map.module.ts","./src/app/components/users/users.component.ts","./src/app/components/users/users.component.html","./src/app/components/users/users.module.ts","./src/app/components/vector-map/vector-map.component.ts","./src/app/components/vector-map/vector-map.component.html","./src/app/components/vector-map/vector-map.module.ts","./src/app/graphql.module.ts","./src/app/services/chartTypes.ts","./src/app/services/data.service.ts","./src/app/services/display-log.service.ts","./src/app/services/graphql.ts","./src/app/services/indexedDb.ts","./src/app/services/user.service.ts","./src/app/services/utils.ts","./src/environments/environment.ts","./src/main.ts","/src/node_modules/moment/locale|sync|/^\\.\\/.*$/"],"sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 98255;\nmodule.exports = webpackEmptyAsyncContext;","import { AfterViewInit, Component, QueryList, ViewChildren } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\r\n\r\nimport { ChartDataSets, ChartOptions } from 'chart.js';\r\n\r\nimport { BehaviorSubject, combineLatest, merge, Observable, Subject } from 'rxjs';\r\nimport {\r\n  debounceTime,\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  pluck,\r\n  shareReplay,\r\n  startWith,\r\n  switchMap,\r\n  take,\r\n  tap,\r\n} from 'rxjs/operators';\r\n\r\nimport { UserService } from './services/user.service';\r\nimport { DataService } from './services/data.service';\r\nimport { aggFuncs, charts, ChartType, metrics } from './services/chartTypes';\r\nimport { isValid, normalizeString, range } from './services/utils';\r\nimport { BaseChartDirective } from 'ng2-charts';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent implements AfterViewInit {\r\n  @ViewChildren(BaseChartDirective) private charts!: QueryList<BaseChartDirective>;\r\n\r\n  public showUsers = this.activatedRoute.queryParams.pipe(map((q) => q['showUsers'] === 'true'));\r\n  public leftChart = this.activatedRoute.queryParams.pipe(\r\n    map((q) => charts.find((c) => c.id === q['l-chart']) || charts[0])\r\n  );\r\n  public rightChart = this.activatedRoute.queryParams.pipe(\r\n    map((q) => charts.find((c) => c.id === q['r-chart']) || charts[0])\r\n  );\r\n  public comparableChart = this.leftChart.pipe(pluck('comparable'));\r\n  public compare = combineLatest([\r\n    this.activatedRoute.queryParams.pipe(map((q) => q['compare'] === 'true')),\r\n    this.comparableChart,\r\n  ]).pipe(map(([url, chart]) => url && (chart as boolean)));\r\n\r\n  public leftFilter = this.dataService.queryParams.pipe(\r\n    filter(isValid),\r\n    pluck('left'),\r\n    map(({ params }) => ({\r\n      metric: metrics.find(({ id }) => id === params.metric),\r\n      aggFunc: aggFuncs.find(({ id }) => id === params.aggFunc),\r\n      dateStart: new Date(params.date_from),\r\n      dateEnd: new Date(params.date_to),\r\n      hours: JSON.parse(`[${params.hours.slice(1, -1)}]`),\r\n    }))\r\n  );\r\n  public rightFilter = this.dataService.queryParams.pipe(\r\n    filter(isValid),\r\n    pluck('right'),\r\n    map(({ params }) => ({\r\n      metric: metrics.find(({ id }) => id === params.metric),\r\n      aggFunc: aggFuncs.find(({ id }) => id === params.aggFunc),\r\n      dateStart: new Date(params.date_from),\r\n      dateEnd: new Date(params.date_to),\r\n      hours: JSON.parse(`[${params.hours.slice(1, -1)}]`),\r\n    }))\r\n  );\r\n\r\n  public leftMap = this.dataService.leftData.pipe(pluck('map'));\r\n  public rightMap = this.dataService.rightData.pipe(pluck('map'));\r\n\r\n  public mapDifferences = combineLatest([\r\n    this.leftChart,\r\n    this.rightChart,\r\n    this.dataService.leftData.pipe(\r\n      filter(isValid),\r\n      switchMap((data) => data.map.summary)\r\n    ),\r\n    this.dataService.rightData.pipe(\r\n      filter(isValid),\r\n      switchMap((data) => data.map.summary)\r\n    ),\r\n  ]).pipe(\r\n    map(([leftChart, rightChart, leftData, rightData]) =>\r\n      leftChart.id === 'map' && rightChart.id === 'map'\r\n        ? [\r\n            {\r\n              type: 'delay',\r\n              label: 'Demora',\r\n              difference:\r\n                (rightData.delay > leftData.delay ? -1 : 1) *\r\n                (1 - Math.min(rightData.delay, leftData.delay) / Math.max(rightData.delay, leftData.delay)),\r\n            },\r\n            {\r\n              type: 'length',\r\n              label: 'Largo de Cola',\r\n              difference:\r\n                (rightData.length > leftData.length ? -1 : 1) *\r\n                (1 - Math.min(rightData.length, leftData.length) / Math.max(rightData.length, leftData.length)),\r\n            },\r\n            {\r\n              type: 'speed',\r\n              label: 'Velocidad',\r\n              difference:\r\n                (rightData.speed > leftData.speed ? 1 : -1) *\r\n                (Math.max(rightData.speed, leftData.speed) / Math.min(rightData.speed, leftData.speed) - 1),\r\n            },\r\n          ]\r\n        : null\r\n    )\r\n  );\r\n  public comparisonOptions: ChartOptions = {\r\n    responsive: true,\r\n    scales: {\r\n      yAxes: [{ ticks: { display: false } }],\r\n      xAxes: [\r\n        {\r\n          ticks: {\r\n            min: -1,\r\n            max: 1,\r\n            callback: (v) => (Number(v) * 100).toLocaleString('es-ar', { maximumFractionDigits: 0 }) + '%',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  private leftBarData = this.dataService.leftData.pipe(\r\n    filter(isValid),\r\n    switchMap(({ bar }) => bar.data),\r\n    shareReplay(1)\r\n  );\r\n  private rightBarData = this.dataService.rightData.pipe(\r\n    filter(isValid),\r\n    switchMap(({ bar }) => bar.data),\r\n    shareReplay(1)\r\n  );\r\n  public barSameMaximum = new BehaviorSubject(false);\r\n  public barMaximum = combineLatest([this.leftBarData, this.rightBarData, this.barSameMaximum]).pipe(\r\n    map(([leftBarData, rightBarData, sameMaximum]) =>\r\n      sameMaximum\r\n        ? Math.max(...[leftBarData, rightBarData].map(({ dataset }) => dataset.map((v) => v.data).flat()).flat())\r\n        : undefined\r\n    ),\r\n    startWith(undefined)\r\n  );\r\n  public leftBarConfig = combineLatest([this.leftBarData, this.barMaximum]).pipe(\r\n    map(([{ dataset, labels, unit }, barMaximum]) => ({\r\n      options: this.getOptions('bar', dataset.length, !isNaN(Number(labels[0])), unit, barMaximum),\r\n      colors: this.getColors('bar', dataset.length),\r\n    }))\r\n  );\r\n  public rightBarConfig = combineLatest([this.rightBarData, this.barMaximum]).pipe(\r\n    tap(() => console.log(2)),\r\n    map(([{ dataset, labels, unit }, barMaximum]) => ({\r\n      options: this.getOptions('bar', dataset.length, !isNaN(Number(labels[0])), unit, barMaximum),\r\n      colors: this.getColors('bar', dataset.length),\r\n    }))\r\n  );\r\n\r\n  public lineWithMapDataConfig = this.dataService.leftData.pipe(\r\n    filter(isValid),\r\n    switchMap((x) => x['line-with-map'].data),\r\n    map(({ dataset, labels, unit }) => ({\r\n      options: this.getOptions('line-with-map', dataset.length, !isNaN(Number(labels[0])), unit),\r\n      colors: this.getColors('line-with-map', dataset.length),\r\n    }))\r\n  );\r\n\r\n  public initialGreaterDate = this.activatedRoute.queryParams.pipe(\r\n    take(1),\r\n    map((p) => (p['greaterDate'] ? Number(p['greaterDate']) : new Date().getFullYear()))\r\n  );\r\n  public separatorKeysCodes: number[] = [ENTER, COMMA];\r\n  public comparativeStreetSearch = new FormControl([]);\r\n  public selectedComparativeCharts = new Subject<string[]>();\r\n  public selectedComparativeCharts$ = merge(\r\n    combineLatest([this.dataService.streets.pipe(take(1)), this.activatedRoute.queryParams.pipe(take(1))]).pipe(\r\n      map(([streets, p]) =>\r\n        (JSON.parse(p['comparativeStreetsIds'] || '[]') as number[]).map((id) => streets[id].name)\r\n      )\r\n    ),\r\n    this.selectedComparativeCharts\r\n  ).pipe(shareReplay(1));\r\n  public selectableComparativeCharts = combineLatest([\r\n    this.dataService.leftData.pipe(filter(isValid), pluck('line')),\r\n    this.selectedComparativeCharts$.pipe(distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b))),\r\n    this.comparativeStreetSearch.valueChanges.pipe(startWith('')) as Observable<string>,\r\n  ]).pipe(\r\n    map(([data, selected, search]) =>\r\n      data\r\n        .map(({ name }) => name)\r\n        .filter((name) => !selected.includes(name) && normalizeString(name).includes(search))\r\n    )\r\n  );\r\n  public comparativeCharts = combineLatest([\r\n    this.dataService.leftData.pipe(filter(isValid), pluck('line')),\r\n    this.selectedComparativeCharts$.pipe(distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b))),\r\n    this.dataService.streets,\r\n  ]).pipe(\r\n    map(([data, selected, streets]) => {\r\n      const streetIds = Object.values(streets)\r\n        .filter(({ name }) => selected.includes(name))\r\n        .map(({ id }) => id);\r\n      this.changeUrl({ comparativeStreetsIds: JSON.stringify(streetIds) });\r\n      return data.filter(({ name }) => selected.includes(name));\r\n    }),\r\n    shareReplay(1)\r\n  );\r\n  // FIXME: Dynamic minimum year\r\n  public years = range(new Date().getFullYear() + 1 - 2021).map((v) => new Date().getFullYear() - v);\r\n  public comparativeSameMaximum = new BehaviorSubject(false);\r\n  public comparativeConfig = this.comparativeCharts.pipe(\r\n    filter(isValid),\r\n    filter((charts) => charts.length > 0),\r\n    switchMap((charts) =>\r\n      combineLatest([combineLatest(charts.map((a) => a.data)), this.comparativeSameMaximum]).pipe(\r\n        map(([datasets, sameMaximum]) => {\r\n          const { labels, unit } = datasets[0];\r\n          const max = sameMaximum\r\n            ? Math.max(...datasets.map(({ dataset }) => dataset.map((v) => v.data).flat()).flat())\r\n            : undefined;\r\n          return {\r\n            options: this.getOptions('line', charts.length, !isNaN(Number(labels[0])), unit, max),\r\n            colors: this.getColors('line', charts.length),\r\n          };\r\n        })\r\n      )\r\n    )\r\n  );\r\n\r\n  public leftExportableData = combineLatest([this.leftChart, this.dataService.leftData]).pipe(\r\n    switchMap(([chart, leftData]) => {\r\n      let obs: Observable<any[]>;\r\n      if (chart.id === 'line') {\r\n        obs = this.comparativeCharts.pipe(\r\n          switchMap((charts) => combineLatest(charts.map(({ exportableData }) => exportableData))),\r\n          map((data) => data.flat())\r\n        );\r\n      } else {\r\n        obs = leftData[chart.id].exportableData;\r\n      }\r\n      return obs.pipe(\r\n        startWith([] as any[]),\r\n        map((csvData) => ({ csvData, chart }))\r\n      );\r\n    })\r\n  );\r\n  public rightExportableData = combineLatest([this.rightChart, this.dataService.rightData]).pipe(\r\n    switchMap(([chart, data]) =>\r\n      (data[chart.id as 'map' | 'bar'].exportableData as Observable<any[]>).pipe(\r\n        startWith([] as any[]),\r\n        map((csvData) => ({ csvData, chart }))\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    public userService: UserService,\r\n    public dataService: DataService,\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n\r\n  public ngAfterViewInit() {\r\n    combineLatest([this.charts.changes, this.leftChart, this.rightChart])\r\n      .pipe(debounceTime(100))\r\n      .subscribe(() => {\r\n        this.charts.map(({ chart }) => chart?.resize());\r\n      });\r\n  }\r\n\r\n  private getColors(type: ChartType, datasetLength: number) {\r\n    const dense = datasetLength === 0 ? 0 : { map: 0, bar: 1, line: 0.2, 'line-with-map': 0 }[type];\r\n    return [\r\n      { backgroundColor: `rgba(77,83,96,${dense})`, borderColor: 'rgba(77,83,96,1)' },\r\n      { backgroundColor: `rgba(255,0,0,${dense})`, borderColor: 'red' },\r\n    ];\r\n  }\r\n\r\n  private getOptions(type: ChartType, datasetLength: number, isNumber: boolean, unit: string, max?: number) {\r\n    const xLabel = type === 'line' ? 'Mes' : isNumber ? 'Hora' : 'Día';\r\n    return {\r\n      responsive: true,\r\n      maintainAspectRatio: type === 'line' ? true : datasetLength > 4,\r\n      scales: {\r\n        yAxes: [\r\n          {\r\n            scaleLabel: { display: true, labelString: `[ ${unit} ]`, padding: 0, fontSize: 16 },\r\n            ticks: {\r\n              suggestedMax: max,\r\n              beginAtZero: true,\r\n              maxTicksLimit: datasetLength > 4 ? 5 : undefined,\r\n              callback: (v: number) =>\r\n                v.toLocaleString('es-ar', { minimumFractionDigits: 0, maximumFractionDigits: 2 }),\r\n            },\r\n          },\r\n        ],\r\n        xAxes: [{ scaleLabel: { display: true, labelString: `[ ${xLabel} ]`, padding: 0, fontSize: 16 } }],\r\n      },\r\n    };\r\n  }\r\n\r\n  public toggleUsers(showUsers: boolean) {\r\n    this.changeUrl({ showUsers });\r\n  }\r\n\r\n  public toggleCompare(compare: boolean) {\r\n    this.changeUrl({ compare });\r\n  }\r\n\r\n  public resetFilters() {\r\n    return this.router.navigate(['/'], {\r\n      queryParams: {},\r\n    });\r\n  }\r\n\r\n  private changeUrl(value: { [key: string]: any }) {\r\n    return this.router.navigate([], {\r\n      relativeTo: this.activatedRoute,\r\n      queryParams: { ...value },\r\n      queryParamsHandling: 'merge',\r\n    });\r\n  }\r\n\r\n  public getUnit = (key: string) => metrics.find(({ id }) => id === key)?.unit;\r\n\r\n  public getHoursString = (times: number[]) => times.map((value) => `${value}hs`).join(', ');\r\n\r\n  public showLabels = (data: ChartDataSets[]) => data.some((v) => !!v.label);\r\n\r\n  public async selectLineYear(greaterDate: number) {\r\n    return this.router.navigate([], {\r\n      relativeTo: this.activatedRoute,\r\n      queryParams: { greaterDate },\r\n      queryParamsHandling: 'merge',\r\n    });\r\n  }\r\n\r\n  public toggleComparativeChart(\r\n    action: 'add' | 'delete',\r\n    chart: string,\r\n    selected: string[],\r\n    input?: HTMLInputElement\r\n  ) {\r\n    const selectedComparativeCharts = selected.slice(0);\r\n    const index = selectedComparativeCharts.indexOf(chart);\r\n    if (action === 'add' && index === -1) selectedComparativeCharts.push(chart);\r\n    if (action === 'delete' && index >= 0) selectedComparativeCharts.splice(index, 1);\r\n    this.selectedComparativeCharts.next(selectedComparativeCharts);\r\n    if (input) {\r\n      input.value = '';\r\n      this.comparativeStreetSearch.setValue('');\r\n      input.blur();\r\n      // setTimeout(() => input.focus(), 10);\r\n    }\r\n  }\r\n}\r\n","<div\r\n  *ngIf=\"userService.currentUser | async as user; else login\"\r\n  fxLayout=\"column\"\r\n  style=\"height: 100vh; width: 100vw\"\r\n>\r\n  <ng-container *ngIf=\"dataService.ready | async; else loading\">\r\n    <mat-toolbar role=\"toolbar\" color=\"primary\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\r\n      <img src=\"/assets/logo-w.png\" alt=\"escudo ciudad de buenos aires\" style=\"height: 75%\" />\r\n      <span style=\"color: white\">Congestiómetro</span>\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"space-between center center\" fxLayoutGap=\"1em\" fxFlex=\"1 0 auto\">\r\n        <ng-container *ngIf=\"leftChart | async as chartType\">\r\n          <app-filters [exportableData]=\"leftExportableData\">\r\n            <span>Cambiar gráfico<span *ngIf=\"compare | async\"> izquierdo</span></span>\r\n          </app-filters>\r\n        </ng-container>\r\n\r\n        <mat-slide-toggle\r\n          *ngIf=\"comparableChart | async\"\r\n          [checked]=\"compare | async\"\r\n          (change)=\"toggleCompare($event.checked)\"\r\n        >\r\n          <span class=\"mat-subheading-1\">Usar comparativa</span>\r\n        </mat-slide-toggle>\r\n\r\n        <app-filters [exportableData]=\"rightExportableData\" [secondary]=\"true\" [fxShow]=\"compare | async\" fxHide>\r\n          Cambiar gráfico derecho\r\n        </app-filters>\r\n        <button mat-icon-button [matMenuTriggerFor]=\"menuLink\">\r\n          <mat-icon>menu</mat-icon>\r\n        </button>\r\n      </div>\r\n      <mat-menu #menuLink=\"matMenu\">\r\n        <button *ngIf=\"(userService.currentUser | async)?.isAdmin\" mat-menu-item (click)=\"resetFilters()\">\r\n          <mat-icon>delete</mat-icon>\r\n          Borrar Filtros\r\n        </button>\r\n        <button *ngIf=\"(userService.currentUser | async)?.isAdmin\" mat-menu-item (click)=\"toggleUsers(true)\">\r\n          <mat-icon>people</mat-icon>\r\n          Administrar Usuarios\r\n        </button>\r\n        <button mat-menu-item (click)=\"userService.logout()\">\r\n          <mat-icon>logout</mat-icon>\r\n          Cerrar sesión\r\n        </button>\r\n      </mat-menu>\r\n    </mat-toolbar>\r\n\r\n    <app-users *ngIf=\"showUsers | async\" (cancel)=\"toggleUsers(false)\"></app-users>\r\n\r\n    <div *ngIf=\"!(showUsers | async)\" fxLayout=\"row\" fxFlex=\"1 0 auto\" style=\"margin: 1em\">\r\n      <div\r\n        *ngIf=\"dataService.leftData | async as data; else noFilter\"\r\n        fxLayout=\"column\"\r\n        [fxFlex]=\"(compare | async) ? '1 1 50' : '1 0 auto'\"\r\n      >\r\n        <div\r\n          *ngIf=\"leftFilter | async as filters\"\r\n          fxLayout=\"row\"\r\n          fxLayoutAlign=\" center\"\r\n          fxLayoutGap=\"1em\"\r\n          class=\"mat-subheading-2\"\r\n        >\r\n          <span>\r\n            Mostrando {{ filters.metric?.name }} {{ filters.aggFunc?.name }}\r\n            <ng-container *ngIf=\"(leftChart | async)?.id !== 'line'\">\r\n              del {{ filters.dateStart | date: \"shortDate\" }} al {{ filters.dateEnd | date: \"shortDate\" }} |\r\n              <span *ngIf=\"filters.hours?.length === 24\">Las 24 horas</span>\r\n              <span *ngIf=\"(filters.hours?.length || 0) < 24\">Horas: {{ getHoursString(filters.hours) }}</span>\r\n            </ng-container>\r\n          </span>\r\n\r\n          <div\r\n            *ngIf=\"(leftChart | async)?.id == 'bar' && (rightChart | async)?.id == 'bar'\"\r\n            style=\"margin: 1em 1em 0 1em; text-align: right\"\r\n            fxFlex=\"1 0 auto\"\r\n          >\r\n            <mat-slide-toggle [checked]=\"barSameMaximum | async\" (change)=\"barSameMaximum.next($event.checked)\">\r\n              <span class=\"mat-subheading-1\">Igualar máximos</span>\r\n            </mat-slide-toggle>\r\n          </div>\r\n\r\n          <ng-container *ngIf=\"(leftChart | async)?.id == 'line'\">\r\n            <ng-container *ngIf=\"dataService.leftData | async as data\">\r\n              <mat-form-field\r\n                *ngIf=\"selectedComparativeCharts$ | async as selected\"\r\n                appearance=\"fill\"\r\n                class=\"no-border-top\"\r\n                fxFlex=\"auto\"\r\n              >\r\n                <mat-chip-list #chipList>\r\n                  <mat-chip\r\n                    *ngFor=\"let chart of selected\"\r\n                    (removed)=\"toggleComparativeChart('delete', chart, selected)\"\r\n                  >\r\n                    <span>{{ chart }}</span>\r\n                    <button matChipRemove><mat-icon>cancel</mat-icon></button>\r\n                  </mat-chip>\r\n                  <input\r\n                    #streetInput\r\n                    matInput\r\n                    placeholder=\"Calles\"\r\n                    [formControl]=\"comparativeStreetSearch\"\r\n                    [matAutocomplete]=\"auto\"\r\n                    [matChipInputFor]=\"chipList\"\r\n                    [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n                  />\r\n                </mat-chip-list>\r\n                <mat-autocomplete\r\n                  #auto=\"matAutocomplete\"\r\n                  (optionSelected)=\"toggleComparativeChart('add', $event.option.value, selected, streetInput)\"\r\n                >\r\n                  <mat-option *ngFor=\"let streetName of selectableComparativeCharts | async\" [value]=\"streetName\">\r\n                    {{ streetName }}\r\n                  </mat-option>\r\n                </mat-autocomplete>\r\n              </mat-form-field>\r\n            </ng-container>\r\n\r\n            <mat-form-field appearance=\"fill\">\r\n              <mat-label>Año Mayor</mat-label>\r\n              <mat-select\r\n                *ngIf=\"initialGreaterDate | async as date\"\r\n                [value]=\"date\"\r\n                (selectionChange)=\"selectLineYear($event.value)\"\r\n                disableOptionCentering\r\n              >\r\n                <mat-option *ngFor=\"let year of years\" [value]=\"year\">{{ year }}</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n\r\n            <mat-slide-toggle\r\n              [checked]=\"comparativeSameMaximum | async\"\r\n              (change)=\"comparativeSameMaximum.next($event.checked)\"\r\n            >\r\n              <span class=\"mat-subheading-1\">Igualar máximos</span>\r\n            </mat-slide-toggle>\r\n          </ng-container>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"(leftChart | async)?.id == 'map'\">\r\n          <ng-container *ngIf=\"leftMap | async as mapData\">\r\n            <ng-container *ngIf=\"mapData.lines | async as lines; else loadingData\">\r\n              <app-map\r\n                *ngIf=\"lines.length > 0; else noEvents\"\r\n                [data]=\"leftMap\"\r\n                [redraw]=\"compare\"\r\n                fxFlex=\"1 0 auto\"\r\n              >\r\n              </app-map>\r\n            </ng-container>\r\n          </ng-container>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"(leftChart | async)?.id == 'bar'\">\r\n          <ng-container *ngIf=\"data.bar.data | async as barData; else loadingData\">\r\n            <ng-container *ngIf=\"leftBarConfig | async as config\">\r\n              <div *ngIf=\"!(data.bar.noEvents | async); else noEvents\" fxFlex=\"1 0 auto\">\r\n                <canvas\r\n                  baseChart\r\n                  [datasets]=\"barData.dataset\"\r\n                  [labels]=\"barData.labels\"\r\n                  [options]=\"config.options\"\r\n                  [colors]=\"config.colors\"\r\n                  chartType=\"bar\"\r\n                  [legend]=\"showLabels(barData.dataset)\"\r\n                >\r\n                </canvas>\r\n              </div>\r\n            </ng-container>\r\n          </ng-container>\r\n        </ng-container>\r\n\r\n        <div *ngIf=\"(leftChart | async)?.id == 'line'\" class=\"grid\" fxFlex=\"1 1 auto\">\r\n          <ng-container *ngIf=\"comparativeConfig | async as config\">\r\n            <ng-container *ngFor=\"let dataset of comparativeCharts | async\">\r\n              <div *ngIf=\"dataset.data | async as dataInfo; else loadingData\">\r\n                <h3 style=\"text-align: center\">{{ dataset.name | titlecase }}</h3>\r\n                <canvas\r\n                  #chart\r\n                  baseChart\r\n                  [datasets]=\"dataInfo.dataset\"\r\n                  [labels]=\"dataInfo.labels\"\r\n                  [options]=\"config.options\"\r\n                  [colors]=\"config.colors\"\r\n                  chartType=\"line\"\r\n                  [legend]=\"showLabels(dataInfo.dataset)\"\r\n                >\r\n                </canvas>\r\n              </div>\r\n            </ng-container>\r\n          </ng-container>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"(leftChart | async)?.id == 'line-with-map'\">\r\n          <ng-container *ngIf=\"data['line-with-map'].data | async as lineWithMapData; else loadingData\">\r\n            <div *ngIf=\"!(data['line-with-map'].noEvents | async); else noEvents\" fxLayout=\"row\" fxFlex=\"1 0 auto\">\r\n              <div fxFlex=\"50\">\r\n                <canvas\r\n                  *ngIf=\"lineWithMapDataConfig | async as config\"\r\n                  baseChart\r\n                  [datasets]=\"lineWithMapData.dataset\"\r\n                  [labels]=\"lineWithMapData.labels\"\r\n                  [options]=\"config.options\"\r\n                  [colors]=\"config.colors\"\r\n                  chartType=\"line\"\r\n                  [legend]=\"showLabels(lineWithMapData.dataset)\"\r\n                >\r\n                </canvas>\r\n              </div>\r\n              <div fxFlex=\"50\">\r\n                <app-vector-map></app-vector-map>\r\n              </div>\r\n            </div>\r\n          </ng-container>\r\n        </ng-container>\r\n      </div>\r\n\r\n      <ng-container *ngIf=\"compare | async\">\r\n        <!-- TODO: USAR EL TEMPLATE DE noEvents ADEMAS -->\r\n        <ng-container *ngIf=\"dataService.rightData | async as data; else noFilter\">\r\n          <div\r\n            *ngIf=\"mapDifferences | async as differences\"\r\n            fxLayout=\"column\"\r\n            fxLayoutAlign=\" center\"\r\n            fxLayoutGap=\"1em\"\r\n            fxFlex=\"1 0 20\"\r\n          >\r\n            <div class=\"mat-title\"><strong>Comparativa</strong></div>\r\n            <mat-divider></mat-divider>\r\n            <ng-container *ngFor=\"let difference of differences\">\r\n              <div class=\"mat-subheading-2\">\r\n                <strong>{{ difference.label | titlecase }}</strong>\r\n                <span *ngIf=\"difference.type === 'speed'\">\r\n                  ({{\r\n                    (difference.difference >= 0 ? difference.difference : -1 * difference.difference) || 0\r\n                      | percent: \"1.0-0\"\r\n                  }})</span\r\n                >\r\n                <span *ngIf=\"difference.type !== 'speed'\">\r\n                  ({{ difference.difference || 0 | percent: \"1.0-0\" }})</span\r\n                >\r\n              </div>\r\n              <div>\r\n                <canvas\r\n                  baseChart\r\n                  [datasets]=\"[{ data: [difference.difference] }]\"\r\n                  [labels]=\"[difference.label]\"\r\n                  [options]=\"comparisonOptions\"\r\n                  [colors]=\"[{ backgroundColor: 'rgb(154 208 245)' }]\"\r\n                  chartType=\"horizontalBar\"\r\n                  [legend]=\"false\"\r\n                >\r\n                </canvas>\r\n              </div>\r\n            </ng-container>\r\n          </div>\r\n          <div fxLayout=\"column\" fxFlex=\"1 1 50\">\r\n            <div *ngIf=\"rightFilter | async as filters\" class=\"mat-subheading-2\" style=\"text-align: right\">\r\n              Mostrando {{ filters.metric?.name }} {{ filters.aggFunc?.name }} del\r\n              {{ filters.dateStart | date: \"shortDate\" }} al {{ filters.dateEnd | date: \"shortDate\" }} |\r\n              <span *ngIf=\"filters.hours?.length === 24\">Las 24 horas</span>\r\n              <span *ngIf=\"(filters.hours?.length || 0) < 24\"> Horas: {{ getHoursString(filters.hours) }} </span>\r\n            </div>\r\n\r\n            <ng-container *ngIf=\"(rightChart | async)?.id == 'map'\">\r\n              <ng-container *ngIf=\"rightMap | async as mapData\">\r\n                <ng-container *ngIf=\"mapData.lines | async as lines; else loadingData\">\r\n                  <app-map\r\n                    *ngIf=\"lines.length > 0; else noEvents\"\r\n                    [data]=\"rightMap\"\r\n                    [redraw]=\"compare\"\r\n                    boxSide=\"left\"\r\n                    fxFlex=\"1 0 auto\"\r\n                  >\r\n                  </app-map>\r\n                </ng-container>\r\n              </ng-container>\r\n            </ng-container>\r\n\r\n            <ng-container *ngIf=\"(rightChart | async)?.id == 'bar'\">\r\n              <ng-container *ngIf=\"data.bar.data | async as barData; else loadingData\">\r\n                <ng-container *ngIf=\"rightBarConfig | async as config\">\r\n                  <div *ngIf=\"!(data.bar.noEvents | async); else noEvents\" fxFlex=\"1 0 auto\">\r\n                    <canvas\r\n                      baseChart\r\n                      [datasets]=\"barData.dataset\"\r\n                      [labels]=\"barData.labels\"\r\n                      [options]=\"config.options\"\r\n                      [colors]=\"config.colors\"\r\n                      chartType=\"bar\"\r\n                      [legend]=\"showLabels(barData.dataset)\"\r\n                    >\r\n                    </canvas>\r\n                  </div>\r\n                </ng-container>\r\n              </ng-container>\r\n            </ng-container>\r\n          </div>\r\n        </ng-container>\r\n      </ng-container>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n\r\n<ng-template #loading>\r\n  <mat-toolbar fxLayout=\"column\" color=\"primary\" fxLayoutAlign=\"center center\" style=\"height: 100vh; width: 100vw\">\r\n    <img src=\"/assets/logo-w.png\" alt=\"escudo ciudad de buenos aire\" style=\"height: 15%; margin-bottom: 2em\" />\r\n    <div>Bienvenido al congestiómetro de la Ciudad de Buenos aires</div>\r\n    <div>Estamos cargando los datos necesarios, esta operación puede demorar unos segundos</div>\r\n    <div style=\"margin-top: 5em\">{{ dataService.dataState | async }}</div>\r\n  </mat-toolbar>\r\n</ng-template>\r\n\r\n<ng-template #login>\r\n  <mat-toolbar role=\"toolbar\" color=\"primary\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\r\n    <img src=\"/assets/logo-w.png\" alt=\"escudo ciudad de buenos aires\" style=\"height: 75%\" />\r\n    <span style=\"color: white\">Congestiómetro</span>\r\n  </mat-toolbar>\r\n  <app-login></app-login>\r\n</ng-template>\r\n\r\n<ng-template #noFilter>\r\n  <div style=\"padding-top: 10vh; text-align: center\" class=\"mat-title\" fxFlex=\"1 0 50\">\r\n    Por favor, seleccione al menos una calle, un barrio o un polígono en el filtro\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #noEvents>\r\n  <div style=\"padding-top: 10vh; text-align: center\" class=\"mat-title\" fxFlex=\"1 0 50\">\r\n    No hay eventos para los filtros seleccionados\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #loadingData>\r\n  <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n    <mat-spinner color=\"primary\"></mat-spinner>\r\n    <div class=\"mat-subheading-2\">Cargando...</div>\r\n  </div>\r\n</ng-template>\r\n","import { Injectable, LOCALE_ID, NgModule } from '@angular/core';\r\nimport { registerLocaleData } from '@angular/common';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport localeEsAR from '@angular/common/locales/es-AR';\r\nregisterLocaleData(localeEsAR, 'es-AR');\r\n\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\n\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { NativeDateAdapter, DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\nimport { ChartsModule as ng2ChartsModule } from 'ng2-charts';\r\n\r\nimport { GraphQLModule } from './graphql.module';\r\nimport { DisplayLogComponent } from './services/display-log.service';\r\n\r\nimport { LoginModule } from './components/login/login.module';\r\nimport { FiltersModule } from 'src/app/components/filters/filters.module';\r\nimport { UsersModule } from './components/users/users.module';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { VectorMapModule } from './components/vector-map/vector-map.module';\r\nimport { MapModule } from './components/map/map.module';\r\n\r\n@Injectable()\r\nexport class CustomDateAdapter extends NativeDateAdapter {\r\n  parse(value: string) {\r\n    const candidate = value.split('/');\r\n    if (candidate.length === 3) {\r\n      return new Date(+candidate[2], +candidate[1] - 1, +candidate[0], 12);\r\n    } else return null;\r\n  }\r\n\r\n  format(date: Date, displayFormat: string): string {\r\n    if (displayFormat === 'input') {\r\n      const day = `${date.getUTCDate()}`.padStart(2, '0');\r\n      const month = `${date.getUTCMonth() + 1}`.padStart(2, '0');\r\n      const year = date.getFullYear();\r\n      return `${day}/${month}/${year}`;\r\n    } else {\r\n      return date.toDateString();\r\n    }\r\n  }\r\n}\r\n\r\nconst MY_DATE_FORMATS = {\r\n  parse: {\r\n    dateInput: { month: 'short', year: 'numeric', day: 'numeric' },\r\n  },\r\n  display: {\r\n    dateInput: 'input',\r\n    monthYearLabel: { year: 'numeric', month: 'short' },\r\n    dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\r\n    monthYearA11yLabel: { year: 'numeric', month: 'long' },\r\n  },\r\n};\r\n\r\n@NgModule({\r\n  declarations: [AppComponent, DisplayLogComponent],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    RouterModule.forRoot([]),\r\n    GraphQLModule,\r\n    HttpClientModule,\r\n    FlexLayoutModule.withConfig({ addFlexToParent: false }),\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSnackBarModule,\r\n    MatToolbarModule,\r\n    MatMenuModule,\r\n    MatSlideToggleModule,\r\n    MatDividerModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatProgressSpinnerModule,\r\n    MatChipsModule,\r\n    MatAutocompleteModule,\r\n    MatInputModule,\r\n    LoginModule,\r\n    FiltersModule,\r\n    UsersModule,\r\n    VectorMapModule,\r\n    MapModule,\r\n    ng2ChartsModule,\r\n  ],\r\n  providers: [\r\n    { provide: MAT_DATE_FORMATS, useValue: MY_DATE_FORMATS },\r\n    { provide: DateAdapter, useClass: CustomDateAdapter },\r\n    { provide: LOCALE_ID, useValue: 'es-AR' },\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","import { Component, ChangeDetectionStrategy, Input, OnChanges, Output, EventEmitter } from '@angular/core';\r\nimport { TooltipPosition } from '@angular/material/tooltip';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { of } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-button-icon',\r\n  templateUrl: './button-icon.component.html',\r\n  styleUrls: ['./button-icon.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ButtonIconComponent implements OnChanges {\r\n  @Input() icon!: string;\r\n  @Input() color: ThemePalette = 'primary'; // primary, accent or warn\r\n  @Input() tooltip!: string;\r\n  @Input() tooltipPosition: TooltipPosition = 'below';\r\n  @Input() sizeImg = '1.5em';\r\n  @Input() sizeIcon = '1.7em';\r\n  @Input() disabled = of(false);\r\n  @Output() clickEvent = new EventEmitter<MouseEvent>();\r\n\r\n  public isImg = false;\r\n  public hover = false;\r\n\r\n  ngOnChanges() {\r\n    this.isImg = ['.png', '.svg'].map((ext) => (this.icon || '').endsWith(ext)).some((v) => v);\r\n  }\r\n}\r\n","<button\r\n  mat-icon-button\r\n  [matTooltip]=\"tooltip\"\r\n  [matTooltipPosition]=\"tooltipPosition\"\r\n  [disabled]=\"disabled | async\"\r\n  (mouseenter)=\"hover = true\"\r\n  (mouseleave)=\"hover = false\"\r\n  [ngStyle]=\"{ color: 'grey', '-webkit-transition': 'color 0.5s', transition: 'color 0.5s' }\"\r\n  type=\"button\"\r\n  (click)=\"clickEvent.emit($event)\"\r\n>\r\n  <mat-icon\r\n    *ngIf=\"!isImg\"\r\n    [ngStyle]=\"{ 'font-size': sizeIcon }\"\r\n    [attr.aria-label]=\"tooltip\"\r\n    [color]=\"hover === true ? color : undefined\"\r\n  >\r\n    {{ icon }}\r\n  </mat-icon>\r\n  <img *ngIf=\"isImg\" [src]=\"icon\" alt=\"{{ tooltip }}\" [ngStyle]=\"{ height: sizeImg, position: 'relative' }\" />\r\n</button>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ButtonIconComponent } from './button-icon.component';\r\n\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\n\r\n/**\r\n * Muestra el boton como icono siendo icono de material o png/jpg/svg\r\n * - Parámetros de entrada:\r\n * \ticon: string, el icono de material o la ruta si es una imagen\r\n * \tcolor: string el color que va a tener puede ser: primary, accent o warn\r\n * \ttooltip: Label o texto, que va a ser el MatTooltip y ademas el aria-label como tambien alt\r\n */\r\n@NgModule({\r\n  declarations: [ButtonIconComponent],\r\n  imports: [CommonModule, MatButtonModule, MatIconModule, MatTooltipModule],\r\n  exports: [ButtonIconComponent],\r\n})\r\nexport class ButtonIconModule {}\r\n","import { Component, OnInit, ChangeDetectionStrategy, Input, ViewChild, ElementRef } from '@angular/core';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\n\r\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, map, shareReplay, startWith } from 'rxjs/operators';\r\n\r\nimport { DisplayLogService } from 'src/app/services/display-log.service';\r\nimport { User, UserService } from 'src/app/services/user.service';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-display-users',\r\n  templateUrl: './display-users.component.html',\r\n  styleUrls: ['./display-users.component.scss'],\r\n  animations: [\r\n    trigger('detailExpand', [\r\n      state('collapsed', style({ height: '0px' })),\r\n      state('expanded', style({ height: '*' })),\r\n      transition('expanded <=> collapsed', animate('1000ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\r\n    ]),\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DisplayUsersComponent implements OnInit {\r\n  @Input() users!: Observable<User[]>;\r\n\r\n  @ViewChild(MatPaginator, { static: true }) paginator!: MatPaginator;\r\n  public dataSource$!: Observable<MatTableDataSource<User>>;\r\n  public pageSizeOptions = [10, 25, 50, 100];\r\n\r\n  public columns = [\r\n    { title: 'Usuario', field: 'username' },\r\n    { title: 'Rol', field: 'role', pipe: 'role' },\r\n    { title: '', field: 'options', pipe: 'options' },\r\n  ];\r\n  public displayedColumns = this.columns.map((c) => c.field);\r\n\r\n  public selectedUser = new Subject<User>();\r\n  public selectedUsername = this.selectedUser.pipe(\r\n    map((user) => (user ? user.username : 'null')),\r\n    startWith('null')\r\n  );\r\n  public editUserForm = new FormGroup({ password: new FormControl('', [Validators.required]) });\r\n\r\n  public nameSearch = new BehaviorSubject('');\r\n  @ViewChild('search') searchInput!: ElementRef;\r\n\r\n  public loading = new BehaviorSubject(false);\r\n\r\n  constructor(private userService: UserService, private displayLogService: DisplayLogService) {}\r\n\r\n  public ngOnInit() {\r\n    this.dataSource$ = combineLatest([\r\n      this.users,\r\n      this.nameSearch.pipe(\r\n        debounceTime(500),\r\n        distinctUntilChanged(),\r\n        map((search) => search.toLocaleLowerCase())\r\n      ),\r\n    ]).pipe(\r\n      map(([users, nameSearch]) => {\r\n        const data = new MatTableDataSource(\r\n          users\r\n            .filter((user) => user.username.toLocaleLowerCase().includes(nameSearch))\r\n            .sort((a, b) => (a.username.toLocaleLowerCase() > b.username.toLocaleLowerCase() ? 1 : -1))\r\n        );\r\n        data.paginator = this.paginator;\r\n        return data;\r\n      })\r\n    );\r\n  }\r\n\r\n  public onKeyUp(event: KeyboardEvent) {\r\n    this.nameSearch.next((event.target as HTMLInputElement).value);\r\n  }\r\n\r\n  public clearSearch() {\r\n    this.searchInput.nativeElement.value = '';\r\n    this.nameSearch.next('');\r\n  }\r\n\r\n  public editUser(username: string, password: string) {\r\n    if (!confirm('¿Está seguro que desea editar este usuario?')) return;\r\n    this.loading.next(true);\r\n    return this.userService\r\n      .editUser(username, password)\r\n      .then(() => {\r\n        this.selectedUser.next();\r\n        this.editUserForm.reset();\r\n        this.displayLogService.openLogSuccess('Usuario editado');\r\n      })\r\n      .catch((err) => this.displayLogService.openLogError(err?.error?.message ? err.error.message : err))\r\n      .finally(() => this.loading.next(false));\r\n  }\r\n\r\n  public deleteUser(username: string) {\r\n    if (!confirm('¿Está seguro que desea borrar este usuario?')) return;\r\n    this.loading.next(true);\r\n    return this.userService\r\n      .deleteUser(username)\r\n      .then(() => this.displayLogService.openLogSuccess('Usuario eliminado'))\r\n      .catch((err) => this.displayLogService.openLogError(err?.error?.message ? err.error.message : err))\r\n      .finally(() => this.loading.next(false));\r\n  }\r\n}\r\n","<div fxLayout=\"column\" fxLayoutGap=\"1em\" style=\"padding: 1em\">\r\n  <mat-form-field>\r\n    <mat-label>Buscar Operadores por usuario, nombre o apellido</mat-label>\r\n    <input #search matInput (keyup)=\"onKeyUp($event)\" />\r\n    <button *ngIf=\"search.value\" matSuffix mat-icon-button (click)=\"clearSearch()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </mat-form-field>\r\n\r\n  <div *ngIf=\"dataSource$ | async as dataSource\" style=\"overflow: auto\">\r\n    <table mat-table [dataSource]=\"dataSource\" multiTemplateDataRows style=\"width: 100%\">\r\n      <ng-container *ngFor=\"let col of columns\" [matColumnDef]=\"col.field\">\r\n        <th mat-header-cell *matHeaderCellDef style=\"padding-top: 1.5em\">{{ col.title }}</th>\r\n        <td mat-cell *matCellDef=\"let element\" [ngSwitch]=\"col.pipe\" style=\"vertical-align: middle\">\r\n          <span *ngSwitchCase=\"'role'\" [matTooltip]=\"element.isAdmin ? 'Admin' : 'Usuario'\">\r\n            <mat-icon style=\"color: grey\">{{ element.isAdmin ? \"admin_panel_settings\" : \"person\" }}</mat-icon>\r\n          </span>\r\n          <span *ngSwitchCase=\"'options'\" fxLayout=\"row wrap\" fxLayoutAlign=\"end center\">\r\n            <ng-container *ngIf=\"!element.isAdmin\">\r\n              <app-button-icon icon=\"edit\" tooltip=\"Editar\" color=\"primary\" (click)=\"selectedUser.next(element)\">\r\n              </app-button-icon>\r\n              <!-- <app-button-icon\r\n                icon=\"delete\"\r\n                tooltip=\"Eliminar Usuario\"\r\n                color=\"primary\"\r\n                [disabled]=\"loading\"\r\n                (click)=\"deleteUser(element.username)\"\r\n              >\r\n              </app-button-icon> -->\r\n            </ng-container>\r\n          </span>\r\n\r\n          <span *ngSwitchDefault> {{ element[col.field] }} </span>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <ng-container *ngIf=\"selectedUsername | async as username\" matColumnDef=\"expandedDetail\">\r\n        <td\r\n          mat-cell\r\n          *matCellDef=\"let element\"\r\n          [attr.colspan]=\"displayedColumns.length\"\r\n          [ngStyle]=\"{\r\n            'border-width': username === element.username ? '' : '0',\r\n            display: username === element.username ? '' : 'none'\r\n          }\"\r\n          [@detailExpand]=\"username === element.username ? 'expanded' : 'collapsed'\"\r\n        >\r\n          <form\r\n            [formGroup]=\"editUserForm\"\r\n            fxLayout=\"row\"\r\n            fxLayout.lt-md=\"column\"\r\n            fxLayoutGap=\"1em\"\r\n            style=\"overflow: hidden; padding-top: 1em\"\r\n          >\r\n            <mat-form-field appearance=\"fill\" fxFlex.gt-sm=\"auto\">\r\n              <mat-label>Contraseña</mat-label>\r\n              <input matInput formControlName=\"password\" placeholder=\"Contraseña\" />\r\n              <mat-error>Campo requerido</mat-error>\r\n            </mat-form-field>\r\n\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"space-evenly center\" fxLayoutGap=\"1em\" style=\"padding-bottom: 1em\">\r\n              <button mat-flat-button color=\"warn\" (click)=\"selectedUser.next()\" fxFlex.lt-md=\"auto\">\r\n                Cancelar\r\n              </button>\r\n              <button\r\n                mat-raised-button\r\n                color=\"primary\"\r\n                (click)=\"editUser(username, editUserForm.value.password)\"\r\n                [disabled]=\"!editUserForm.valid && (loading | async)\"\r\n                fxFlex.lt-md=\"auto\"\r\n              >\r\n                {{ (loading | async) ? \"Editando usuario...\" : \"Guardar\" }}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: ['expandedDetail']\" style=\"height: 0\"></tr>\r\n\r\n      <tr *matNoDataRow>\r\n        <td class=\"mat-body-2\" colspan=\"4\">\r\n          <div fxLayout=\"column\" fxLayoutAlign=\"center center\" style=\"color: grey; padding: 2em\">\r\n            <mat-icon>assignment_ind</mat-icon>\r\n            <span>No hay Usuarios</span>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n    </table>\r\n  </div>\r\n  <mat-paginator\r\n    [fxHide]=\"(dataSource$ | async)?.data?.length === 0\"\r\n    [pageSizeOptions]=\"pageSizeOptions\"\r\n  ></mat-paginator>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\n\r\nimport { DisplayUsersComponent } from './display-users.component';\r\n\r\nimport { ButtonIconModule } from '../button-icon/button-icon.module';\r\n\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\n\r\n@NgModule({\r\n  declarations: [DisplayUsersComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule,\r\n    MatIconModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n    ButtonIconModule,\r\n  ],\r\n  exports: [DisplayUsersComponent],\r\n})\r\nexport class DisplayUsersModule {}\r\n","import { Component, Input } from '@angular/core';\r\nimport { MediaObserver } from '@angular/flex-layout';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AbstractControl, FormControl, FormGroup } from '@angular/forms';\r\n\r\nimport { BehaviorSubject, combineLatest, merge, Observable, of, Subscription, timer } from 'rxjs';\r\nimport {\r\n  debounceTime,\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  pluck,\r\n  shareReplay,\r\n  startWith,\r\n  switchMap,\r\n  take,\r\n  tap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\n\r\nimport { Feature, Map as OlMap, View } from 'ol';\r\nimport { OSM } from 'ol/source';\r\nimport { defaults as defaultInteractions, Draw } from 'ol/interaction';\r\nimport { fromLonLat, toLonLat } from 'ol/proj';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport GeometryType from 'ol/geom/GeometryType';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport { LineString, Polygon, MultiPolygon } from 'ol/geom';\r\nimport { Fill, Stroke, Style } from 'ol/style';\r\n\r\nimport {\r\n  booleanContains,\r\n  point as turfPoint,\r\n  polygon as turfPolygon,\r\n  multiPolygon as turfMultiPolygon,\r\n} from '@turf/turf';\r\nimport booleanIntersects from '@turf/boolean-intersects';\r\n\r\nimport { saveAs } from 'file-saver';\r\n\r\nimport { DataService } from 'src/app/services/data.service';\r\nimport { DisplayLogService } from 'src/app/services/display-log.service';\r\nimport { AdminLevel } from 'src/app/services/indexedDb';\r\nimport { charts, ChartType, aggFuncs, hours, metrics } from 'src/app/services/chartTypes';\r\nimport { normalizeString } from 'src/app/services/utils';\r\n\r\nexport const getTurfFeature = (polygon: Polygon | MultiPolygon) => {\r\n  return polygon instanceof Polygon\r\n    ? turfPolygon(polygon.getCoordinates())\r\n    : turfMultiPolygon(polygon.getCoordinates());\r\n};\r\n\r\n@Component({\r\n  selector: 'app-filters',\r\n  templateUrl: './filters.component.html',\r\n  styleUrls: ['./filters.component.scss'],\r\n})\r\nexport class FiltersComponent {\r\n  @Input() exportableData!: Observable<{ csvData: any[]; chart: typeof charts[number] }>;\r\n  @Input() secondary = false;\r\n\r\n  public maxDate = timer(0, 1000 * 60 * 60).pipe(map(() => new Date()));\r\n  public charts = charts;\r\n  public metrics = metrics;\r\n  public aggFuncs = aggFuncs;\r\n  public hours = hours;\r\n  public hoursIds = hours.map((h) => h.value);\r\n  public groupedNeighborhoods = this.dataService.neighborhoods.pipe(\r\n    map((neighborhoods) =>\r\n      (neighborhoods || [])\r\n        .sort((a, b) => (a.greaterAdminLevelId > b.greaterAdminLevelId ? 1 : -1))\r\n        .reduce((prev, nei) => {\r\n          const index = prev.findIndex((p) => p.label === nei.greaterAdminLevelName);\r\n          if (index >= 0) {\r\n            prev[index].neighborhoods.push(nei);\r\n            prev[index].neighborhoodIds.push(nei.lowerAdminLevelId);\r\n          } else {\r\n            prev.push({\r\n              label: nei.greaterAdminLevelName,\r\n              neighborhoods: [nei],\r\n              neighborhoodIds: [nei.lowerAdminLevelId],\r\n            });\r\n          }\r\n          return prev;\r\n        }, [] as { label: string; neighborhoods: typeof neighborhoods[number][]; neighborhoodIds: number[] }[])\r\n    )\r\n  );\r\n\r\n  public show = new BehaviorSubject(false);\r\n  private forceShow = this.dataService.queryParams.pipe(\r\n    take(1),\r\n    map((queryParams) => !this.secondary && !queryParams)\r\n  );\r\n  public show$ = merge(this.show, this.forceShow);\r\n  private drawnPolygon = new VectorSource({ features: [] });\r\n  public draw = new Draw({ source: this.drawnPolygon, type: GeometryType.POLYGON });\r\n  public mapPolygon = new BehaviorSubject<[number, number][]>([]);\r\n\r\n  public map!: OlMap;\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  public data = combineLatest([this.dataService.urlParams, this.dataService.streets]).pipe(\r\n    map(([v, streets]) => ({ v: this.secondary ? v.right : v.left, streets })),\r\n    map(({ v, streets }) => {\r\n      if (v.state.mapPolygon) this.mapPolygon.next(v.state.mapPolygon);\r\n      if (v.state.streets) {\r\n        this.selectedStreets.clear();\r\n        for (const { id, name } of (v.state.streets as number[]).map((id) => streets[id])) {\r\n          this.selectedStreets.set(id, name);\r\n        }\r\n      }\r\n      return v;\r\n    }),\r\n    withLatestFrom(this.dataService.neighborhoods),\r\n    map(([{ syncParams, state, otherState }, neighborhoods]) => ({\r\n      syncParams,\r\n      otherState,\r\n      neighborhoodsIds: (neighborhoods || []).map((n) => n.lowerAdminLevelId),\r\n      form: new FormGroup({\r\n        // TODO: default date now\r\n        dateStart: new FormControl(state.dateStart ? new Date(state.dateStart) : new Date(2022, 0, 1)),\r\n        dateEnd: new FormControl(state.dateEnd ? new Date(state.dateEnd) : new Date(2022, 1, 25)),\r\n        hours: new FormControl(state.hours ? state.hours : [17, 18]),\r\n        neighborhoods: new FormControl(state.neighborhoods ? state.neighborhoods : []),\r\n        metric: new FormControl(state.metric || metrics[0].id),\r\n        aggFunc: new FormControl(state.aggFunc || aggFuncs[0].id),\r\n        workingDays: new FormControl(state.workingDays || '{1,0}'),\r\n        autoSelectStreets: new FormControl(state.autoSelectStreets),\r\n        autoSelectAvenues: new FormControl(state.autoSelectAvenues),\r\n      }),\r\n    })),\r\n    shareReplay(1)\r\n  );\r\n\r\n  public geoFilteredStreets = combineLatest([\r\n    this.mapPolygon.pipe(\r\n      distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)),\r\n      tap((coords) => {\r\n        this.drawnPolygon.clear();\r\n        const feature = new Feature({ geometry: new LineString(coords.map((c) => fromLonLat(c))) });\r\n        feature.setStyle(\r\n          new Style({\r\n            stroke: new Stroke({ color: '#0099ff', width: 4 }),\r\n            fill: new Fill({ color: '#60bfff' }),\r\n          })\r\n        );\r\n        this.drawnPolygon.addFeature(feature);\r\n      }),\r\n      startWith([])\r\n    ),\r\n    this.data.pipe(\r\n      switchMap(({ form }) =>\r\n        form.controls.neighborhoods.valueChanges.pipe(startWith(form.controls.neighborhoods.value))\r\n      ),\r\n      distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b))\r\n    ) as Observable<number[]>,\r\n    this.dataService.neighborhoods,\r\n    this.dataService.streets,\r\n    this.dataService.lines,\r\n  ]).pipe(\r\n    switchMap(([coordinates, selectedNeighborhoodIds, neighborhoods, streets, lines]) => {\r\n      if (coordinates.length === 0 && selectedNeighborhoodIds.length === 0) return of(Object.values(streets));\r\n\r\n      const selectedNeighborhoods = neighborhoods.filter((n) =>\r\n        selectedNeighborhoodIds.some((id) => id === n.lowerAdminLevelId)\r\n      );\r\n\r\n      if (selectedNeighborhoods.length > 0 && coordinates.length > 0) {\r\n        const turfMapPolygon = getTurfFeature(new Polygon([coordinates]));\r\n        const intersected = selectedNeighborhoods.some((n) => booleanIntersects(n.turfPolygon, turfMapPolygon));\r\n        if (!intersected) {\r\n          this.displayLogService.openLogError(\r\n            'La selección del mapa y los barrios no se superponen, debes filtrar correctamente'\r\n          );\r\n          this.selectedStreets.clear();\r\n          return of([]);\r\n        }\r\n      }\r\n\r\n      let linesIds: number[];\r\n      if (selectedNeighborhoods.length > 0) {\r\n        const allSelectedIds = selectedNeighborhoods.map(({ linesIds }) => linesIds).flat();\r\n        linesIds = Array.from(new Set<number>(allSelectedIds).values());\r\n      } else {\r\n        linesIds = Object.keys(lines).map(Number);\r\n      }\r\n\r\n      if (coordinates.length > 0) {\r\n        const polygon = getTurfFeature(new Polygon([coordinates]));\r\n        linesIds = linesIds\r\n          .map((lineId) => lines[lineId])\r\n          // .filter((s) => booleanContains(polygon, s.turfLine))\r\n          .filter((s) => s.coordinates.some((point) => booleanContains(polygon, turfPoint(point))))\r\n          .map((l) => l.id);\r\n      }\r\n\r\n      const streetIds = linesIds.map((lineId) => lines[lineId]).map(({ streetId }) => streetId);\r\n      const filteredStreetIds = Array.from(new Set<number>(streetIds).values());\r\n      const filteredStreets = filteredStreetIds.map((streetId) => streets[streetId]);\r\n\r\n      return this.data.pipe(pluck('form')).pipe(\r\n        switchMap((form) =>\r\n          combineLatest([\r\n            form.controls.autoSelectStreets.valueChanges.pipe(startWith(form.value.autoSelectStreets)),\r\n            form.controls.autoSelectAvenues.valueChanges.pipe(startWith(form.value.autoSelectAvenues)),\r\n          ])\r\n        ),\r\n        map(([autoSelectStreets, autoSelectAvenues]: boolean[]) => {\r\n          if (autoSelectStreets || autoSelectAvenues) {\r\n            this.selectedStreets.clear();\r\n            const selectedStreets = filteredStreets.filter(\r\n              (street) => (autoSelectAvenues && street.type > 1) || (autoSelectStreets && street.type === 1)\r\n            );\r\n            for (const street of selectedStreets) {\r\n              this.selectedStreets.set(street.id, street.name);\r\n            }\r\n          }\r\n          return filteredStreets;\r\n        })\r\n      );\r\n    }),\r\n    shareReplay(1)\r\n  );\r\n\r\n  public streetSearch = new FormControl('');\r\n  public filteredStreets = combineLatest([\r\n    this.streetSearch.valueChanges.pipe(\r\n      filter((v) => typeof v === 'string'),\r\n      map((search) => normalizeString(search)),\r\n      startWith('')\r\n    ),\r\n    this.geoFilteredStreets,\r\n  ]).pipe(\r\n    map(([search, streets]) => {\r\n      if (search.length <= 3) return [];\r\n      const filteredStreets = streets.filter(({ name }) => normalizeString(name).includes(search));\r\n      const sorted = filteredStreets.sort((a, b) => (a.name > b.name ? 1 : -1));\r\n      return sorted;\r\n    })\r\n  );\r\n\r\n  public selectedStreets = new Map<number, string>();\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private dataService: DataService,\r\n    private activatedRoute: ActivatedRoute,\r\n    private displayLogService: DisplayLogService,\r\n    media: MediaObserver\r\n  ) {\r\n    this.draw.on('drawend', (drawEvent) =>\r\n      this.mapPolygon.next(\r\n        drawEvent.feature\r\n          .getGeometry()\r\n          .getCoordinates()[0]\r\n          ?.map((c: any) => toLonLat(c)) || []\r\n      )\r\n    );\r\n    this.subscriptions.push(\r\n      ...[\r\n        dataService.ready\r\n          .pipe(\r\n            take(1),\r\n            switchMap(() => this.show$),\r\n            filter((s) => s),\r\n            debounceTime(100),\r\n            take(1)\r\n          )\r\n          .subscribe(() => {\r\n            this.map = new OlMap({\r\n              interactions: defaultInteractions(),\r\n              target: `${this.secondary ? 'r' : 'l'}-filter-map`,\r\n              layers: [\r\n                new TileLayer({ source: new OSM(), preload: 4 }),\r\n                new VectorLayer({ source: this.drawnPolygon }),\r\n              ],\r\n              view: new View({ center: fromLonLat([-58.453, -34.62]), zoom: 12.1 }),\r\n              controls: [],\r\n            });\r\n            this.map.addInteraction(this.draw);\r\n          }),\r\n        media\r\n          .asObservable()\r\n          .pipe(\r\n            map(() => media.isActive('lt-lg')),\r\n            distinctUntilChanged(),\r\n            debounceTime(100)\r\n          )\r\n          .subscribe(() => (this.map ? this.map.updateSize() : null)),\r\n      ]\r\n    );\r\n  }\r\n\r\n  public changeChartType(newType: ChartType) {\r\n    return this.router.navigate([], {\r\n      relativeTo: this.activatedRoute,\r\n      queryParams: { [`${this.secondary ? 'r' : 'l'}-chart`]: newType },\r\n      queryParamsHandling: 'merge',\r\n    });\r\n  }\r\n\r\n  public clone(otherState: any) {\r\n    return this.router.navigate([], {\r\n      relativeTo: this.activatedRoute,\r\n      queryParams: { [this.secondary ? 'right' : 'left']: JSON.stringify(otherState) },\r\n      queryParamsHandling: 'merge',\r\n    });\r\n  }\r\n\r\n  public apply(state: any, sync: any, otherState: any, mapPolygon: [number, number][]) {\r\n    this.show.next(false);\r\n    const completeState = {\r\n      ...state,\r\n      ...Object.fromEntries(Object.entries(otherState).filter(([key]) => sync[key])),\r\n    };\r\n    const queryParams = {\r\n      [this.secondary ? 'right' : 'left']: JSON.stringify({\r\n        ...completeState,\r\n        dateStart: new Date(completeState.dateStart).getTime(),\r\n        dateEnd: completeState.dateEnd ? new Date(completeState.dateEnd).getTime() : undefined,\r\n        streets: sync.streets ? otherState.streets : [...this.selectedStreets.keys()],\r\n        mapPolygon,\r\n      }),\r\n      [this.secondary ? 'right-sync' : 'left-sync']: JSON.stringify(sync),\r\n    };\r\n    return this.router.navigate([], {\r\n      relativeTo: this.activatedRoute,\r\n      queryParams,\r\n      queryParamsHandling: 'merge',\r\n    });\r\n  }\r\n\r\n  public allSelected(selectedNeighborhoods: number[], allNeighborhoods: AdminLevel[]) {\r\n    return allNeighborhoods.every((neighborhood) =>\r\n      selectedNeighborhoods.includes(neighborhood.lowerAdminLevelId)\r\n    );\r\n  }\r\n\r\n  public someSelected(selectedNeighborhoods: number[], allNeighborhoods: AdminLevel[]) {\r\n    return (\r\n      !this.allSelected(selectedNeighborhoods, allNeighborhoods) &&\r\n      allNeighborhoods.some((neighborhood) => selectedNeighborhoods.includes(neighborhood.lowerAdminLevelId))\r\n    );\r\n  }\r\n\r\n  public setSelectedNeighborhoods(\r\n    control: AbstractControl,\r\n    select: boolean,\r\n    selectedNeighborhoods: number[],\r\n    neighborhoodIds: number[]\r\n  ) {\r\n    let newNeighborhoods: typeof selectedNeighborhoods = [];\r\n    if (select) {\r\n      newNeighborhoods = [...selectedNeighborhoods, ...neighborhoodIds].filter(\r\n        (id, index, arr) => arr.findIndex((id2) => id2 === id) === index\r\n      );\r\n    } else {\r\n      newNeighborhoods = selectedNeighborhoods.filter((id) => !neighborhoodIds.some((id2) => id2 === id));\r\n    }\r\n    control.setValue(newNeighborhoods);\r\n  }\r\n\r\n  public download({ csvData, chart }: { csvData: any[]; chart: typeof charts[number] }) {\r\n    const headers = (Object.keys(csvData[0]) as (keyof typeof csvData[0])[]).filter((h) => h !== '__typename');\r\n    const csv = [\r\n      headers.join(','),\r\n      ...csvData.map((row) => headers.map((fieldName) => row[fieldName]).join(',')),\r\n    ].join('\\r\\n');\r\n\r\n    saveAs(new Blob([csv], { type: 'text/csv' }), `${chart.name.toLocaleLowerCase()}.csv`);\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.subscriptions.map((s) => s.unsubscribe());\r\n  }\r\n}\r\n","<button mat-raised-button [matMenuTriggerFor]=\"filterMenu\" color=\"accent\">\r\n  <ng-content></ng-content>\r\n</button>\r\n<mat-menu #filterMenu=\"matMenu\">\r\n  <button mat-menu-item [matMenuTriggerFor]=\"chartsMenu\">Tipo</button>\r\n  <button mat-menu-item (click)=\"show.next(true)\">Mostrar Filtro</button>\r\n  <button *ngIf=\"data | async as state\" mat-menu-item (click)=\"clone(state.otherState)\">\r\n    Clonar filtro {{ secondary ? \"izquierdo\" : \"derecho\" }}\r\n  </button>\r\n  <button\r\n    *ngIf=\"exportableData | async as data\"\r\n    mat-menu-item\r\n    [disabled]=\"data.csvData.length === 0\"\r\n    (click)=\"download(data)\"\r\n  >\r\n    Descargar datos\r\n  </button>\r\n</mat-menu>\r\n\r\n<mat-menu #chartsMenu=\"matMenu\">\r\n  <ng-container *ngFor=\"let chart of charts\">\r\n    <button mat-menu-item *ngIf=\"chart.comparable || !secondary\" (click)=\"changeChartType(chart.id)\">\r\n      {{ chart.name }}\r\n    </button>\r\n  </ng-container>\r\n</mat-menu>\r\n\r\n<div [fxShow]=\"show$ | async\">\r\n  <div id=\"backdrop\"></div>\r\n  <div fxLayout=\"column\" fxLayoutAlign=\"center center\" id=\"dialog-wrapper\">\r\n    <mat-card *ngIf=\"data | async as state\" fxLayout=\"column\">\r\n      <mat-card-content fxLayout=\"row\" fxLayout.lt-lg=\"column\" style=\"padding: 1em; overflow-y: auto\">\r\n        <form\r\n          [formGroup]=\"state.form\"\r\n          fxLayout=\"column\"\r\n          fxLayoutGap=\"1em\"\r\n          fxFlex=\"1 0 50\"\r\n          ngStyle.gt-md=\"overflow-y: auto; padding-right: 1em;\"\r\n        >\r\n          <div class=\"mat-title\">Editar filtros del gráfico {{ secondary ? \"derecho\" : \"izquierdo\" }}</div>\r\n          <div class=\"mat-subheading-2\">Filtros temporales</div>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"0.5em\">\r\n            <button\r\n              *ngIf=\"secondary\"\r\n              mat-icon-button\r\n              (click)=\"state.syncParams.dateStart = !state.syncParams.dateStart\"\r\n              class=\"little-fab\"\r\n              [matTooltip]=\"state.syncParams.dateStart ? 'Sincronizado' : 'No sincronizado'\"\r\n            >\r\n              <mat-icon [color]=\"state.syncParams.dateStart ? 'primary' : ''\">\r\n                {{ state.syncParams.dateStart ? \"sync\" : \"sync_disabled\" }}\r\n              </mat-icon>\r\n            </button>\r\n            <mat-form-field appearance=\"fill\" fxFlex=\"auto\">\r\n              <mat-label>Fechas</mat-label>\r\n              <mat-date-range-input\r\n                [rangePicker]=\"dateOne\"\r\n                [max]=\"maxDate | async\"\r\n                [disabled]=\"state.syncParams.dateStart\"\r\n              >\r\n                <input matStartDate placeholder=\"Desde\" formControlName=\"dateStart\" />\r\n                <input matEndDate placeholder=\"hasta\" formControlName=\"dateEnd\" />\r\n              </mat-date-range-input>\r\n              <mat-datepicker-toggle matSuffix [for]=\"dateOne\"></mat-datepicker-toggle>\r\n              <mat-date-range-picker #dateOne></mat-date-range-picker>\r\n            </mat-form-field>\r\n          </div>\r\n\r\n          <mat-radio-group formControlName=\"workingDays\" fxLayout=\"row wrap\" fxLayoutGap=\"1em\">\r\n            <mat-radio-button [value]=\"'{1,0}'\">Todos los días</mat-radio-button>\r\n            <mat-radio-button [value]=\"'{1}'\">Días hábiles</mat-radio-button>\r\n            <mat-radio-button [value]=\"'{0}'\">Feriados y fines de semana</mat-radio-button>\r\n          </mat-radio-group>\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\" center\" fxLayoutGap=\"0.5em\">\r\n            <button\r\n              *ngIf=\"secondary\"\r\n              mat-icon-button\r\n              (click)=\"state.syncParams.hours = !state.syncParams.hours\"\r\n              class=\"little-fab\"\r\n              [matTooltip]=\"state.syncParams.hours ? 'Sincronizado' : 'No sincronizado'\"\r\n            >\r\n              <mat-icon [color]=\"state.syncParams.hours ? 'primary' : ''\">\r\n                {{ state.syncParams.hours ? \"sync\" : \"sync_disabled\" }}\r\n              </mat-icon>\r\n            </button>\r\n            <mat-form-field appearance=\"fill\" fxFlex=\"auto\">\r\n              <mat-label>Horas</mat-label>\r\n              <mat-select formControlName=\"hours\" multiple [disabled]=\"state.syncParams.hours\">\r\n                <mat-option *ngFor=\"let hour of hours\" [value]=\"hour.value\">{{ hour.view }}</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n            <mat-checkbox\r\n              (change)=\"state.form.controls.hours.setValue($event.checked ? hoursIds : [])\"\r\n              [checked]=\"state.form.value.hours.length === hours.length\"\r\n              [indeterminate]=\"state.form.value.hours.length > 0 && state.form.value.hours.length < hours.length\"\r\n              [disabled]=\"state.syncParams.hours\"\r\n            >\r\n              Todas las horas\r\n            </mat-checkbox>\r\n          </div>\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\" center\" fxLayoutGap=\"1em\">\r\n            <div class=\"mat-subheading-2 no-margin-bottom\">Filtros geográficos</div>\r\n            <button\r\n              *ngIf=\"secondary\"\r\n              mat-icon-button\r\n              (click)=\"state.syncParams.neighborhoods = !state.syncParams.neighborhoods\"\r\n              class=\"little-fab\"\r\n              [matTooltip]=\"state.syncParams.neighborhoods ? 'Sincronizado' : 'No sincronizado'\"\r\n            >\r\n              <mat-icon [color]=\"state.syncParams.neighborhoods ? 'primary' : ''\">{{\r\n                state.syncParams.neighborhoods ? \"sync\" : \"sync_disabled\"\r\n              }}</mat-icon>\r\n            </button>\r\n          </div>\r\n\r\n          <div fxLayout=\"column\" fxLayoutGap=\"2em\">\r\n            <div fxLayout=\"row\" fxLayoutAlign=\" center\" fxLayoutGap=\"1em\" fxFlex.gt-sm=\"auto\">\r\n              <mat-form-field appearance=\"fill\" fxFlex=\"auto\">\r\n                <mat-label>Barrio</mat-label>\r\n                <mat-select formControlName=\"neighborhoods\" multiple [disabled]=\"state.syncParams.neighborhoods\">\r\n                  <mat-select-trigger *ngIf=\"state.form.value.neighborhoods.length > 0\">\r\n                    {{ state.form.value.neighborhoods.length }} barrios seleccionados\r\n                  </mat-select-trigger>\r\n                  <div *ngFor=\"let adminLevel2 of groupedNeighborhoods | async\" fxLayout=\"row\">\r\n                    <mat-checkbox\r\n                      (change)=\"\r\n                        setSelectedNeighborhoods(\r\n                          state.form.controls.neighborhoods,\r\n                          $event.checked,\r\n                          state.form.value.neighborhoods,\r\n                          adminLevel2.neighborhoodIds\r\n                        )\r\n                      \"\r\n                      [checked]=\"allSelected(state.form.value.neighborhoods, adminLevel2.neighborhoods)\"\r\n                      [indeterminate]=\"someSelected(state.form.value.neighborhoods, adminLevel2.neighborhoods)\"\r\n                      class=\"mat-optgroup-label\"\r\n                    ></mat-checkbox>\r\n                    <mat-optgroup [label]=\"adminLevel2.label | titlecase\" fxFlex=\"auto\">\r\n                      <mat-option\r\n                        *ngFor=\"let neighborhood of adminLevel2.neighborhoods\"\r\n                        [value]=\"neighborhood.lowerAdminLevelId\"\r\n                      >\r\n                        {{ neighborhood.lowerAdminLevelName | titlecase }}\r\n                      </mat-option>\r\n                    </mat-optgroup>\r\n                  </div>\r\n                </mat-select>\r\n              </mat-form-field>\r\n              <mat-checkbox\r\n                (change)=\"state.form.controls.neighborhoods.setValue($event.checked ? state.neighborhoodsIds : [])\"\r\n                [checked]=\"state.form.value.neighborhoods.length === state.neighborhoodsIds.length\"\r\n                [indeterminate]=\"\r\n                  state.form.value.neighborhoods.length > 0 &&\r\n                  state.form.value.neighborhoods.length < state.neighborhoodsIds.length\r\n                \"\r\n                [disabled]=\"state.syncParams.neighborhoods\"\r\n              >\r\n                Todos los barrios\r\n              </mat-checkbox>\r\n            </div>\r\n\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"1em\">\r\n              <mat-slide-toggle\r\n                formControlName=\"autoSelectStreets\"\r\n                color=\"primary\"\r\n                [disabled]=\"state.syncParams.neighborhoods\"\r\n              >\r\n                Autoseleccionar calles\r\n              </mat-slide-toggle>\r\n              <mat-slide-toggle\r\n                formControlName=\"autoSelectAvenues\"\r\n                color=\"primary\"\r\n                [disabled]=\"state.syncParams.neighborhoods\"\r\n              >\r\n                Autoseleccionar avenidas\r\n              </mat-slide-toggle>\r\n            </div>\r\n\r\n            <div fxLayout=\"column\">\r\n              <div fxLayout=\"row\" fxLayoutAlign=\" center\" fxLayoutGap=\"0.5em\">\r\n                <mat-form-field appearance=\"fill\" fxFlex=\"auto\">\r\n                  <mat-label>Calle</mat-label>\r\n                  <input\r\n                    placeholder=\"Calle\"\r\n                    #streetInput\r\n                    matInput\r\n                    [formControl]=\"streetSearch\"\r\n                    [matAutocomplete]=\"auto\"\r\n                  />\r\n                </mat-form-field>\r\n                <mat-autocomplete #auto=\"matAutocomplete\">\r\n                  <mat-option *ngFor=\"let street of filteredStreets | async\" [value]=\"street.id\">\r\n                    <div\r\n                      (click)=\"\r\n                        selectedStreets.has(street.id)\r\n                          ? selectedStreets.delete(street.id)\r\n                          : selectedStreets.set(street.id, street.name);\r\n                        $event.stopPropagation()\r\n                      \"\r\n                    >\r\n                      <mat-checkbox\r\n                        #streetCheckbox\r\n                        color=\"primary\"\r\n                        [checked]=\"selectedStreets.has(street.id)\"\r\n                        (change)=\"streetCheckbox.writeValue(selectedStreets.has(street.id))\"\r\n                        style=\"width: 100%\"\r\n                      >\r\n                        {{ street.name | titlecase }}\r\n                      </mat-checkbox>\r\n                    </div>\r\n                  </mat-option>\r\n\r\n                  <div *ngIf=\"(streetInput.value || '').length < 4\" style=\"text-align: center; margin: 0.5em\">\r\n                    Escriba 4 caracteres o más para buscar\r\n                  </div>\r\n\r\n                  <mat-expansion-panel style=\"position: sticky; top: 0; bottom: 0.5em; margin: 0.5em\">\r\n                    <mat-expansion-panel-header>\r\n                      <mat-panel-title>Seleccionadas ({{ selectedStreets.size }})</mat-panel-title>\r\n                    </mat-expansion-panel-header>\r\n                    <div\r\n                      *ngIf=\"selectedStreets.size === 0; else selected\"\r\n                      fxLayout=\"row\"\r\n                      fxLayoutAlign=\"center center\"\r\n                    >\r\n                      No hay seleccionadas\r\n                    </div>\r\n                    <ng-template #selected>\r\n                      <mat-option *ngFor=\"let street of selectedStreets | keyvalue\" [value]=\"street.key\">\r\n                        <div\r\n                          (click)=\"\r\n                            selectedStreets.has(street.key)\r\n                              ? selectedStreets.delete(street.key)\r\n                              : selectedStreets.set(street.key, street.value);\r\n                            $event.stopPropagation()\r\n                          \"\r\n                        >\r\n                          <mat-checkbox\r\n                            color=\"primary\"\r\n                            [checked]=\"selectedStreets.has(street.key)\"\r\n                            style=\"width: 100%\"\r\n                          >\r\n                            {{ street.value | titlecase }}\r\n                          </mat-checkbox>\r\n                        </div>\r\n                      </mat-option>\r\n                    </ng-template>\r\n                  </mat-expansion-panel>\r\n                </mat-autocomplete>\r\n              </div>\r\n\r\n              <div *ngIf=\"selectedStreets.size > 0\">\r\n                <strong>Calles seleccionadas:</strong> {{ selectedStreets.size }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\" center\" fxLayoutGap=\"1em\">\r\n            <div class=\"mat-subheading-2 no-margin-bottom\">Métricas y agregaciones</div>\r\n            <button\r\n              *ngIf=\"secondary\"\r\n              mat-icon-button\r\n              (click)=\"state.syncParams.metric = !state.syncParams.metric\"\r\n              class=\"little-fab\"\r\n              [matTooltip]=\"state.syncParams.metric ? 'Sincronizado' : 'No sincronizado'\"\r\n            >\r\n              <mat-icon [color]=\"state.syncParams.metric ? 'primary' : ''\">{{\r\n                state.syncParams.metric ? \"sync\" : \"sync_disabled\"\r\n              }}</mat-icon>\r\n            </button>\r\n          </div>\r\n          <div fxLayout=\"row\" fxLayoutAlign.gt-sm=\"center center\" fxLayout.lt-md=\"column\" fxLayoutGap=\"1em\">\r\n            <mat-form-field appearance=\"fill\" fxFlex.gt-sm=\"auto\">\r\n              <mat-label>Métrica</mat-label>\r\n              <mat-select formControlName=\"metric\" [disabled]=\"state.syncParams.metric\">\r\n                <mat-option *ngFor=\"let metric of metrics\" [value]=\"metric.id\">{{ metric.name }}</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"fill\" fxFlex.gt-sm=\"auto\">\r\n              <mat-label>Agregado</mat-label>\r\n              <mat-select formControlName=\"aggFunc\" [disabled]=\"state.syncParams.metric\">\r\n                <mat-option *ngFor=\"let func of aggFuncs\" [value]=\"func.id\">{{ func.name }}</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n        </form>\r\n\r\n        <div fxLayout=\"column\" fxFlex=\"1 0 50\">\r\n          <div\r\n            [id]=\"(secondary ? 'r' : 'l') + '-filter-map'\"\r\n            fxFlex=\"auto\"\r\n            ngStyle.gt-md=\"padding-left: 1em\"\r\n            ngStyle.lt-lg=\"padding-top: 2em\"\r\n          >\r\n            <div style=\"position: relative; z-index: 1\">\r\n              <div style=\"position: absolute; top: 1em; right: 1em\">\r\n                <button mat-flat-button color=\"warn\" (click)=\"mapPolygon.next([]); draw.abortDrawing()\">\r\n                  Borrar\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </mat-card-content>\r\n      <mat-card-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n        <button mat-raised-button color=\"warn\" (click)=\"show.next(false)\">Cancelar</button>\r\n        <button\r\n          *ngIf=\"mapPolygon | async as polygon\"\r\n          mat-raised-button\r\n          color=\"primary\"\r\n          [disabled]=\"state.form.invalid\"\r\n          (click)=\"apply(state.form.value, state.syncParams, state.otherState, polygon)\"\r\n          fxFlex=\"1 0 auto\"\r\n        >\r\n          Aplicar\r\n        </button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\n\r\nimport { FiltersComponent } from './filters.component';\r\n\r\nimport { VectorMapModule } from '../vector-map/vector-map.module';\r\nimport { MapModule } from '../map/map.module';\r\n\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\n\r\n@NgModule({\r\n  declarations: [FiltersComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    RouterModule,\r\n    FlexLayoutModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatDatepickerModule,\r\n    MatSlideToggleModule,\r\n    MatAutocompleteModule,\r\n    MatChipsModule,\r\n    MatCheckboxModule,\r\n    MatTooltipModule,\r\n    MatExpansionModule,\r\n    MatRadioModule,\r\n    VectorMapModule,\r\n    MapModule,\r\n  ],\r\n  exports: [FiltersComponent],\r\n})\r\nexport class FiltersModule {}\r\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { UserService } from 'src/app/services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LoginComponent {\r\n  public showPassword = false;\r\n  public errorMessage = new BehaviorSubject<string>('');\r\n  public loading = new BehaviorSubject<boolean>(false);\r\n  public loginForm: FormGroup;\r\n\r\n  constructor(fb: FormBuilder, private userService: UserService) {\r\n    this.loginForm = fb.group({\r\n      username: [null, [Validators.required]],\r\n      password: [null, [Validators.required]],\r\n    });\r\n  }\r\n\r\n  public login(username: string, password: string) {\r\n    this.errorMessage.next('');\r\n    this.loading.next(true);\r\n    return this.userService.login(username, password).catch(() => {\r\n      this.loading.next(false);\r\n      this.errorMessage.next('Usuario o contraseña erróneos');\r\n    });\r\n  }\r\n}\r\n","<div fxLayout=\"column\" fxLayoutAlign=\"start center\" style=\"padding-top: 10vh\">\r\n  <mat-card style=\"width: 20em\">\r\n    <form\r\n      [formGroup]=\"loginForm\"\r\n      (ngSubmit)=\"login(loginForm.value.username, loginForm.value.password)\"\r\n      fxLayout=\"column\"\r\n      fxLayoutGap=\"10px\"\r\n      id=\"login-form\"\r\n    >\r\n      <mat-form-field>\r\n        <input matInput formControlName=\"username\" placeholder=\"Usuario\" type=\"text\" required />\r\n        <mat-error *ngIf=\"!loginForm.controls['username'].valid && loginForm.controls['username'].touched\">\r\n          Este campo es requerido\r\n        </mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          formControlName=\"password\"\r\n          placeholder=\"Contraseña\"\r\n          [type]=\"showPassword ? 'text' : 'password'\"\r\n          required\r\n        />\r\n        <mat-icon style=\"cursor: pointer\" matSuffix (click)=\"showPassword = !showPassword\">\r\n          {{ showPassword ? \"visibility\" : \"visibility_off\" }}\r\n        </mat-icon>\r\n        <mat-error *ngIf=\"!loginForm.controls['password'].valid && loginForm.controls['password'].touched\">\r\n          Este campo es requerido\r\n        </mat-error>\r\n      </mat-form-field>\r\n      <button\r\n        mat-raised-button\r\n        type=\"button\"\r\n        color=\"primary\"\r\n        [disabled]=\"true\"\r\n        *ngIf=\"loading | async; else entrar\"\r\n      >\r\n        <mat-icon>\r\n          <mat-spinner diameter=\"30\"></mat-spinner>\r\n        </mat-icon>\r\n      </button>\r\n      <ng-template #entrar>\r\n        <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"loginForm.invalid\">Entrar</button>\r\n      </ng-template>\r\n    </form>\r\n  </mat-card>\r\n  <mat-card\r\n    *ngIf=\"errorMessage | async as msg\"\r\n    fxLayout=\"row\"\r\n    fxLayoutAlign=\"center center\"\r\n    class=\"error\"\r\n    style=\"margin-top: 2em\"\r\n  >\r\n    <span>{{ msg }}</span>\r\n    <span fxFlex></span>\r\n    <button mat-icon-button (click)=\"errorMessage.next('')\">\r\n      <mat-icon aria-label=\"close\">close</mat-icon>\r\n    </button>\r\n  </mat-card>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\n\r\nimport { LoginComponent } from './login.component';\r\n\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatButtonModule } from '@angular/material/button';\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule,\r\n    MatIconModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatProgressSpinnerModule,\r\n    MatButtonModule,\r\n  ],\r\n  exports: [LoginComponent],\r\n})\r\nexport class LoginModule {}\r\n","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, OnInit, OnDestroy } from '@angular/core';\r\n\r\nimport { Feature, Map, View } from 'ol';\r\nimport { fromLonLat } from 'ol/proj';\r\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\r\nimport { defaults as defaultInteractions } from 'ol/interaction';\r\nimport { OSM } from 'ol/source';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport { Style, Stroke } from 'ol/style';\r\nimport { MultiLineString } from 'ol/geom';\r\n\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { debounceTime, filter, switchMap } from 'rxjs/operators';\r\n\r\nimport { metrics } from 'src/app/services/chartTypes';\r\nimport { isValid } from 'src/app/services/utils';\r\n\r\nexport interface Line {\r\n  line: [number, number][];\r\n  color: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-map',\r\n  templateUrl: './map.component.html',\r\n  styleUrls: ['./map.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MapComponent implements OnInit, OnDestroy {\r\n  @Input() data!: Observable<{\r\n    lines: Observable<Line[] | null>;\r\n    summary: Observable<{ delay: number; length: number; speed: number }>;\r\n  }>;\r\n  @Input() redraw!: Observable<any>;\r\n  @Input() boxSide = 'right';\r\n\r\n  public summary!: Observable<{ delay: number; length: number; speed: number } | null>;\r\n\r\n  public colors = ['rgba(255,255,204,0.75)', 'rgba(255,165,0,0.75)', 'rgba(255,0,0,0.75)', 'rgba(140,0,0,0.75)'];\r\n\r\n  static nextId = 0;\r\n  public id = 'display-map-' + MapComponent.nextId++;\r\n\r\n  public differenceGreaterPositive: { [key: string]: boolean } = { delay: false, length: false, speed: true };\r\n\r\n  public map!: Map;\r\n  private lineVectorSource = new VectorSource({ features: [] });\r\n  private view = new View({ center: fromLonLat([-58.453, -34.62]), zoom: 12.1 });\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  ngOnInit() {\r\n    this.summary = this.data.pipe(switchMap(({ summary }) => summary));\r\n\r\n    this.subscriptions.push(\r\n      this.redraw.pipe(debounceTime(100)).subscribe(() => {\r\n        if (this.map) this.map.updateSize();\r\n      })\r\n    );\r\n    this.subscriptions.push(\r\n      this.data\r\n        .pipe(\r\n          switchMap(({ lines }) => lines),\r\n          filter(isValid)\r\n        )\r\n        .subscribe((lines) => {\r\n          if (!this.map) {\r\n            this.map = new Map({\r\n              interactions: defaultInteractions(),\r\n              target: this.id,\r\n              layers: [\r\n                new TileLayer({ source: new OSM(), preload: 4 }),\r\n                new VectorLayer({ source: this.lineVectorSource }),\r\n              ],\r\n              view: this.view,\r\n            });\r\n          }\r\n\r\n          this.lineVectorSource.clear();\r\n          if (lines.length > 0) {\r\n            this.lineVectorSource.addFeatures(\r\n              lines\r\n                .sort((a, b) => a.color - b.color)\r\n                .map(({ line, color }) => {\r\n                  const feature = new Feature({\r\n                    geometry: new MultiLineString([line.map((c) => fromLonLat(c))]),\r\n                  });\r\n                  feature.setStyle([\r\n                    new Style({ stroke: new Stroke({ color: this.colors[color - 1] || 'black', width: 4 }) }),\r\n                  ]);\r\n                  return feature;\r\n                })\r\n            );\r\n\r\n            this.view.fit(this.lineVectorSource.getExtent(), { size: this.map.getSize(), maxZoom: 13 });\r\n          }\r\n          this.lineVectorSource.changed();\r\n        })\r\n    );\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.subscriptions.map((s) => s.unsubscribe());\r\n  }\r\n\r\n  public getUnit = (key: string) => metrics.find(({ id }) => id === key)?.unit;\r\n}\r\n","<div [id]=\"id\" style=\"width: 100%; height: 100%; position: relative\">\r\n  <div\r\n    *ngIf=\"summary | async as extra\"\r\n    class=\"floating-box\"\r\n    [ngStyle]=\"{ right: boxSide === 'right' ? '1em' : '', left: boxSide === 'left' ? '1em' : '' }\"\r\n  >\r\n    <div *ngFor=\"let item of extra | keyvalue\">\r\n      <div style=\"font-size: large; padding: 0.25em\">\r\n        <span style=\"font-weight: bold; margin-right: 0.25em\">{{ item.key | titlecase }}:</span>\r\n        <span>{{ item.value | number: \"1.0-0\" }} {{ getUnit(item.key) | lowercase }}</span>\r\n      </div>\r\n    </div>\r\n    <mat-divider style=\"margin: 0.5em 0em\"></mat-divider>\r\n    <div fxLayout=\"row\" style=\"padding: 0.25em\">\r\n      <div *ngFor=\"let color of colors; let index = index\" fxFlex=\"auto\">\r\n        <div [ngStyle]=\"{ 'background-color': color, height: '1.5em' }\"></div>\r\n        <div style=\"text-align: center\">{{ index + 1 }}</div>\r\n      </div>\r\n    </div>\r\n    <div style=\"text-align: center\">Intensidad</div>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MapComponent } from './map.component';\r\n\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\n\r\n@NgModule({\r\n  declarations: [MapComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FlexLayoutModule.withConfig({ addFlexToParent: false }),\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatDividerModule,\r\n  ],\r\n  exports: [MapComponent],\r\n})\r\nexport class MapModule {}\r\n","import { Component, ChangeDetectionStrategy, EventEmitter, Output } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\nimport { BehaviorSubject, combineLatest, Subject } from 'rxjs';\r\nimport {\r\n  debounceTime,\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  shareReplay,\r\n  startWith,\r\n  switchMap,\r\n  tap,\r\n} from 'rxjs/operators';\r\n\r\nimport { DisplayLogService } from 'src/app/services/display-log.service';\r\nimport { UserService } from 'src/app/services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-users',\r\n  templateUrl: './users.component.html',\r\n  styleUrls: ['./users.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class UsersComponent {\r\n  @Output() cancel = new EventEmitter();\r\n\r\n  private updateUsers = new Subject<void>();\r\n  public users = this.updateUsers.pipe(\r\n    startWith(1),\r\n    switchMap(() => this.userService.getUsers())\r\n  );\r\n\r\n  public creatingNewUser = new Subject<boolean>();\r\n  public loading = new BehaviorSubject(false);\r\n  public form = new FormGroup({\r\n    username: new FormControl(null, [Validators.required]),\r\n    password: new FormControl(null, [Validators.required]),\r\n  });\r\n\r\n  public alreadyExistingUsername = combineLatest([this.form.controls.username.valueChanges, this.users]).pipe(\r\n    filter(() => this.form.controls.username.valid),\r\n    debounceTime(500),\r\n    distinctUntilChanged(),\r\n    map(([username, users]) => users.some((user) => user.username === username)),\r\n    startWith(false),\r\n    tap((exists) => {\r\n      if (exists) this.form.controls.username.setErrors({ ...this.form.controls.username.errors, exists });\r\n    }),\r\n    shareReplay(1)\r\n  );\r\n\r\n  public validForm = combineLatest([this.loading, this.alreadyExistingUsername, this.form.statusChanges]).pipe(\r\n    map(([loading, existingUsername, status]) => ({\r\n      valid: !loading && !existingUsername && status === 'VALID',\r\n    })),\r\n    startWith({ valid: false })\r\n  );\r\n\r\n  constructor(public userService: UserService, private displayLog: DisplayLogService) {}\r\n\r\n  public createUser({ username, password }: { username: string; password: string }) {\r\n    this.loading.next(true);\r\n    return this.userService\r\n      .createUser(username, password)\r\n      .then(() => {\r\n        this.form.reset();\r\n        this.creatingNewUser.next(false);\r\n        this.displayLog.openLogSuccess('Usuario creado');\r\n        this.updateUsers.next();\r\n      })\r\n      .catch((err) => this.displayLog.openLogError(err?.error?.message ? err.error.message : err))\r\n      .finally(() => this.loading.next(false));\r\n  }\r\n}\r\n","<div fxLayout=\"column\" fxLayoutGap=\"1em\" style=\"padding: 1em\">\r\n  <ng-container *ngIf=\"(userService.currentUser | async)?.isAdmin; else notAllowed\">\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"1em\">\r\n      <app-button-icon tooltip=\"Volver\" icon=\"arrow_back\" (clickEvent)=\"cancel.emit()\"></app-button-icon>\r\n      <div class=\"mat-headline no-margin-bottom\">Administración de Usuarios</div>\r\n      <button\r\n        *ngIf=\"!(creatingNewUser | async)\"\r\n        mat-mini-fab\r\n        color=\"primary\"\r\n        matTooltip=\"Crear nuevo\"\r\n        matTooltipClass=\"tooltip\"\r\n        (click)=\"creatingNewUser.next(true)\"\r\n      >\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n    <form *ngIf=\"creatingNewUser | async\" [formGroup]=\"form\" fxLayout=\"column\" fxLayoutGap=\"1em\">\r\n      <div fxLayout=\"row\" fxLayout.lt-md=\"column\" fxLayoutGap=\"1em\">\r\n        <mat-form-field fxFlex.gt-sm=\"auto\">\r\n          <input matInput formControlName=\"username\" placeholder=\"Nombre de Usuario\" />\r\n          <mat-error>Campo requerido</mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field fxFlex.gt-sm=\"auto\">\r\n          <input matInput formControlName=\"password\" placeholder=\"Contraseña\" />\r\n          <mat-error>Campo requerido</mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"space-evenly center\" fxLayoutGap=\"1em\" style=\"padding-top: 1em\">\r\n        <button mat-flat-button color=\"warn\" (click)=\"creatingNewUser.next(false)\">Cancelar</button>\r\n        <ng-container *ngIf=\"validForm | async as validF\">\r\n          <button (click)=\"createUser(form.value)\" mat-flat-button color=\"primary\" [disabled]=\"!validF.valid\">\r\n            {{ (loading | async) ? \"Creando usuario...\" : \"Crear usuario y continuar\" }}\r\n          </button>\r\n        </ng-container>\r\n      </div>\r\n\r\n      <mat-divider></mat-divider>\r\n    </form>\r\n\r\n    <app-display-users [users]=\"users\" fxLayout=\"column\" fxFlex=\"auto\"></app-display-users>\r\n  </ng-container>\r\n\r\n  <ng-template #notAllowed>\r\n    <div fxLayoutAlign=\"center center\" fxLayout=\"column\">\r\n      <strong class=\"mat-title\">No tienes los permisos necesarios</strong>\r\n      <a mat-flat-button color=\"primary\" (clickEvent)=\"cancel.emit()\">Volver a la página principal</a>\r\n    </div>\r\n  </ng-template>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\n\r\nimport { UsersComponent } from './users.component';\r\n\r\nimport { DisplayUsersModule } from 'src/app/components/display-users/display-users.module';\r\n\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { ButtonIconModule } from 'src/app/components/button-icon/button-icon.module';\r\n\r\n@NgModule({\r\n  declarations: [UsersComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FlexLayoutModule,\r\n    ReactiveFormsModule,\r\n    MatButtonModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatDividerModule,\r\n    DisplayUsersModule,\r\n    ButtonIconModule,\r\n  ],\r\n  exports: [UsersComponent],\r\n})\r\nexport class UsersModule {}\r\n","import { TitleCasePipe } from '@angular/common';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { BehaviorSubject, combineLatest, Subscription, timer } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { Feature, Map, View } from 'ol';\r\nimport { MultiPolygon } from 'ol/geom';\r\nimport RenderFeature from 'ol/render/Feature';\r\nimport { fromLonLat } from 'ol/proj';\r\nimport { Options } from 'ol/style/Style';\r\n\r\nimport Geometry from 'ol/geom/Geometry';\r\n\r\nimport VectorSource from 'ol/source/Vector';\r\nimport VectorLayer from 'ol/layer/Vector';\r\n\r\nimport { Style, Text } from 'ol/style';\r\nimport Fill from 'ol/style/Fill';\r\nimport Stroke from 'ol/style/Stroke';\r\n\r\nimport { AdminLevel, DataService, State } from 'src/app/services/data.service';\r\nimport { isValid } from 'src/app/services/utils';\r\n\r\nexport interface Shape {\r\n  label: string;\r\n  color: string;\r\n  disabled: boolean;\r\n  highlight: boolean;\r\n  coordinates: [number, number][][][];\r\n}\r\n\r\n@Component({\r\n  selector: 'app-vector-map',\r\n  templateUrl: './vector-map.component.html',\r\n  styleUrls: ['./vector-map.component.scss'],\r\n})\r\nexport class VectorMapComponent implements OnInit {\r\n  public id = 'vector-map';\r\n\r\n  public map!: Map;\r\n\r\n  private prevHighlight!: RenderFeature | Feature<Geometry> | undefined;\r\n  private vectorSource = new VectorSource({ features: [] });\r\n\r\n  private subscription!: Subscription;\r\n\r\n  public newSelectedNeighborhoods = new BehaviorSubject<AdminLevel[]>([]);\r\n\r\n  private colors = [\r\n    '#d7d7d7bf', // '#rgba(215,215,215,0.8)',\r\n    '#dadcedbf', // '#rgba(218,220,237,0.8)',\r\n    '#b4b6c1bf', // '#rgba(180,182,193,0.8)',\r\n    '#dae0dcbf', // '#rgba(218,224,220,0.8)',\r\n    '#c4bababf', // '#rgba(196,186,186,0.8)',\r\n    '#afafafbf', // '#rgba(175,175,175,0.8)',\r\n    '#b4c1b9bf', // '#rgba(180,193,185,0.8)',\r\n    '#9c9eabbf', // '#rgba(156,158,171,0.8)',\r\n    '#ab9c9cbf', // '#rgba(171,156,156,0.8)',\r\n    '#969696bf', // '#rgba(150,150,150,0.8)',\r\n    '#8c9e93bf', // '#rgba(140,158,147,0.8)',\r\n    '#806e6ebf', // '#rgba(128,110,110,0.8)',\r\n    '#a79cabbf', // '#rgba(167,156,171,0.8)',\r\n    '#c1bac4bf', // '#rgba(193,186,196,0.8)',\r\n    '#7c6e80bf', // '#rgba(124,110,128,0.8)',\r\n    '#9ca9abbf', // '#rgba(156,169,171,0.8)',\r\n    '#bac3c4bf', // '#rgba(186,195,196,0.8)',\r\n    '#6e7e80bf', // '#rgba(110,126,128,0.8)',\r\n  ];\r\n\r\n  constructor(public dataService: DataService, private activatedRoute: ActivatedRoute, private router: Router) {}\r\n\r\n  public async ngOnInit() {\r\n    await timer(100).toPromise();\r\n    this.subscription = combineLatest([\r\n      this.dataService.neighborhoods,\r\n      this.dataService.urlParams.pipe(map(({ left }) => left.state.neighborhoods || [])),\r\n    ]).subscribe(([allNeighborhoods, neighborhoodIds]) => {\r\n      const shapes = allNeighborhoods.map((n) => ({\r\n        label: new TitleCasePipe().transform(n.lowerAdminLevelName),\r\n        color: this.colors[n.greaterAdminLevelId % this.colors.length],\r\n        disabled: false,\r\n        highlight: neighborhoodIds.some((id) => id === n.lowerAdminLevelId),\r\n        coordinates: n.coordinates,\r\n      }));\r\n\r\n      const points = allNeighborhoods\r\n        .map((a) => a.coordinates)\r\n        .flat()\r\n        .flat()\r\n        .flat();\r\n\r\n      const minX = Math.min(...points.map((point) => point[1]));\r\n      const minY = Math.min(...points.map((point) => point[0]));\r\n      const maxX = Math.max(...points.map((point) => point[1]));\r\n      const maxY = Math.max(...points.map((point) => point[0]));\r\n\r\n      const min = fromLonLat([minY * 1.0005, minX * 1.0005]);\r\n      const max = fromLonLat([maxY * 0.9995, maxX * 0.9995]);\r\n      const center = [(min[0] + max[0]) / 2, (min[1] + max[1]) / 2];\r\n\r\n      this.map = new Map({\r\n        target: this.id,\r\n        layers: [new VectorLayer({ source: this.vectorSource })],\r\n        view: new View({ center, zoom: 11, extent: [...min, ...max] }),\r\n      });\r\n\r\n      const selectedNeighborhoods = allNeighborhoods.filter((n) => neighborhoodIds.includes(n.lowerAdminLevelId));\r\n      this.newSelectedNeighborhoods.next(selectedNeighborhoods);\r\n      this.vectorSource.clear();\r\n      this.vectorSource.addFeatures(\r\n        shapes.map(({ label, color, disabled, coordinates, highlight }) => {\r\n          const points = coordinates.map((a) => a.map((b) => b.map((point) => fromLonLat(point))));\r\n          const feature = new Feature({ geometry: new MultiPolygon(points) });\r\n          const style = new Style(this.getStyleOptions(highlight, true, color, disabled, label));\r\n          feature.setStyle(style);\r\n          return feature;\r\n        })\r\n      );\r\n\r\n      this.map.on('pointermove', (event) => {\r\n        if (event.dragging) return;\r\n        this.displayFeatureInfo(shapes, this.map.getEventPixel(event.originalEvent));\r\n      });\r\n\r\n      this.map.on('click', (event) => {\r\n        const feature = this.map.forEachFeatureAtPixel(this.map.getEventPixel(event.originalEvent), (f) => f);\r\n        if (feature instanceof Feature) {\r\n          const text = (feature.getStyle() as Style).getText().getText();\r\n          const selected = this.newSelectedNeighborhoods.value;\r\n          const newNeighborhood = selected.find((n) => n.lowerAdminLevelName === text?.toLocaleLowerCase());\r\n          const newSelected = !!newNeighborhood\r\n            ? selected.filter((nei) => nei.lowerAdminLevelId !== newNeighborhood.lowerAdminLevelId)\r\n            : [\r\n                ...selected,\r\n                allNeighborhoods.find(\r\n                  (neighborhood) => neighborhood.lowerAdminLevelName === text?.toLocaleLowerCase()\r\n                ),\r\n              ].filter(isValid);\r\n          this.newSelectedNeighborhoods.next(newSelected);\r\n          this.toggleHighlight(feature, shapes, 'add', !newNeighborhood);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  public async filter(state: State, selected: AdminLevel[]) {\r\n    const neighborhoods = selected.map(({ lowerAdminLevelId }) => lowerAdminLevelId);\r\n    return this.router.navigate([], {\r\n      relativeTo: this.activatedRoute,\r\n      queryParams: { left: JSON.stringify({ ...state, neighborhoods }) },\r\n      queryParamsHandling: 'merge',\r\n    });\r\n  }\r\n\r\n  private getText = (text?: string) =>\r\n    new Text({\r\n      fill: new Fill({ color: '#000' }),\r\n      stroke: new Stroke({ color: '#fff', width: 3 }),\r\n      font: '12px Calibri,sans-serif',\r\n      text,\r\n    });\r\n\r\n  private getStyleOptions(\r\n    highlight: boolean,\r\n    selected: boolean,\r\n    fillColor: string,\r\n    disabled: boolean,\r\n    text: string\r\n  ): Options {\r\n    const alpha = disabled ? '40' : 'ff';\r\n    const color = `#${fillColor.slice(1, 7)}${alpha}`;\r\n    const stroke = highlight\r\n      ? new Stroke({ color: selected ? '#4a5b4a' : '#444444', width: selected ? 4 : 3 })\r\n      : new Stroke({ color: disabled ? 'white' : '#808080', width: disabled ? 0 : 1 });\r\n    return { fill: new Fill({ color }), stroke, text: this.getText(text), zIndex: highlight ? 999 : 111 };\r\n  }\r\n\r\n  private toggleHighlight(\r\n    feature: Feature<Geometry>,\r\n    shapes: Shape[],\r\n    action: 'add' | 'remove',\r\n    selected: boolean\r\n  ) {\r\n    const text = (feature.getStyle() as Style)?.getText()?.getText();\r\n    const { color, disabled } = shapes.filter((shape) => shape.label === text)[0];\r\n    this.map.getTargetElement().style.cursor = feature && !disabled ? 'pointer' : '';\r\n    const alreadySelected = this.newSelectedNeighborhoods.value.some(\r\n      (n) => n.lowerAdminLevelName === text?.toLocaleLowerCase()\r\n    );\r\n    if (!disabled && (!alreadySelected || selected)) {\r\n      feature.setStyle(new Style(this.getStyleOptions(action === 'add', selected, color, disabled, text || '')));\r\n    }\r\n  }\r\n\r\n  private displayFeatureInfo(shapes: Shape[], pixel: number[]) {\r\n    const feature = this.map.forEachFeatureAtPixel(pixel, (feature) => feature);\r\n    const highlightText = ((this.prevHighlight as Feature<Geometry>)?.getStyle() as Style)?.getText()?.getText();\r\n    const featureText = ((feature as Feature<Geometry>)?.getStyle() as Style)?.getText()?.getText();\r\n    if (highlightText !== featureText) {\r\n      if (this.prevHighlight instanceof Feature) {\r\n        this.toggleHighlight(this.prevHighlight, shapes, 'remove', false);\r\n      }\r\n      if (feature instanceof Feature) {\r\n        this.toggleHighlight(feature, shapes, 'add', false);\r\n      }\r\n      this.prevHighlight = feature;\r\n    }\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    if (this.subscription && !this.subscription.closed) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","<div fxLayout=\"column\" style=\"width: 100%; height: 100%\" fxLayoutGap=\"0.5em\">\r\n  <ng-container *ngIf=\"dataService.urlParams | async as urlParams\">\r\n    <button\r\n      *ngIf=\"newSelectedNeighborhoods | async as selected\"\r\n      mat-raised-button\r\n      [disabled]=\"selected.length === 0\"\r\n      color=\"primary\"\r\n      (click)=\"filter(urlParams.left.state, selected)\"\r\n    >\r\n      Aplicar Filtro a Barrios y Calles\r\n    </button>\r\n  </ng-container>\r\n\r\n  <div [id]=\"id\" style=\"width: 100%; height: 100%\"></div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\n\r\nimport { VectorMapComponent } from './vector-map.component';\r\n\r\nimport { MatButtonModule } from '@angular/material/button';\r\n\r\n@NgModule({\r\n  declarations: [VectorMapComponent],\r\n  imports: [CommonModule, FlexLayoutModule.withConfig({ addFlexToParent: false }), MatButtonModule],\r\n  exports: [VectorMapComponent],\r\n})\r\nexport class VectorMapModule {}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { ApolloLink, InMemoryCache } from '@apollo/client/core';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport { APOLLO_OPTIONS } from 'apollo-angular';\r\nimport { HttpLink } from 'apollo-angular/http';\r\n\r\nexport function createApollo(httpLink: HttpLink) {\r\n  const auth = setContext(() => {\r\n    const token = localStorage.getItem('token');\r\n    return token ? { headers: { Authorization: `Bearer ${token}` } } : {};\r\n  });\r\n  return {\r\n    link: ApolloLink.from([\r\n      auth,\r\n      httpLink.create({ uri: `${location.protocol}//${location.hostname}/graphql/v1/graphql` }),\r\n    ]),\r\n    cache: new InMemoryCache(),\r\n  };\r\n}\r\n\r\n@NgModule({\r\n  providers: [\r\n    {\r\n      provide: APOLLO_OPTIONS,\r\n      useFactory: createApollo,\r\n      deps: [HttpLink],\r\n    },\r\n  ],\r\n})\r\nexport class GraphQLModule {}\r\n","import { range } from './utils';\r\n\r\nexport const charts = [\r\n  { id: 'map', name: 'Mapa', comparable: true },\r\n  { id: 'bar', name: 'Evolutivo', comparable: true },\r\n  { id: 'line', name: 'Comparativo', comparable: false },\r\n  { id: 'line-with-map', name: 'Predictivo', comparable: false },\r\n] as const;\r\nexport const chartTypes = charts.map((c) => c.id);\r\n\r\nexport type ChartType = typeof chartTypes[number];\r\n\r\nexport const hours = range(24).map((value) => ({ value, view: `${value}:00 a ${value}:59` }));\r\n\r\nexport interface Metric {\r\n  id: 'speed' | 'delay' | 'length';\r\n  name: string;\r\n  colors: { min: number; max: number; color: string }[];\r\n  unit: string;\r\n}\r\nexport const metrics = [\r\n  {\r\n    id: 'speed',\r\n    name: 'Velocidad',\r\n    colors: [\r\n      { min: 0, max: 10, color: 'red' },\r\n      { min: 10, max: 40, color: 'orange' },\r\n      { min: 40, max: Infinity, color: 'yellow' },\r\n    ],\r\n    unit: 'Km/h',\r\n  },\r\n  {\r\n    id: 'delay',\r\n    name: 'Demora',\r\n    colors: [\r\n      { min: 0, max: 20, color: 'yellow' },\r\n      { min: 20, max: 60, color: 'orange' },\r\n      { min: 60, max: 110, color: 'red' },\r\n      { min: 110, max: Infinity, color: 'darkred' },\r\n    ],\r\n    unit: 'Minutos',\r\n  },\r\n  {\r\n    id: 'length',\r\n    name: 'Largo de Cola',\r\n    colors: [\r\n      { min: 0, max: 100, color: 'yellow' },\r\n      { min: 100, max: 400, color: 'orange' },\r\n      { min: 400, max: 600, color: 'red' },\r\n      { min: 600, max: Infinity, color: 'darkred' },\r\n    ],\r\n    unit: 'Metros',\r\n  },\r\n] as const;\r\nexport const metricIds = metrics.map(({ id }) => id);\r\nexport type MetricType = typeof metricIds[number];\r\n\r\nexport const aggFuncs = [\r\n  { id: 'mean', name: 'Media' },\r\n  { id: 'max', name: 'Máximo' },\r\n  { id: 'last', name: 'Último' },\r\n] as const;\r\nexport const aggFuncIds = aggFuncs.map(({ id }) => id);\r\nexport type AggFuncType = typeof aggFuncIds[number];\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\nimport { IsString, validateSync } from 'class-validator';\r\n\r\nimport {\r\n  LineString,\r\n  MultiLineString,\r\n  lineString,\r\n  multiLineString,\r\n  Properties,\r\n  Feature,\r\n  polygon as turfPolygon,\r\n  multiPolygon as turfMultiPolygon,\r\n  multiPolygon,\r\n  booleanContains,\r\n} from '@turf/turf';\r\n\r\nimport { WKT } from 'ol/format';\r\nimport { MultiLineString as OlMLS, MultiPolygon, Polygon } from 'ol/geom';\r\n\r\nimport { BehaviorSubject, combineLatest, from, Observable, of, ReplaySubject, timer } from 'rxjs';\r\nimport {\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  pluck,\r\n  shareReplay,\r\n  startWith,\r\n  switchMap,\r\n  take,\r\n  tap,\r\n} from 'rxjs/operators';\r\n\r\nimport { AggFuncType, metrics, MetricType } from './chartTypes';\r\nimport {\r\n  JamsGQL,\r\n  EvolutivoGQL,\r\n  ComparativoGQL,\r\n  SummaryGQL,\r\n  PredictivoGQL,\r\n  LinesGQL,\r\n  StreetsGQL,\r\n  Admin_LevelsGQL,\r\n} from './graphql';\r\nimport { indexedDb, Line as BaseLine, Street as BaseStreet, AdminLevel as BaseAdminLevel } from './indexedDb';\r\nimport { daysRange, getPartialDate, isValid, range } from './utils';\r\nimport { UserService } from './user.service';\r\n\r\nexport const getTurfFeature = (polygon: Polygon | MultiPolygon) => {\r\n  return polygon instanceof Polygon\r\n    ? turfPolygon(polygon.getCoordinates())\r\n    : turfMultiPolygon(polygon.getCoordinates());\r\n};\r\ninterface Line extends BaseLine {\r\n  turfLine: Feature<LineString, Properties>;\r\n}\r\ninterface Street extends BaseStreet {\r\n  turfLine: Feature<MultiLineString, Properties>;\r\n}\r\n\r\nclass QueryParams {\r\n  @IsString() date_from!: string;\r\n  @IsString() date_to!: string;\r\n  @IsString() hours!: string;\r\n  @IsString() metric!: string;\r\n  @IsString() aggFunc!: string;\r\n  @IsString() lines!: string;\r\n  @IsString() working_days!: string;\r\n}\r\n\r\nexport interface AdminLevel extends BaseAdminLevel {\r\n  turfPolygon: Feature<Polygon, Properties>;\r\n  olPolygon: Polygon | MultiPolygon;\r\n}\r\n\r\nexport interface State {\r\n  aggFunc: AggFuncType;\r\n  autoSelectAvenues: boolean;\r\n  autoSelectStreets: boolean;\r\n  dateEnd: number;\r\n  dateStart: number;\r\n  hours: number[];\r\n  mapPolygon: [number, number][];\r\n  metric: MetricType;\r\n  neighborhoods: number[];\r\n  streets: number[];\r\n  workingDays: string;\r\n}\r\n\r\nexport interface ComparativeData {\r\n  name: string;\r\n  data: Observable<{ dataset: { label: string; data: number[] }[]; labels: string[]; unit: string }>;\r\n  exportableData: Observable<{ street: string; year: number; month: number; val: number }[]>;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DataService {\r\n  public dataState = new BehaviorSubject('Verificando datos de calles');\r\n\r\n  private indexedDbLines = new ReplaySubject<BaseLine[]>(1);\r\n  private indexedDbStreets = new ReplaySubject<BaseStreet[]>(1);\r\n  // private indexedDbNeighborhoods = new Subject<BaseAdminLevel[]>();\r\n\r\n  private indexedDbVersionItem = 'congestiometro-version';\r\n  private indexedDbVersion = 10;\r\n  private newVersion$ = new ReplaySubject<boolean>(1);\r\n\r\n  public lines = combineLatest([\r\n    this.userService.currentUser,\r\n    this.newVersion$,\r\n    this.indexedDbLines.asObservable().pipe(take(1)),\r\n  ]).pipe(\r\n    filter(([user]) => !!user),\r\n    take(1),\r\n    switchMap(([_, newVersion, localLines]) => {\r\n      this.dataState.next('Verificando el estado de los datos internos de segmentos');\r\n      if (!newVersion && localLines.length > 0) {\r\n        this.dataState.next('Datos de segmentos Cargados exitosamente...');\r\n        return of(localLines);\r\n      } else {\r\n        console.log('Bajando datos de segmentos del servidor...');\r\n        this.dataState.next('Bajando datos de segmentos del servidor...');\r\n        return this.linesGQL.fetch().pipe(\r\n          map(({ data }) =>\r\n            data.jam_lines.map(({ line_id, street_id, line }) => {\r\n              return { id: line_id, streetId: street_id, coordinates: line.coordinates } as BaseLine;\r\n            })\r\n          ),\r\n          switchMap((lines) => {\r\n            console.log('Guardando datos de segmentos localmente...');\r\n            this.dataState.next('Guardando datos de segmentos localmente...');\r\n            return indexedDb.bulkPutLines(lines).then(() => lines);\r\n          }),\r\n          tap(() => {\r\n            console.log('Datos de segmentos guardados...');\r\n            this.dataState.next('Datos de segmentos guardados...');\r\n          })\r\n        );\r\n      }\r\n    }),\r\n    map((data) =>\r\n      data.reduce((prev, line) => {\r\n        prev[line.id] = { ...line, turfLine: lineString(line.coordinates) };\r\n        return prev;\r\n      }, {} as { [key: number]: Line })\r\n    ),\r\n    shareReplay(1)\r\n  );\r\n\r\n  public streets = combineLatest([\r\n    this.userService.currentUser,\r\n    this.newVersion$,\r\n    this.indexedDbStreets.asObservable().pipe(take(1)),\r\n  ]).pipe(\r\n    filter(([user]) => !!user),\r\n    take(1),\r\n    switchMap(([_, newVersion, localStreets]) => {\r\n      this.dataState.next('Verificando el estado de los datos internos de calles');\r\n      if (!newVersion && localStreets.length > 0) {\r\n        this.dataState.next('Datos de calles Cargados exitosamente...');\r\n        return of(localStreets);\r\n      } else {\r\n        console.log('Bajando datos de calles del servidor...');\r\n        this.dataState.next('Bajando datos de calles del servidor...');\r\n        return this.streetsGQL.fetch().pipe(\r\n          map(({ data }) =>\r\n            data.streets\r\n              .map(\r\n                ({ street_id, street_name, street_sufix, street_type, line }) =>\r\n                  ({\r\n                    id: street_id,\r\n                    name: `${street_name} ${street_sufix}`.trim(),\r\n                    type: street_type,\r\n                    shape: line,\r\n                  } as BaseStreet)\r\n              )\r\n              .sort((a, b) => (a.name > b.name ? 1 : -1))\r\n          ),\r\n          switchMap((streets) => {\r\n            console.log('Guardando datos de calles localmente...');\r\n            this.dataState.next('Guardando datos de calles localmente...');\r\n            return indexedDb.bulkPutStreets(streets).then(() => streets);\r\n          }),\r\n          tap(() => {\r\n            console.log('Datos de calles guardados...');\r\n            this.dataState.next('Datos de calles guardados. Procesando segmentos...');\r\n          })\r\n        );\r\n      }\r\n    }),\r\n    map((data) =>\r\n      data.reduce((prev, street) => {\r\n        prev[street.id] = {\r\n          ...street,\r\n          turfLine: multiLineString(\r\n            street.shape.type === 'MultiLineString' ? street.shape.coordinates : [street.shape.coordinates]\r\n          ),\r\n        };\r\n        return prev;\r\n      }, {} as { [key: number]: Street })\r\n    ),\r\n    shareReplay(1)\r\n  );\r\n\r\n  public neighborhoods = this.adminLevelsGQL.fetch().pipe(\r\n    map(({ data }) =>\r\n      data.admin_levels.map(\r\n        (adminLevel) =>\r\n          ({\r\n            greaterAdminLevelId: adminLevel.greater_admin_level_id,\r\n            greaterAdminLevelName: adminLevel.greater_admin_level_name,\r\n            lowerAdminLevelId: adminLevel.lower_admin_level_id,\r\n            lowerAdminLevelName: adminLevel.lower_admin_level_name,\r\n            linesIds: JSON.parse(adminLevel.lines_ids) as number[],\r\n            streetsIds: JSON.parse(adminLevel.streets_ids) as number[],\r\n            coordinates:\r\n              adminLevel.shape === 'Polygon' ? [adminLevel.shape.coordinates] : adminLevel.shape.coordinates,\r\n            lastUpdate: adminLevel.last_update,\r\n            turfPolygon: (adminLevel.shape === 'Polygon'\r\n              ? turfPolygon(adminLevel.shape.coordinates)\r\n              : multiPolygon(adminLevel.shape.coordinates)) as any,\r\n            olPolygon:\r\n              adminLevel.shape === 'Polygon'\r\n                ? new Polygon(adminLevel.shape.coordinates)\r\n                : new MultiPolygon(adminLevel.shape.coordinates),\r\n          } as AdminLevel)\r\n      )\r\n    ),\r\n    shareReplay(1)\r\n  );\r\n\r\n  public ready = timer(0, 60 * 60 * 1000).pipe(\r\n    switchMap(() => combineLatest([this.lines, this.streets, this.neighborhoods])),\r\n    tap(() => window.localStorage.setItem(this.indexedDbVersionItem, JSON.stringify(this.indexedDbVersion))),\r\n    map(() => {\r\n      this.dataState.next('Datos cargados, iniciando aplicación...');\r\n      return true;\r\n    })\r\n  );\r\n\r\n  public urlParams = this.activatedRoute.queryParams.pipe(\r\n    map((queryParams) => {\r\n      const leftSyncParams = JSON.parse(queryParams['left-sync'] || '{}') as { [key: string]: boolean };\r\n      const leftState = JSON.parse(queryParams['left'] || '{}');\r\n\r\n      const rightSyncParams = JSON.parse(queryParams['right-sync'] || '{}') as { [key: string]: boolean };\r\n      const rightState = JSON.parse(queryParams['right'] || '{}');\r\n\r\n      return {\r\n        left: {\r\n          syncParams: leftSyncParams,\r\n          otherState: rightState,\r\n          state: {\r\n            ...leftState,\r\n            ...Object.fromEntries(Object.entries(rightState).filter(([key]) => leftSyncParams[key])),\r\n          } as State,\r\n          greaterDate: (queryParams.greaterDate as number) || new Date().getFullYear(),\r\n        },\r\n        right: {\r\n          syncParams: rightSyncParams,\r\n          otherState: leftState,\r\n          state: {\r\n            ...rightState,\r\n            ...Object.fromEntries(Object.entries(leftState).filter(([key]) => rightSyncParams[key])),\r\n          } as State,\r\n        },\r\n      };\r\n    }),\r\n    distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)),\r\n    shareReplay(1)\r\n  );\r\n\r\n  private getQueryParams(filters: any, allLines: { [key: number]: Line }, allNeighborhoods: AdminLevel[]) {\r\n    const { dateStart, dateEnd, hours, metric, aggFunc, workingDays, neighborhoods, mapPolygon, streets } =\r\n      filters;\r\n\r\n    let lines: number[] = [];\r\n    if (streets?.length > 0) {\r\n      if (neighborhoods?.length > 0 || mapPolygon?.length > 0) {\r\n        if (neighborhoods?.length > 0) {\r\n          const allSelectedIds = allNeighborhoods\r\n            .filter(({ lowerAdminLevelId }) => neighborhoods.some((id: number) => id === lowerAdminLevelId))\r\n            .map(({ linesIds }) => linesIds)\r\n            .flat();\r\n          lines = Array.from(new Set<number>(allSelectedIds).values());\r\n        }\r\n\r\n        if (mapPolygon?.length > 0) {\r\n          const polygon = getTurfFeature(new Polygon([mapPolygon]));\r\n          lines = (lines.length > 0 ? lines.map((lineId) => allLines[lineId]) : Object.values(allLines))\r\n            .filter((l) => booleanContains(polygon, lineString(l.coordinates)))\r\n            .map((l) => l.id);\r\n        }\r\n\r\n        lines = lines.filter((lineId) => streets.includes(allLines[lineId].streetId));\r\n      } else {\r\n        lines = Object.values(allLines)\r\n          .filter((line) => streets.includes(line.streetId))\r\n          .map(({ id }) => id);\r\n      }\r\n    }\r\n\r\n    return {\r\n      params: Object.assign(new QueryParams(), {\r\n        date_from: getPartialDate(new Date(dateStart)) + ' 00:00:00',\r\n        date_to: getPartialDate(dateEnd ? new Date(dateEnd) : new Date()) + ' 23:59:59',\r\n        hours: hours ? `{${hours}}` : '{}',\r\n        lines: lines ? `{${lines}}` : '{}',\r\n        metric: metric,\r\n        aggFunc: aggFunc,\r\n        working_days: workingDays,\r\n      }),\r\n      lines: lines.map((lineId) => allLines[lineId]),\r\n    };\r\n  }\r\n  public queryParams = combineLatest([this.urlParams, this.lines, this.streets, this.neighborhoods]).pipe(\r\n    map(([x, lines, streets, neighborhoods]) => {\r\n      const left = {\r\n        ...this.getQueryParams(x.left.state, lines, neighborhoods),\r\n        streets: x.left.state.streets?.map((streetId) => streets[streetId]) || [],\r\n        greaterDate: x.left.greaterDate,\r\n      };\r\n      if (validateSync(left.params).length > 0) return null;\r\n      const right = {\r\n        ...this.getQueryParams(x.right.state, lines, neighborhoods),\r\n        streets: x.left.state.streets?.map((streetId) => streets[streetId]) || [],\r\n      };\r\n      return { left, right: validateSync(right.params).length === 0 ? right : left };\r\n    }),\r\n    shareReplay(1)\r\n  );\r\n\r\n  public leftData = this.queryParams.pipe(\r\n    filter(isValid),\r\n    pluck('left'),\r\n    map((x) => ({\r\n      map: this.getMapData(x.params),\r\n      line: this.getComparativo(x.params, x.streets, x.lines, x.greaterDate),\r\n      ...this.getEvolutivo(x.params),\r\n    })),\r\n    shareReplay(1)\r\n  );\r\n  public rightData = this.queryParams.pipe(\r\n    filter(isValid),\r\n    pluck('right'),\r\n    map((x) => ({ map: this.getMapData(x.params), bar: this.getEvolutivo(x.params).bar })),\r\n    shareReplay(1)\r\n  );\r\n\r\n  private getMapData(queryParams: QueryParams) {\r\n    const wkt = new WKT();\r\n    const { metric, ...params } = queryParams;\r\n    const lines = combineLatest([this.lines, this.jamsGQL.fetch(params)]).pipe(\r\n      map(([lines, v]) => {\r\n        const jams = v.data.get_jams_lines.map((line) => ({ ...line, line: lines[line.line_id].coordinates }));\r\n        return {\r\n          lines: jams.map((jam) => ({ color: jam.level || 1, line: jam.line })),\r\n          exportableData: jams.map((jam) => ({ ...jam, line: `\"${wkt.writeGeometry(new OlMLS([jam.line]))}\"` })),\r\n        };\r\n      })\r\n    );\r\n\r\n    return {\r\n      lines: lines.pipe(pluck('lines'), startWith(null)),\r\n      summary: this.summaryGQL.fetch(params).pipe(\r\n        map((res) => res.data.get_summary),\r\n        map((rows) => Object.fromEntries(rows.map(({ index, val }) => [index, val]))),\r\n        map((rows) => rows as { delay: number; length: number; speed: number })\r\n      ),\r\n      exportableData: lines.pipe(pluck('exportableData')),\r\n    };\r\n  }\r\n\r\n  private getComparativo(queryParams: QueryParams, streets: Street[], allLines: Line[], greaterDate: number) {\r\n    const firstYear = greaterDate - 1;\r\n    const { metric, ...params } = queryParams;\r\n    params['date_from'] = `${firstYear}/1/1 00:00:00`;\r\n    params['date_to'] = `${greaterDate}/12/31 23:59:59`;\r\n    return streets\r\n      .sort((a, b) => (a.name > b.name ? 1 : -1))\r\n      .map(({ id, name }) => {\r\n        const lines = `{${allLines.filter(({ streetId }) => id === streetId).map(({ id }) => id)}}`;\r\n        const res = this.comparativoGQL.fetch({ ...params, metric, lines }).pipe(\r\n          map((v) => v.data.get_comparativo),\r\n          map((data) => {\r\n            const extra = range(24).map((m) => ({\r\n              year: firstYear + Math.floor(m / 12),\r\n              month: (m % 12) + 1,\r\n              val: 0,\r\n            }));\r\n            const filled = [...data.map((v) => ({ ...v, val: Math.max(v.val, 0) })), ...extra]\r\n              .filter(\r\n                (val, idx, arr) => arr.findIndex((v) => val.year === v.year && val.month === v.month) === idx\r\n              )\r\n              .sort((a, b) => (a.year === b.year ? a.month - b.month : a.year - b.year));\r\n            return {\r\n              data: {\r\n                dataset: [\r\n                  {\r\n                    label: String(firstYear),\r\n                    data: filled.filter((r) => r.year === firstYear).map((v) => v.val),\r\n                  },\r\n                  {\r\n                    label: String(firstYear + 1),\r\n                    data: filled.filter((r) => r.year === firstYear + 1).map((v) => v.val),\r\n                  },\r\n                ],\r\n                labels: filled.filter((r) => r.year === firstYear).map((v) => ('0' + v.month).slice(-2)),\r\n                unit: metrics.filter(({ id }) => id === metric)[0].unit,\r\n              },\r\n              exportableData: filled.map((f) => ({ street: name, ...f })),\r\n            };\r\n          })\r\n        );\r\n\r\n        return {\r\n          name,\r\n          data: res.pipe(pluck('data')),\r\n          exportableData: res.pipe(pluck('exportableData')),\r\n        } as ComparativeData;\r\n      });\r\n  }\r\n\r\n  private getEvolutivo(queryParams: QueryParams) {\r\n    const sameDay = queryParams.date_from.slice(0, 10) === queryParams.date_to.slice(0, 10);\r\n    const realTime = sameDay && new Date(queryParams.date_from).toDateString() === new Date().toDateString();\r\n\r\n    const filling = sameDay\r\n      ? range(24).map((v) => ('0' + v).slice(-2))\r\n      : daysRange(queryParams.date_from, queryParams.date_to).map((d) => getPartialDate(d));\r\n    const { metric, ...params } = queryParams;\r\n    const obs = combineLatest([\r\n      this.evolutivoGQL.fetch({ ...params, metric }).pipe(map((v) => v.data.get_evolutivo)),\r\n      this.predictivoGQL.fetch({ ...params, metric }).pipe(map((v) => v.data.get_predictivo)),\r\n    ]).pipe(\r\n      map((datas) => datas.map((data) => data.map((v) => ({ val: Math.max(v.val, 0), label: v.index })))),\r\n      map((datas) =>\r\n        datas.map((data) => {\r\n          const fill = filling\r\n            .filter(\r\n              (label) => !data.some((v) => (sameDay ? Number(v.label) === Number(label) : v.label === label))\r\n            )\r\n            .map((hour) => ({ label: hour, val: 0 }));\r\n          return [...data, ...fill]\r\n            .sort((a, b) => (sameDay ? Number(a.label) - Number(b.label) : a.label > b.label ? 1 : -1))\r\n            .map((v) => (sameDay ? { ...v, label: ('0' + v.label).slice(-2) } : v));\r\n        })\r\n      ),\r\n      map(([data, predictiveData]) => {\r\n        const commonDataset = {\r\n          labels: data.map((a) => a.label),\r\n          unit: metrics.filter(({ id }) => id === metric)[0].unit,\r\n        };\r\n        const exportableData = commonDataset.labels.map((label) => {\r\n          const real = data.find((d) => d.label === label)?.val;\r\n          const predicho = predictiveData.find((d) => d.label === label)?.val;\r\n          return { label, real, predicho };\r\n        });\r\n        return {\r\n          evolutivo: {\r\n            exportableData: data,\r\n            data: { dataset: [{ data: data.map((v) => v.val) }], ...commonDataset },\r\n            noEvents: data.every((v) => v.val === 0),\r\n          },\r\n          predictivo: {\r\n            exportableData,\r\n            data: {\r\n              dataset: [\r\n                {\r\n                  data: data\r\n                    .filter(({ label }) => !realTime || (realTime && Number(label) <= new Date().getHours()))\r\n                    .map((v) => v.val),\r\n                  label: 'Real',\r\n                },\r\n                {\r\n                  data: predictiveData\r\n                    .filter(({ label }) => !realTime || (realTime && Number(label) <= new Date().getHours() + 1))\r\n                    .map(({ val }) => val),\r\n                  label: 'Predicho',\r\n                },\r\n              ],\r\n              ...commonDataset,\r\n            },\r\n            noEvents: data.every((v) => v.val === 0) && predictiveData.every((v) => v.val === 0),\r\n          },\r\n        };\r\n      })\r\n    );\r\n    const bar = obs.pipe(pluck('evolutivo'));\r\n    const line_with_map = obs.pipe(pluck('predictivo'));\r\n    return {\r\n      bar: {\r\n        data: bar.pipe(pluck('data')),\r\n        exportableData: bar.pipe(pluck('exportableData')),\r\n        noEvents: bar.pipe(pluck('noEvents')),\r\n      },\r\n      'line-with-map': {\r\n        data: line_with_map.pipe(pluck('data')),\r\n        exportableData: line_with_map.pipe(pluck('exportableData')),\r\n        noEvents: line_with_map.pipe(pluck('noEvents')),\r\n      },\r\n    };\r\n  }\r\n\r\n  constructor(\r\n    private userService: UserService,\r\n    private activatedRoute: ActivatedRoute,\r\n    public jamsGQL: JamsGQL,\r\n    public evolutivoGQL: EvolutivoGQL,\r\n    public comparativoGQL: ComparativoGQL,\r\n    public summaryGQL: SummaryGQL,\r\n    public predictivoGQL: PredictivoGQL,\r\n    private linesGQL: LinesGQL,\r\n    private streetsGQL: StreetsGQL,\r\n    private adminLevelsGQL: Admin_LevelsGQL\r\n  ) {\r\n    const localVersion = window.localStorage.getItem(this.indexedDbVersionItem);\r\n    const newVersion = !localVersion || Number(localVersion) !== this.indexedDbVersion;\r\n\r\n    if (newVersion) {\r\n      userService.logout();\r\n      from(indexedDb.clearLines()).subscribe(() => this.indexedDbLines.next([]));\r\n      from(indexedDb.clearStreets()).subscribe(() => this.indexedDbStreets.next([]));\r\n    } else {\r\n      indexedDb.getLines().subscribe((lines) => this.indexedDbLines.next(lines));\r\n      indexedDb.getStreets().subscribe((streets) => this.indexedDbStreets.next(streets));\r\n    }\r\n\r\n    this.newVersion$.next(newVersion);\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Inject, Injectable } from '@angular/core';\r\nimport { MatSnackBar, MatSnackBarRef, MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\r\n\r\ninterface DataType {\r\n  text: string;\r\n  action?: { text: string; url: string };\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DisplayLogService {\r\n  private seconds = 5;\r\n  constructor(private snackBar: MatSnackBar) {}\r\n\r\n  private openLog(color: string, data: DataType) {\r\n    return this.snackBar.openFromComponent(DisplayLogComponent, {\r\n      data,\r\n      duration: this.seconds * 1000,\r\n      panelClass: ['mat-toolbar', 'mat-' + color],\r\n    });\r\n  }\r\n\r\n  public openLogError(text: string, action?: { text: string; url: string }) {\r\n    return this.openLog('warn', { text, action });\r\n  }\r\n\r\n  public openLogWarning(text: string) {\r\n    return this.openLog('accent', { text });\r\n  }\r\n\r\n  public openLogSuccess(text: string) {\r\n    return this.openLog('primary', { text });\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'mauna-display-log',\r\n  template: `\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n      <span class=\"mat-body-1\" fxFlex=\"auto\"> {{ data.text }} </span>\r\n      <button\r\n        *ngIf=\"!!data.action\"\r\n        mat-stroked-button\r\n        style=\"margin-left: 1em;\"\r\n        (click)=\"dismissWithAction()\"\r\n        [routerLink]=\"data.action?.url\"\r\n      >\r\n        {{ data.action?.text }}\r\n      </button>\r\n      <button *ngIf=\"!data.action\" mat-icon-button (click)=\"closeAlert()\">\r\n        <mat-icon> close </mat-icon>\r\n      </button>\r\n    </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DisplayLogComponent {\r\n  constructor(\r\n    private snackBarRef: MatSnackBarRef<DisplayLogComponent>,\r\n    @Inject(MAT_SNACK_BAR_DATA)\r\n    public data: DataType\r\n  ) {}\r\n\r\n  public closeAlert() {\r\n    this.snackBarRef.dismiss();\r\n  }\r\n\r\n  public dismissWithAction() {\r\n    this.snackBarRef.dismissWithAction();\r\n  }\r\n}\r\n","import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  _int4: any;\n  geography: any;\n  geometry: any;\n  timestamp: any;\n  timestamptz: any;\n};\n\n/** Boolean expression to compare columns of type \"Boolean\". All fields are combined with logical 'AND'. */\nexport type Boolean_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Boolean']>;\n  _gt?: Maybe<Scalars['Boolean']>;\n  _gte?: Maybe<Scalars['Boolean']>;\n  _in?: Maybe<Array<Scalars['Boolean']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Boolean']>;\n  _lte?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<Scalars['Boolean']>;\n  _nin?: Maybe<Array<Scalars['Boolean']>>;\n};\n\n/** Boolean expression to compare columns of type \"Float\". All fields are combined with logical 'AND'. */\nexport type Float_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Float']>;\n  _gt?: Maybe<Scalars['Float']>;\n  _gte?: Maybe<Scalars['Float']>;\n  _in?: Maybe<Array<Scalars['Float']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Float']>;\n  _lte?: Maybe<Scalars['Float']>;\n  _neq?: Maybe<Scalars['Float']>;\n  _nin?: Maybe<Array<Scalars['Float']>>;\n};\n\n/** Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'. */\nexport type Int_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Int']>;\n  _gt?: Maybe<Scalars['Int']>;\n  _gte?: Maybe<Scalars['Int']>;\n  _in?: Maybe<Array<Scalars['Int']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Int']>;\n  _lte?: Maybe<Scalars['Int']>;\n  _neq?: Maybe<Scalars['Int']>;\n  _nin?: Maybe<Array<Scalars['Int']>>;\n};\n\n/** Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'. */\nexport type String_Comparison_Exp = {\n  _eq?: Maybe<Scalars['String']>;\n  _gt?: Maybe<Scalars['String']>;\n  _gte?: Maybe<Scalars['String']>;\n  /** does the column match the given case-insensitive pattern */\n  _ilike?: Maybe<Scalars['String']>;\n  _in?: Maybe<Array<Scalars['String']>>;\n  /** does the column match the given POSIX regular expression, case insensitive */\n  _iregex?: Maybe<Scalars['String']>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  /** does the column match the given pattern */\n  _like?: Maybe<Scalars['String']>;\n  _lt?: Maybe<Scalars['String']>;\n  _lte?: Maybe<Scalars['String']>;\n  _neq?: Maybe<Scalars['String']>;\n  /** does the column NOT match the given case-insensitive pattern */\n  _nilike?: Maybe<Scalars['String']>;\n  _nin?: Maybe<Array<Scalars['String']>>;\n  /** does the column NOT match the given POSIX regular expression, case insensitive */\n  _niregex?: Maybe<Scalars['String']>;\n  /** does the column NOT match the given pattern */\n  _nlike?: Maybe<Scalars['String']>;\n  /** does the column NOT match the given POSIX regular expression, case sensitive */\n  _nregex?: Maybe<Scalars['String']>;\n  /** does the column NOT match the given SQL regular expression */\n  _nsimilar?: Maybe<Scalars['String']>;\n  /** does the column match the given POSIX regular expression, case sensitive */\n  _regex?: Maybe<Scalars['String']>;\n  /** does the column match the given SQL regular expression */\n  _similar?: Maybe<Scalars['String']>;\n};\n\n/** Boolean expression to compare columns of type \"_int4\". All fields are combined with logical 'AND'. */\nexport type _Int4_Comparison_Exp = {\n  _eq?: Maybe<Scalars['_int4']>;\n  _gt?: Maybe<Scalars['_int4']>;\n  _gte?: Maybe<Scalars['_int4']>;\n  _in?: Maybe<Array<Scalars['_int4']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['_int4']>;\n  _lte?: Maybe<Scalars['_int4']>;\n  _neq?: Maybe<Scalars['_int4']>;\n  _nin?: Maybe<Array<Scalars['_int4']>>;\n};\n\n/** columns and relationships of \"admin_levels\" */\nexport type Admin_Levels = {\n  __typename?: 'admin_levels';\n  greater_admin_level_id: Scalars['Int'];\n  greater_admin_level_name: Scalars['String'];\n  last_update?: Maybe<Scalars['timestamptz']>;\n  lines_ids: Scalars['String'];\n  lower_admin_level_id: Scalars['Int'];\n  lower_admin_level_name: Scalars['String'];\n  shape: Scalars['geometry'];\n  streets_ids: Scalars['String'];\n};\n\n/** aggregated selection of \"admin_levels\" */\nexport type Admin_Levels_Aggregate = {\n  __typename?: 'admin_levels_aggregate';\n  aggregate?: Maybe<Admin_Levels_Aggregate_Fields>;\n  nodes: Array<Admin_Levels>;\n};\n\n/** aggregate fields of \"admin_levels\" */\nexport type Admin_Levels_Aggregate_Fields = {\n  __typename?: 'admin_levels_aggregate_fields';\n  avg?: Maybe<Admin_Levels_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Admin_Levels_Max_Fields>;\n  min?: Maybe<Admin_Levels_Min_Fields>;\n  stddev?: Maybe<Admin_Levels_Stddev_Fields>;\n  stddev_pop?: Maybe<Admin_Levels_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Admin_Levels_Stddev_Samp_Fields>;\n  sum?: Maybe<Admin_Levels_Sum_Fields>;\n  var_pop?: Maybe<Admin_Levels_Var_Pop_Fields>;\n  var_samp?: Maybe<Admin_Levels_Var_Samp_Fields>;\n  variance?: Maybe<Admin_Levels_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"admin_levels\" */\nexport type Admin_Levels_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Admin_Levels_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** aggregate avg on columns */\nexport type Admin_Levels_Avg_Fields = {\n  __typename?: 'admin_levels_avg_fields';\n  greater_admin_level_id?: Maybe<Scalars['Float']>;\n  lower_admin_level_id?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to filter rows from the table \"admin_levels\". All fields are combined with a logical 'AND'. */\nexport type Admin_Levels_Bool_Exp = {\n  _and?: Maybe<Array<Admin_Levels_Bool_Exp>>;\n  _not?: Maybe<Admin_Levels_Bool_Exp>;\n  _or?: Maybe<Array<Admin_Levels_Bool_Exp>>;\n  greater_admin_level_id?: Maybe<Int_Comparison_Exp>;\n  greater_admin_level_name?: Maybe<String_Comparison_Exp>;\n  last_update?: Maybe<Timestamptz_Comparison_Exp>;\n  lines_ids?: Maybe<String_Comparison_Exp>;\n  lower_admin_level_id?: Maybe<Int_Comparison_Exp>;\n  lower_admin_level_name?: Maybe<String_Comparison_Exp>;\n  shape?: Maybe<Geometry_Comparison_Exp>;\n  streets_ids?: Maybe<String_Comparison_Exp>;\n};\n\n/** input type for incrementing numeric columns in table \"admin_levels\" */\nexport type Admin_Levels_Inc_Input = {\n  greater_admin_level_id?: Maybe<Scalars['Int']>;\n  lower_admin_level_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"admin_levels\" */\nexport type Admin_Levels_Insert_Input = {\n  greater_admin_level_id?: Maybe<Scalars['Int']>;\n  greater_admin_level_name?: Maybe<Scalars['String']>;\n  last_update?: Maybe<Scalars['timestamptz']>;\n  lines_ids?: Maybe<Scalars['String']>;\n  lower_admin_level_id?: Maybe<Scalars['Int']>;\n  lower_admin_level_name?: Maybe<Scalars['String']>;\n  shape?: Maybe<Scalars['geometry']>;\n  streets_ids?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Admin_Levels_Max_Fields = {\n  __typename?: 'admin_levels_max_fields';\n  greater_admin_level_id?: Maybe<Scalars['Int']>;\n  greater_admin_level_name?: Maybe<Scalars['String']>;\n  last_update?: Maybe<Scalars['timestamptz']>;\n  lines_ids?: Maybe<Scalars['String']>;\n  lower_admin_level_id?: Maybe<Scalars['Int']>;\n  lower_admin_level_name?: Maybe<Scalars['String']>;\n  streets_ids?: Maybe<Scalars['String']>;\n};\n\n/** aggregate min on columns */\nexport type Admin_Levels_Min_Fields = {\n  __typename?: 'admin_levels_min_fields';\n  greater_admin_level_id?: Maybe<Scalars['Int']>;\n  greater_admin_level_name?: Maybe<Scalars['String']>;\n  last_update?: Maybe<Scalars['timestamptz']>;\n  lines_ids?: Maybe<Scalars['String']>;\n  lower_admin_level_id?: Maybe<Scalars['Int']>;\n  lower_admin_level_name?: Maybe<Scalars['String']>;\n  streets_ids?: Maybe<Scalars['String']>;\n};\n\n/** response of any mutation on the table \"admin_levels\" */\nexport type Admin_Levels_Mutation_Response = {\n  __typename?: 'admin_levels_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Admin_Levels>;\n};\n\n/** Ordering options when selecting data from \"admin_levels\". */\nexport type Admin_Levels_Order_By = {\n  greater_admin_level_id?: Maybe<Order_By>;\n  greater_admin_level_name?: Maybe<Order_By>;\n  last_update?: Maybe<Order_By>;\n  lines_ids?: Maybe<Order_By>;\n  lower_admin_level_id?: Maybe<Order_By>;\n  lower_admin_level_name?: Maybe<Order_By>;\n  shape?: Maybe<Order_By>;\n  streets_ids?: Maybe<Order_By>;\n};\n\n/** select columns of table \"admin_levels\" */\nexport enum Admin_Levels_Select_Column {\n  /** column name */\n  GreaterAdminLevelId = 'greater_admin_level_id',\n  /** column name */\n  GreaterAdminLevelName = 'greater_admin_level_name',\n  /** column name */\n  LastUpdate = 'last_update',\n  /** column name */\n  LinesIds = 'lines_ids',\n  /** column name */\n  LowerAdminLevelId = 'lower_admin_level_id',\n  /** column name */\n  LowerAdminLevelName = 'lower_admin_level_name',\n  /** column name */\n  Shape = 'shape',\n  /** column name */\n  StreetsIds = 'streets_ids'\n}\n\n/** input type for updating data in table \"admin_levels\" */\nexport type Admin_Levels_Set_Input = {\n  greater_admin_level_id?: Maybe<Scalars['Int']>;\n  greater_admin_level_name?: Maybe<Scalars['String']>;\n  last_update?: Maybe<Scalars['timestamptz']>;\n  lines_ids?: Maybe<Scalars['String']>;\n  lower_admin_level_id?: Maybe<Scalars['Int']>;\n  lower_admin_level_name?: Maybe<Scalars['String']>;\n  shape?: Maybe<Scalars['geometry']>;\n  streets_ids?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Admin_Levels_Stddev_Fields = {\n  __typename?: 'admin_levels_stddev_fields';\n  greater_admin_level_id?: Maybe<Scalars['Float']>;\n  lower_admin_level_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Admin_Levels_Stddev_Pop_Fields = {\n  __typename?: 'admin_levels_stddev_pop_fields';\n  greater_admin_level_id?: Maybe<Scalars['Float']>;\n  lower_admin_level_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Admin_Levels_Stddev_Samp_Fields = {\n  __typename?: 'admin_levels_stddev_samp_fields';\n  greater_admin_level_id?: Maybe<Scalars['Float']>;\n  lower_admin_level_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate sum on columns */\nexport type Admin_Levels_Sum_Fields = {\n  __typename?: 'admin_levels_sum_fields';\n  greater_admin_level_id?: Maybe<Scalars['Int']>;\n  lower_admin_level_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate var_pop on columns */\nexport type Admin_Levels_Var_Pop_Fields = {\n  __typename?: 'admin_levels_var_pop_fields';\n  greater_admin_level_id?: Maybe<Scalars['Float']>;\n  lower_admin_level_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_samp on columns */\nexport type Admin_Levels_Var_Samp_Fields = {\n  __typename?: 'admin_levels_var_samp_fields';\n  greater_admin_level_id?: Maybe<Scalars['Float']>;\n  lower_admin_level_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate variance on columns */\nexport type Admin_Levels_Variance_Fields = {\n  __typename?: 'admin_levels_variance_fields';\n  greater_admin_level_id?: Maybe<Scalars['Float']>;\n  lower_admin_level_id?: Maybe<Scalars['Float']>;\n};\n\n/** columns and relationships of \"comparativo_type\" */\nexport type Comparativo_Type = {\n  __typename?: 'comparativo_type';\n  month: Scalars['Int'];\n  val: Scalars['Float'];\n  year: Scalars['Int'];\n};\n\n/** aggregated selection of \"comparativo_type\" */\nexport type Comparativo_Type_Aggregate = {\n  __typename?: 'comparativo_type_aggregate';\n  aggregate?: Maybe<Comparativo_Type_Aggregate_Fields>;\n  nodes: Array<Comparativo_Type>;\n};\n\n/** aggregate fields of \"comparativo_type\" */\nexport type Comparativo_Type_Aggregate_Fields = {\n  __typename?: 'comparativo_type_aggregate_fields';\n  avg?: Maybe<Comparativo_Type_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Comparativo_Type_Max_Fields>;\n  min?: Maybe<Comparativo_Type_Min_Fields>;\n  stddev?: Maybe<Comparativo_Type_Stddev_Fields>;\n  stddev_pop?: Maybe<Comparativo_Type_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Comparativo_Type_Stddev_Samp_Fields>;\n  sum?: Maybe<Comparativo_Type_Sum_Fields>;\n  var_pop?: Maybe<Comparativo_Type_Var_Pop_Fields>;\n  var_samp?: Maybe<Comparativo_Type_Var_Samp_Fields>;\n  variance?: Maybe<Comparativo_Type_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"comparativo_type\" */\nexport type Comparativo_Type_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Comparativo_Type_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** aggregate avg on columns */\nexport type Comparativo_Type_Avg_Fields = {\n  __typename?: 'comparativo_type_avg_fields';\n  month?: Maybe<Scalars['Float']>;\n  val?: Maybe<Scalars['Float']>;\n  year?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to filter rows from the table \"comparativo_type\". All fields are combined with a logical 'AND'. */\nexport type Comparativo_Type_Bool_Exp = {\n  _and?: Maybe<Array<Comparativo_Type_Bool_Exp>>;\n  _not?: Maybe<Comparativo_Type_Bool_Exp>;\n  _or?: Maybe<Array<Comparativo_Type_Bool_Exp>>;\n  month?: Maybe<Int_Comparison_Exp>;\n  val?: Maybe<Float_Comparison_Exp>;\n  year?: Maybe<Int_Comparison_Exp>;\n};\n\n/** input type for incrementing numeric columns in table \"comparativo_type\" */\nexport type Comparativo_Type_Inc_Input = {\n  month?: Maybe<Scalars['Int']>;\n  val?: Maybe<Scalars['Float']>;\n  year?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"comparativo_type\" */\nexport type Comparativo_Type_Insert_Input = {\n  month?: Maybe<Scalars['Int']>;\n  val?: Maybe<Scalars['Float']>;\n  year?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Comparativo_Type_Max_Fields = {\n  __typename?: 'comparativo_type_max_fields';\n  month?: Maybe<Scalars['Int']>;\n  val?: Maybe<Scalars['Float']>;\n  year?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate min on columns */\nexport type Comparativo_Type_Min_Fields = {\n  __typename?: 'comparativo_type_min_fields';\n  month?: Maybe<Scalars['Int']>;\n  val?: Maybe<Scalars['Float']>;\n  year?: Maybe<Scalars['Int']>;\n};\n\n/** response of any mutation on the table \"comparativo_type\" */\nexport type Comparativo_Type_Mutation_Response = {\n  __typename?: 'comparativo_type_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Comparativo_Type>;\n};\n\n/** Ordering options when selecting data from \"comparativo_type\". */\nexport type Comparativo_Type_Order_By = {\n  month?: Maybe<Order_By>;\n  val?: Maybe<Order_By>;\n  year?: Maybe<Order_By>;\n};\n\n/** select columns of table \"comparativo_type\" */\nexport enum Comparativo_Type_Select_Column {\n  /** column name */\n  Month = 'month',\n  /** column name */\n  Val = 'val',\n  /** column name */\n  Year = 'year'\n}\n\n/** input type for updating data in table \"comparativo_type\" */\nexport type Comparativo_Type_Set_Input = {\n  month?: Maybe<Scalars['Int']>;\n  val?: Maybe<Scalars['Float']>;\n  year?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Comparativo_Type_Stddev_Fields = {\n  __typename?: 'comparativo_type_stddev_fields';\n  month?: Maybe<Scalars['Float']>;\n  val?: Maybe<Scalars['Float']>;\n  year?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Comparativo_Type_Stddev_Pop_Fields = {\n  __typename?: 'comparativo_type_stddev_pop_fields';\n  month?: Maybe<Scalars['Float']>;\n  val?: Maybe<Scalars['Float']>;\n  year?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Comparativo_Type_Stddev_Samp_Fields = {\n  __typename?: 'comparativo_type_stddev_samp_fields';\n  month?: Maybe<Scalars['Float']>;\n  val?: Maybe<Scalars['Float']>;\n  year?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate sum on columns */\nexport type Comparativo_Type_Sum_Fields = {\n  __typename?: 'comparativo_type_sum_fields';\n  month?: Maybe<Scalars['Int']>;\n  val?: Maybe<Scalars['Float']>;\n  year?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate var_pop on columns */\nexport type Comparativo_Type_Var_Pop_Fields = {\n  __typename?: 'comparativo_type_var_pop_fields';\n  month?: Maybe<Scalars['Float']>;\n  val?: Maybe<Scalars['Float']>;\n  year?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_samp on columns */\nexport type Comparativo_Type_Var_Samp_Fields = {\n  __typename?: 'comparativo_type_var_samp_fields';\n  month?: Maybe<Scalars['Float']>;\n  val?: Maybe<Scalars['Float']>;\n  year?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate variance on columns */\nexport type Comparativo_Type_Variance_Fields = {\n  __typename?: 'comparativo_type_variance_fields';\n  month?: Maybe<Scalars['Float']>;\n  val?: Maybe<Scalars['Float']>;\n  year?: Maybe<Scalars['Float']>;\n};\n\n/** columns and relationships of \"evolutivo_type\" */\nexport type Evolutivo_Type = {\n  __typename?: 'evolutivo_type';\n  index: Scalars['String'];\n  val: Scalars['Float'];\n};\n\n/** aggregated selection of \"evolutivo_type\" */\nexport type Evolutivo_Type_Aggregate = {\n  __typename?: 'evolutivo_type_aggregate';\n  aggregate?: Maybe<Evolutivo_Type_Aggregate_Fields>;\n  nodes: Array<Evolutivo_Type>;\n};\n\n/** aggregate fields of \"evolutivo_type\" */\nexport type Evolutivo_Type_Aggregate_Fields = {\n  __typename?: 'evolutivo_type_aggregate_fields';\n  avg?: Maybe<Evolutivo_Type_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Evolutivo_Type_Max_Fields>;\n  min?: Maybe<Evolutivo_Type_Min_Fields>;\n  stddev?: Maybe<Evolutivo_Type_Stddev_Fields>;\n  stddev_pop?: Maybe<Evolutivo_Type_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Evolutivo_Type_Stddev_Samp_Fields>;\n  sum?: Maybe<Evolutivo_Type_Sum_Fields>;\n  var_pop?: Maybe<Evolutivo_Type_Var_Pop_Fields>;\n  var_samp?: Maybe<Evolutivo_Type_Var_Samp_Fields>;\n  variance?: Maybe<Evolutivo_Type_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"evolutivo_type\" */\nexport type Evolutivo_Type_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Evolutivo_Type_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** aggregate avg on columns */\nexport type Evolutivo_Type_Avg_Fields = {\n  __typename?: 'evolutivo_type_avg_fields';\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to filter rows from the table \"evolutivo_type\". All fields are combined with a logical 'AND'. */\nexport type Evolutivo_Type_Bool_Exp = {\n  _and?: Maybe<Array<Evolutivo_Type_Bool_Exp>>;\n  _not?: Maybe<Evolutivo_Type_Bool_Exp>;\n  _or?: Maybe<Array<Evolutivo_Type_Bool_Exp>>;\n  index?: Maybe<String_Comparison_Exp>;\n  val?: Maybe<Float_Comparison_Exp>;\n};\n\n/** input type for incrementing numeric columns in table \"evolutivo_type\" */\nexport type Evolutivo_Type_Inc_Input = {\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** input type for inserting data into table \"evolutivo_type\" */\nexport type Evolutivo_Type_Insert_Input = {\n  index?: Maybe<Scalars['String']>;\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate max on columns */\nexport type Evolutivo_Type_Max_Fields = {\n  __typename?: 'evolutivo_type_max_fields';\n  index?: Maybe<Scalars['String']>;\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate min on columns */\nexport type Evolutivo_Type_Min_Fields = {\n  __typename?: 'evolutivo_type_min_fields';\n  index?: Maybe<Scalars['String']>;\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** response of any mutation on the table \"evolutivo_type\" */\nexport type Evolutivo_Type_Mutation_Response = {\n  __typename?: 'evolutivo_type_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Evolutivo_Type>;\n};\n\n/** Ordering options when selecting data from \"evolutivo_type\". */\nexport type Evolutivo_Type_Order_By = {\n  index?: Maybe<Order_By>;\n  val?: Maybe<Order_By>;\n};\n\n/** select columns of table \"evolutivo_type\" */\nexport enum Evolutivo_Type_Select_Column {\n  /** column name */\n  Index = 'index',\n  /** column name */\n  Val = 'val'\n}\n\n/** input type for updating data in table \"evolutivo_type\" */\nexport type Evolutivo_Type_Set_Input = {\n  index?: Maybe<Scalars['String']>;\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev on columns */\nexport type Evolutivo_Type_Stddev_Fields = {\n  __typename?: 'evolutivo_type_stddev_fields';\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Evolutivo_Type_Stddev_Pop_Fields = {\n  __typename?: 'evolutivo_type_stddev_pop_fields';\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Evolutivo_Type_Stddev_Samp_Fields = {\n  __typename?: 'evolutivo_type_stddev_samp_fields';\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate sum on columns */\nexport type Evolutivo_Type_Sum_Fields = {\n  __typename?: 'evolutivo_type_sum_fields';\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_pop on columns */\nexport type Evolutivo_Type_Var_Pop_Fields = {\n  __typename?: 'evolutivo_type_var_pop_fields';\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_samp on columns */\nexport type Evolutivo_Type_Var_Samp_Fields = {\n  __typename?: 'evolutivo_type_var_samp_fields';\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate variance on columns */\nexport type Evolutivo_Type_Variance_Fields = {\n  __typename?: 'evolutivo_type_variance_fields';\n  val?: Maybe<Scalars['Float']>;\n};\n\nexport type Geography_Cast_Exp = {\n  geometry?: Maybe<Geometry_Comparison_Exp>;\n};\n\n/** Boolean expression to compare columns of type \"geography\". All fields are combined with logical 'AND'. */\nexport type Geography_Comparison_Exp = {\n  _cast?: Maybe<Geography_Cast_Exp>;\n  _eq?: Maybe<Scalars['geography']>;\n  _gt?: Maybe<Scalars['geography']>;\n  _gte?: Maybe<Scalars['geography']>;\n  _in?: Maybe<Array<Scalars['geography']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['geography']>;\n  _lte?: Maybe<Scalars['geography']>;\n  _neq?: Maybe<Scalars['geography']>;\n  _nin?: Maybe<Array<Scalars['geography']>>;\n  /** is the column within a given distance from the given geography value */\n  _st_d_within?: Maybe<St_D_Within_Geography_Input>;\n  /** does the column spatially intersect the given geography value */\n  _st_intersects?: Maybe<Scalars['geography']>;\n};\n\nexport type Geometry_Cast_Exp = {\n  geography?: Maybe<Geography_Comparison_Exp>;\n};\n\n/** Boolean expression to compare columns of type \"geometry\". All fields are combined with logical 'AND'. */\nexport type Geometry_Comparison_Exp = {\n  _cast?: Maybe<Geometry_Cast_Exp>;\n  _eq?: Maybe<Scalars['geometry']>;\n  _gt?: Maybe<Scalars['geometry']>;\n  _gte?: Maybe<Scalars['geometry']>;\n  _in?: Maybe<Array<Scalars['geometry']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['geometry']>;\n  _lte?: Maybe<Scalars['geometry']>;\n  _neq?: Maybe<Scalars['geometry']>;\n  _nin?: Maybe<Array<Scalars['geometry']>>;\n  /** is the column within a given 3D distance from the given geometry value */\n  _st_3d_d_within?: Maybe<St_D_Within_Input>;\n  /** does the column spatially intersect the given geometry value in 3D */\n  _st_3d_intersects?: Maybe<Scalars['geometry']>;\n  /** does the column contain the given geometry value */\n  _st_contains?: Maybe<Scalars['geometry']>;\n  /** does the column cross the given geometry value */\n  _st_crosses?: Maybe<Scalars['geometry']>;\n  /** is the column within a given distance from the given geometry value */\n  _st_d_within?: Maybe<St_D_Within_Input>;\n  /** is the column equal to given geometry value (directionality is ignored) */\n  _st_equals?: Maybe<Scalars['geometry']>;\n  /** does the column spatially intersect the given geometry value */\n  _st_intersects?: Maybe<Scalars['geometry']>;\n  /** does the column 'spatially overlap' (intersect but not completely contain) the given geometry value */\n  _st_overlaps?: Maybe<Scalars['geometry']>;\n  /** does the column have atleast one point in common with the given geometry value */\n  _st_touches?: Maybe<Scalars['geometry']>;\n  /** is the column contained in the given geometry value */\n  _st_within?: Maybe<Scalars['geometry']>;\n};\n\nexport type Get_Comparativo_Args = {\n  agg_func?: Maybe<Scalars['String']>;\n  date_from?: Maybe<Scalars['timestamp']>;\n  date_to?: Maybe<Scalars['timestamp']>;\n  hours?: Maybe<Scalars['_int4']>;\n  lines?: Maybe<Scalars['_int4']>;\n  metric?: Maybe<Scalars['String']>;\n  working_days?: Maybe<Scalars['_int4']>;\n};\n\nexport type Get_Evolutivo_Args = {\n  agg_func?: Maybe<Scalars['String']>;\n  date_from?: Maybe<Scalars['timestamp']>;\n  date_to?: Maybe<Scalars['timestamp']>;\n  hours?: Maybe<Scalars['_int4']>;\n  lines?: Maybe<Scalars['_int4']>;\n  metric?: Maybe<Scalars['String']>;\n  working_days?: Maybe<Scalars['_int4']>;\n};\n\nexport type Get_Jams_Lines_Args = {\n  agg_func?: Maybe<Scalars['String']>;\n  date_from?: Maybe<Scalars['timestamp']>;\n  date_to?: Maybe<Scalars['timestamp']>;\n  hours?: Maybe<Scalars['_int4']>;\n  lines?: Maybe<Scalars['_int4']>;\n  working_days?: Maybe<Scalars['_int4']>;\n};\n\nexport type Get_Lines_Args = {\n  polygon?: Maybe<Scalars['String']>;\n};\n\nexport type Get_Predictivo_Args = {\n  agg_func?: Maybe<Scalars['String']>;\n  date_from?: Maybe<Scalars['timestamp']>;\n  date_to?: Maybe<Scalars['timestamp']>;\n  hours?: Maybe<Scalars['_int4']>;\n  lines?: Maybe<Scalars['_int4']>;\n  metric?: Maybe<Scalars['String']>;\n  working_days?: Maybe<Scalars['_int4']>;\n};\n\nexport type Get_Summary_Args = {\n  agg_func?: Maybe<Scalars['String']>;\n  date_from?: Maybe<Scalars['timestamp']>;\n  date_to?: Maybe<Scalars['timestamp']>;\n  hours?: Maybe<Scalars['_int4']>;\n  lines?: Maybe<Scalars['_int4']>;\n  working_days?: Maybe<Scalars['_int4']>;\n};\n\n/** columns and relationships of \"histogram_type\" */\nexport type Histogram_Type = {\n  __typename?: 'histogram_type';\n  duration: Scalars['Float'];\n  index?: Maybe<Scalars['timestamp']>;\n  keep?: Maybe<Scalars['Boolean']>;\n  val: Scalars['Float'];\n};\n\n/** aggregated selection of \"histogram_type\" */\nexport type Histogram_Type_Aggregate = {\n  __typename?: 'histogram_type_aggregate';\n  aggregate?: Maybe<Histogram_Type_Aggregate_Fields>;\n  nodes: Array<Histogram_Type>;\n};\n\n/** aggregate fields of \"histogram_type\" */\nexport type Histogram_Type_Aggregate_Fields = {\n  __typename?: 'histogram_type_aggregate_fields';\n  avg?: Maybe<Histogram_Type_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Histogram_Type_Max_Fields>;\n  min?: Maybe<Histogram_Type_Min_Fields>;\n  stddev?: Maybe<Histogram_Type_Stddev_Fields>;\n  stddev_pop?: Maybe<Histogram_Type_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Histogram_Type_Stddev_Samp_Fields>;\n  sum?: Maybe<Histogram_Type_Sum_Fields>;\n  var_pop?: Maybe<Histogram_Type_Var_Pop_Fields>;\n  var_samp?: Maybe<Histogram_Type_Var_Samp_Fields>;\n  variance?: Maybe<Histogram_Type_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"histogram_type\" */\nexport type Histogram_Type_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Histogram_Type_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** aggregate avg on columns */\nexport type Histogram_Type_Avg_Fields = {\n  __typename?: 'histogram_type_avg_fields';\n  duration?: Maybe<Scalars['Float']>;\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to filter rows from the table \"histogram_type\". All fields are combined with a logical 'AND'. */\nexport type Histogram_Type_Bool_Exp = {\n  _and?: Maybe<Array<Histogram_Type_Bool_Exp>>;\n  _not?: Maybe<Histogram_Type_Bool_Exp>;\n  _or?: Maybe<Array<Histogram_Type_Bool_Exp>>;\n  duration?: Maybe<Float_Comparison_Exp>;\n  index?: Maybe<Timestamp_Comparison_Exp>;\n  keep?: Maybe<Boolean_Comparison_Exp>;\n  val?: Maybe<Float_Comparison_Exp>;\n};\n\n/** input type for incrementing numeric columns in table \"histogram_type\" */\nexport type Histogram_Type_Inc_Input = {\n  duration?: Maybe<Scalars['Float']>;\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** input type for inserting data into table \"histogram_type\" */\nexport type Histogram_Type_Insert_Input = {\n  duration?: Maybe<Scalars['Float']>;\n  index?: Maybe<Scalars['timestamp']>;\n  keep?: Maybe<Scalars['Boolean']>;\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate max on columns */\nexport type Histogram_Type_Max_Fields = {\n  __typename?: 'histogram_type_max_fields';\n  duration?: Maybe<Scalars['Float']>;\n  index?: Maybe<Scalars['timestamp']>;\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate min on columns */\nexport type Histogram_Type_Min_Fields = {\n  __typename?: 'histogram_type_min_fields';\n  duration?: Maybe<Scalars['Float']>;\n  index?: Maybe<Scalars['timestamp']>;\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** response of any mutation on the table \"histogram_type\" */\nexport type Histogram_Type_Mutation_Response = {\n  __typename?: 'histogram_type_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Histogram_Type>;\n};\n\n/** Ordering options when selecting data from \"histogram_type\". */\nexport type Histogram_Type_Order_By = {\n  duration?: Maybe<Order_By>;\n  index?: Maybe<Order_By>;\n  keep?: Maybe<Order_By>;\n  val?: Maybe<Order_By>;\n};\n\n/** select columns of table \"histogram_type\" */\nexport enum Histogram_Type_Select_Column {\n  /** column name */\n  Duration = 'duration',\n  /** column name */\n  Index = 'index',\n  /** column name */\n  Keep = 'keep',\n  /** column name */\n  Val = 'val'\n}\n\n/** input type for updating data in table \"histogram_type\" */\nexport type Histogram_Type_Set_Input = {\n  duration?: Maybe<Scalars['Float']>;\n  index?: Maybe<Scalars['timestamp']>;\n  keep?: Maybe<Scalars['Boolean']>;\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev on columns */\nexport type Histogram_Type_Stddev_Fields = {\n  __typename?: 'histogram_type_stddev_fields';\n  duration?: Maybe<Scalars['Float']>;\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Histogram_Type_Stddev_Pop_Fields = {\n  __typename?: 'histogram_type_stddev_pop_fields';\n  duration?: Maybe<Scalars['Float']>;\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Histogram_Type_Stddev_Samp_Fields = {\n  __typename?: 'histogram_type_stddev_samp_fields';\n  duration?: Maybe<Scalars['Float']>;\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate sum on columns */\nexport type Histogram_Type_Sum_Fields = {\n  __typename?: 'histogram_type_sum_fields';\n  duration?: Maybe<Scalars['Float']>;\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_pop on columns */\nexport type Histogram_Type_Var_Pop_Fields = {\n  __typename?: 'histogram_type_var_pop_fields';\n  duration?: Maybe<Scalars['Float']>;\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_samp on columns */\nexport type Histogram_Type_Var_Samp_Fields = {\n  __typename?: 'histogram_type_var_samp_fields';\n  duration?: Maybe<Scalars['Float']>;\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate variance on columns */\nexport type Histogram_Type_Variance_Fields = {\n  __typename?: 'histogram_type_variance_fields';\n  duration?: Maybe<Scalars['Float']>;\n  val?: Maybe<Scalars['Float']>;\n};\n\n/** columns and relationships of \"jam_lines\" */\nexport type Jam_Lines = {\n  __typename?: 'jam_lines';\n  last_update?: Maybe<Scalars['timestamptz']>;\n  line?: Maybe<Scalars['geometry']>;\n  line_id: Scalars['Int'];\n  street_id: Scalars['Int'];\n};\n\n/** aggregated selection of \"jam_lines\" */\nexport type Jam_Lines_Aggregate = {\n  __typename?: 'jam_lines_aggregate';\n  aggregate?: Maybe<Jam_Lines_Aggregate_Fields>;\n  nodes: Array<Jam_Lines>;\n};\n\n/** aggregate fields of \"jam_lines\" */\nexport type Jam_Lines_Aggregate_Fields = {\n  __typename?: 'jam_lines_aggregate_fields';\n  avg?: Maybe<Jam_Lines_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Jam_Lines_Max_Fields>;\n  min?: Maybe<Jam_Lines_Min_Fields>;\n  stddev?: Maybe<Jam_Lines_Stddev_Fields>;\n  stddev_pop?: Maybe<Jam_Lines_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Jam_Lines_Stddev_Samp_Fields>;\n  sum?: Maybe<Jam_Lines_Sum_Fields>;\n  var_pop?: Maybe<Jam_Lines_Var_Pop_Fields>;\n  var_samp?: Maybe<Jam_Lines_Var_Samp_Fields>;\n  variance?: Maybe<Jam_Lines_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"jam_lines\" */\nexport type Jam_Lines_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Jam_Lines_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** aggregate avg on columns */\nexport type Jam_Lines_Avg_Fields = {\n  __typename?: 'jam_lines_avg_fields';\n  line_id?: Maybe<Scalars['Float']>;\n  street_id?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to filter rows from the table \"jam_lines\". All fields are combined with a logical 'AND'. */\nexport type Jam_Lines_Bool_Exp = {\n  _and?: Maybe<Array<Jam_Lines_Bool_Exp>>;\n  _not?: Maybe<Jam_Lines_Bool_Exp>;\n  _or?: Maybe<Array<Jam_Lines_Bool_Exp>>;\n  last_update?: Maybe<Timestamptz_Comparison_Exp>;\n  line?: Maybe<Geometry_Comparison_Exp>;\n  line_id?: Maybe<Int_Comparison_Exp>;\n  street_id?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"jam_lines\" */\nexport enum Jam_Lines_Constraint {\n  /** unique or primary key constraint */\n  JamLinesLineKey = 'jam_lines_line_key',\n  /** unique or primary key constraint */\n  JamLinesPkey = 'jam_lines_pkey'\n}\n\n/** input type for incrementing numeric columns in table \"jam_lines\" */\nexport type Jam_Lines_Inc_Input = {\n  line_id?: Maybe<Scalars['Int']>;\n  street_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"jam_lines\" */\nexport type Jam_Lines_Insert_Input = {\n  last_update?: Maybe<Scalars['timestamptz']>;\n  line?: Maybe<Scalars['geometry']>;\n  line_id?: Maybe<Scalars['Int']>;\n  street_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Jam_Lines_Max_Fields = {\n  __typename?: 'jam_lines_max_fields';\n  last_update?: Maybe<Scalars['timestamptz']>;\n  line_id?: Maybe<Scalars['Int']>;\n  street_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate min on columns */\nexport type Jam_Lines_Min_Fields = {\n  __typename?: 'jam_lines_min_fields';\n  last_update?: Maybe<Scalars['timestamptz']>;\n  line_id?: Maybe<Scalars['Int']>;\n  street_id?: Maybe<Scalars['Int']>;\n};\n\n/** response of any mutation on the table \"jam_lines\" */\nexport type Jam_Lines_Mutation_Response = {\n  __typename?: 'jam_lines_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Jam_Lines>;\n};\n\n/** on conflict condition type for table \"jam_lines\" */\nexport type Jam_Lines_On_Conflict = {\n  constraint: Jam_Lines_Constraint;\n  update_columns?: Array<Jam_Lines_Update_Column>;\n  where?: Maybe<Jam_Lines_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"jam_lines\". */\nexport type Jam_Lines_Order_By = {\n  last_update?: Maybe<Order_By>;\n  line?: Maybe<Order_By>;\n  line_id?: Maybe<Order_By>;\n  street_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: jam_lines */\nexport type Jam_Lines_Pk_Columns_Input = {\n  line_id: Scalars['Int'];\n};\n\n/** select columns of table \"jam_lines\" */\nexport enum Jam_Lines_Select_Column {\n  /** column name */\n  LastUpdate = 'last_update',\n  /** column name */\n  Line = 'line',\n  /** column name */\n  LineId = 'line_id',\n  /** column name */\n  StreetId = 'street_id'\n}\n\n/** input type for updating data in table \"jam_lines\" */\nexport type Jam_Lines_Set_Input = {\n  last_update?: Maybe<Scalars['timestamptz']>;\n  line?: Maybe<Scalars['geometry']>;\n  line_id?: Maybe<Scalars['Int']>;\n  street_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Jam_Lines_Stddev_Fields = {\n  __typename?: 'jam_lines_stddev_fields';\n  line_id?: Maybe<Scalars['Float']>;\n  street_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Jam_Lines_Stddev_Pop_Fields = {\n  __typename?: 'jam_lines_stddev_pop_fields';\n  line_id?: Maybe<Scalars['Float']>;\n  street_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Jam_Lines_Stddev_Samp_Fields = {\n  __typename?: 'jam_lines_stddev_samp_fields';\n  line_id?: Maybe<Scalars['Float']>;\n  street_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate sum on columns */\nexport type Jam_Lines_Sum_Fields = {\n  __typename?: 'jam_lines_sum_fields';\n  line_id?: Maybe<Scalars['Int']>;\n  street_id?: Maybe<Scalars['Int']>;\n};\n\n/** update columns of table \"jam_lines\" */\nexport enum Jam_Lines_Update_Column {\n  /** column name */\n  LastUpdate = 'last_update',\n  /** column name */\n  Line = 'line',\n  /** column name */\n  LineId = 'line_id',\n  /** column name */\n  StreetId = 'street_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Jam_Lines_Var_Pop_Fields = {\n  __typename?: 'jam_lines_var_pop_fields';\n  line_id?: Maybe<Scalars['Float']>;\n  street_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_samp on columns */\nexport type Jam_Lines_Var_Samp_Fields = {\n  __typename?: 'jam_lines_var_samp_fields';\n  line_id?: Maybe<Scalars['Float']>;\n  street_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate variance on columns */\nexport type Jam_Lines_Variance_Fields = {\n  __typename?: 'jam_lines_variance_fields';\n  line_id?: Maybe<Scalars['Float']>;\n  street_id?: Maybe<Scalars['Float']>;\n};\n\n/** columns and relationships of \"jams\" */\nexport type Jams = {\n  __typename?: 'jams';\n  delay: Scalars['Float'];\n  end_timestamp: Scalars['timestamp'];\n  hour: Scalars['_int4'];\n  is_working_day: Scalars['Int'];\n  length: Scalars['Float'];\n  level: Scalars['Int'];\n  line_id: Scalars['Int'];\n  speed: Scalars['Float'];\n  start_timestamp: Scalars['timestamp'];\n  uuid: Scalars['Int'];\n};\n\n/** columns and relationships of \"jams_agg_line\" */\nexport type Jams_Agg_Line = {\n  __typename?: 'jams_agg_line';\n  level: Scalars['Int'];\n  line_id: Scalars['Int'];\n};\n\n/** aggregated selection of \"jams_agg_line\" */\nexport type Jams_Agg_Line_Aggregate = {\n  __typename?: 'jams_agg_line_aggregate';\n  aggregate?: Maybe<Jams_Agg_Line_Aggregate_Fields>;\n  nodes: Array<Jams_Agg_Line>;\n};\n\n/** aggregate fields of \"jams_agg_line\" */\nexport type Jams_Agg_Line_Aggregate_Fields = {\n  __typename?: 'jams_agg_line_aggregate_fields';\n  avg?: Maybe<Jams_Agg_Line_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Jams_Agg_Line_Max_Fields>;\n  min?: Maybe<Jams_Agg_Line_Min_Fields>;\n  stddev?: Maybe<Jams_Agg_Line_Stddev_Fields>;\n  stddev_pop?: Maybe<Jams_Agg_Line_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Jams_Agg_Line_Stddev_Samp_Fields>;\n  sum?: Maybe<Jams_Agg_Line_Sum_Fields>;\n  var_pop?: Maybe<Jams_Agg_Line_Var_Pop_Fields>;\n  var_samp?: Maybe<Jams_Agg_Line_Var_Samp_Fields>;\n  variance?: Maybe<Jams_Agg_Line_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"jams_agg_line\" */\nexport type Jams_Agg_Line_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Jams_Agg_Line_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** aggregate avg on columns */\nexport type Jams_Agg_Line_Avg_Fields = {\n  __typename?: 'jams_agg_line_avg_fields';\n  level?: Maybe<Scalars['Float']>;\n  line_id?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to filter rows from the table \"jams_agg_line\". All fields are combined with a logical 'AND'. */\nexport type Jams_Agg_Line_Bool_Exp = {\n  _and?: Maybe<Array<Jams_Agg_Line_Bool_Exp>>;\n  _not?: Maybe<Jams_Agg_Line_Bool_Exp>;\n  _or?: Maybe<Array<Jams_Agg_Line_Bool_Exp>>;\n  level?: Maybe<Int_Comparison_Exp>;\n  line_id?: Maybe<Int_Comparison_Exp>;\n};\n\n/** input type for incrementing numeric columns in table \"jams_agg_line\" */\nexport type Jams_Agg_Line_Inc_Input = {\n  level?: Maybe<Scalars['Int']>;\n  line_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"jams_agg_line\" */\nexport type Jams_Agg_Line_Insert_Input = {\n  level?: Maybe<Scalars['Int']>;\n  line_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Jams_Agg_Line_Max_Fields = {\n  __typename?: 'jams_agg_line_max_fields';\n  level?: Maybe<Scalars['Int']>;\n  line_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate min on columns */\nexport type Jams_Agg_Line_Min_Fields = {\n  __typename?: 'jams_agg_line_min_fields';\n  level?: Maybe<Scalars['Int']>;\n  line_id?: Maybe<Scalars['Int']>;\n};\n\n/** response of any mutation on the table \"jams_agg_line\" */\nexport type Jams_Agg_Line_Mutation_Response = {\n  __typename?: 'jams_agg_line_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Jams_Agg_Line>;\n};\n\n/** Ordering options when selecting data from \"jams_agg_line\". */\nexport type Jams_Agg_Line_Order_By = {\n  level?: Maybe<Order_By>;\n  line_id?: Maybe<Order_By>;\n};\n\n/** select columns of table \"jams_agg_line\" */\nexport enum Jams_Agg_Line_Select_Column {\n  /** column name */\n  Level = 'level',\n  /** column name */\n  LineId = 'line_id'\n}\n\n/** input type for updating data in table \"jams_agg_line\" */\nexport type Jams_Agg_Line_Set_Input = {\n  level?: Maybe<Scalars['Int']>;\n  line_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Jams_Agg_Line_Stddev_Fields = {\n  __typename?: 'jams_agg_line_stddev_fields';\n  level?: Maybe<Scalars['Float']>;\n  line_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Jams_Agg_Line_Stddev_Pop_Fields = {\n  __typename?: 'jams_agg_line_stddev_pop_fields';\n  level?: Maybe<Scalars['Float']>;\n  line_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Jams_Agg_Line_Stddev_Samp_Fields = {\n  __typename?: 'jams_agg_line_stddev_samp_fields';\n  level?: Maybe<Scalars['Float']>;\n  line_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate sum on columns */\nexport type Jams_Agg_Line_Sum_Fields = {\n  __typename?: 'jams_agg_line_sum_fields';\n  level?: Maybe<Scalars['Int']>;\n  line_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate var_pop on columns */\nexport type Jams_Agg_Line_Var_Pop_Fields = {\n  __typename?: 'jams_agg_line_var_pop_fields';\n  level?: Maybe<Scalars['Float']>;\n  line_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_samp on columns */\nexport type Jams_Agg_Line_Var_Samp_Fields = {\n  __typename?: 'jams_agg_line_var_samp_fields';\n  level?: Maybe<Scalars['Float']>;\n  line_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate variance on columns */\nexport type Jams_Agg_Line_Variance_Fields = {\n  __typename?: 'jams_agg_line_variance_fields';\n  level?: Maybe<Scalars['Float']>;\n  line_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregated selection of \"jams\" */\nexport type Jams_Aggregate = {\n  __typename?: 'jams_aggregate';\n  aggregate?: Maybe<Jams_Aggregate_Fields>;\n  nodes: Array<Jams>;\n};\n\n/** aggregate fields of \"jams\" */\nexport type Jams_Aggregate_Fields = {\n  __typename?: 'jams_aggregate_fields';\n  avg?: Maybe<Jams_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Jams_Max_Fields>;\n  min?: Maybe<Jams_Min_Fields>;\n  stddev?: Maybe<Jams_Stddev_Fields>;\n  stddev_pop?: Maybe<Jams_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Jams_Stddev_Samp_Fields>;\n  sum?: Maybe<Jams_Sum_Fields>;\n  var_pop?: Maybe<Jams_Var_Pop_Fields>;\n  var_samp?: Maybe<Jams_Var_Samp_Fields>;\n  variance?: Maybe<Jams_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"jams\" */\nexport type Jams_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Jams_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** aggregate avg on columns */\nexport type Jams_Avg_Fields = {\n  __typename?: 'jams_avg_fields';\n  delay?: Maybe<Scalars['Float']>;\n  is_working_day?: Maybe<Scalars['Float']>;\n  length?: Maybe<Scalars['Float']>;\n  level?: Maybe<Scalars['Float']>;\n  line_id?: Maybe<Scalars['Float']>;\n  speed?: Maybe<Scalars['Float']>;\n  uuid?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to filter rows from the table \"jams\". All fields are combined with a logical 'AND'. */\nexport type Jams_Bool_Exp = {\n  _and?: Maybe<Array<Jams_Bool_Exp>>;\n  _not?: Maybe<Jams_Bool_Exp>;\n  _or?: Maybe<Array<Jams_Bool_Exp>>;\n  delay?: Maybe<Float_Comparison_Exp>;\n  end_timestamp?: Maybe<Timestamp_Comparison_Exp>;\n  hour?: Maybe<_Int4_Comparison_Exp>;\n  is_working_day?: Maybe<Int_Comparison_Exp>;\n  length?: Maybe<Float_Comparison_Exp>;\n  level?: Maybe<Int_Comparison_Exp>;\n  line_id?: Maybe<Int_Comparison_Exp>;\n  speed?: Maybe<Float_Comparison_Exp>;\n  start_timestamp?: Maybe<Timestamp_Comparison_Exp>;\n  uuid?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"jams\" */\nexport enum Jams_Constraint {\n  /** unique or primary key constraint */\n  JamsPkey = 'jams_pkey'\n}\n\n/** input type for incrementing numeric columns in table \"jams\" */\nexport type Jams_Inc_Input = {\n  delay?: Maybe<Scalars['Float']>;\n  is_working_day?: Maybe<Scalars['Int']>;\n  length?: Maybe<Scalars['Float']>;\n  level?: Maybe<Scalars['Int']>;\n  line_id?: Maybe<Scalars['Int']>;\n  speed?: Maybe<Scalars['Float']>;\n  uuid?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"jams\" */\nexport type Jams_Insert_Input = {\n  delay?: Maybe<Scalars['Float']>;\n  end_timestamp?: Maybe<Scalars['timestamp']>;\n  hour?: Maybe<Scalars['_int4']>;\n  is_working_day?: Maybe<Scalars['Int']>;\n  length?: Maybe<Scalars['Float']>;\n  level?: Maybe<Scalars['Int']>;\n  line_id?: Maybe<Scalars['Int']>;\n  speed?: Maybe<Scalars['Float']>;\n  start_timestamp?: Maybe<Scalars['timestamp']>;\n  uuid?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Jams_Max_Fields = {\n  __typename?: 'jams_max_fields';\n  delay?: Maybe<Scalars['Float']>;\n  end_timestamp?: Maybe<Scalars['timestamp']>;\n  is_working_day?: Maybe<Scalars['Int']>;\n  length?: Maybe<Scalars['Float']>;\n  level?: Maybe<Scalars['Int']>;\n  line_id?: Maybe<Scalars['Int']>;\n  speed?: Maybe<Scalars['Float']>;\n  start_timestamp?: Maybe<Scalars['timestamp']>;\n  uuid?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate min on columns */\nexport type Jams_Min_Fields = {\n  __typename?: 'jams_min_fields';\n  delay?: Maybe<Scalars['Float']>;\n  end_timestamp?: Maybe<Scalars['timestamp']>;\n  is_working_day?: Maybe<Scalars['Int']>;\n  length?: Maybe<Scalars['Float']>;\n  level?: Maybe<Scalars['Int']>;\n  line_id?: Maybe<Scalars['Int']>;\n  speed?: Maybe<Scalars['Float']>;\n  start_timestamp?: Maybe<Scalars['timestamp']>;\n  uuid?: Maybe<Scalars['Int']>;\n};\n\n/** response of any mutation on the table \"jams\" */\nexport type Jams_Mutation_Response = {\n  __typename?: 'jams_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Jams>;\n};\n\n/** on conflict condition type for table \"jams\" */\nexport type Jams_On_Conflict = {\n  constraint: Jams_Constraint;\n  update_columns?: Array<Jams_Update_Column>;\n  where?: Maybe<Jams_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"jams\". */\nexport type Jams_Order_By = {\n  delay?: Maybe<Order_By>;\n  end_timestamp?: Maybe<Order_By>;\n  hour?: Maybe<Order_By>;\n  is_working_day?: Maybe<Order_By>;\n  length?: Maybe<Order_By>;\n  level?: Maybe<Order_By>;\n  line_id?: Maybe<Order_By>;\n  speed?: Maybe<Order_By>;\n  start_timestamp?: Maybe<Order_By>;\n  uuid?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: jams */\nexport type Jams_Pk_Columns_Input = {\n  uuid: Scalars['Int'];\n};\n\n/** select columns of table \"jams\" */\nexport enum Jams_Select_Column {\n  /** column name */\n  Delay = 'delay',\n  /** column name */\n  EndTimestamp = 'end_timestamp',\n  /** column name */\n  Hour = 'hour',\n  /** column name */\n  IsWorkingDay = 'is_working_day',\n  /** column name */\n  Length = 'length',\n  /** column name */\n  Level = 'level',\n  /** column name */\n  LineId = 'line_id',\n  /** column name */\n  Speed = 'speed',\n  /** column name */\n  StartTimestamp = 'start_timestamp',\n  /** column name */\n  Uuid = 'uuid'\n}\n\n/** input type for updating data in table \"jams\" */\nexport type Jams_Set_Input = {\n  delay?: Maybe<Scalars['Float']>;\n  end_timestamp?: Maybe<Scalars['timestamp']>;\n  hour?: Maybe<Scalars['_int4']>;\n  is_working_day?: Maybe<Scalars['Int']>;\n  length?: Maybe<Scalars['Float']>;\n  level?: Maybe<Scalars['Int']>;\n  line_id?: Maybe<Scalars['Int']>;\n  speed?: Maybe<Scalars['Float']>;\n  start_timestamp?: Maybe<Scalars['timestamp']>;\n  uuid?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Jams_Stddev_Fields = {\n  __typename?: 'jams_stddev_fields';\n  delay?: Maybe<Scalars['Float']>;\n  is_working_day?: Maybe<Scalars['Float']>;\n  length?: Maybe<Scalars['Float']>;\n  level?: Maybe<Scalars['Float']>;\n  line_id?: Maybe<Scalars['Float']>;\n  speed?: Maybe<Scalars['Float']>;\n  uuid?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Jams_Stddev_Pop_Fields = {\n  __typename?: 'jams_stddev_pop_fields';\n  delay?: Maybe<Scalars['Float']>;\n  is_working_day?: Maybe<Scalars['Float']>;\n  length?: Maybe<Scalars['Float']>;\n  level?: Maybe<Scalars['Float']>;\n  line_id?: Maybe<Scalars['Float']>;\n  speed?: Maybe<Scalars['Float']>;\n  uuid?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Jams_Stddev_Samp_Fields = {\n  __typename?: 'jams_stddev_samp_fields';\n  delay?: Maybe<Scalars['Float']>;\n  is_working_day?: Maybe<Scalars['Float']>;\n  length?: Maybe<Scalars['Float']>;\n  level?: Maybe<Scalars['Float']>;\n  line_id?: Maybe<Scalars['Float']>;\n  speed?: Maybe<Scalars['Float']>;\n  uuid?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate sum on columns */\nexport type Jams_Sum_Fields = {\n  __typename?: 'jams_sum_fields';\n  delay?: Maybe<Scalars['Float']>;\n  is_working_day?: Maybe<Scalars['Int']>;\n  length?: Maybe<Scalars['Float']>;\n  level?: Maybe<Scalars['Int']>;\n  line_id?: Maybe<Scalars['Int']>;\n  speed?: Maybe<Scalars['Float']>;\n  uuid?: Maybe<Scalars['Int']>;\n};\n\n/** update columns of table \"jams\" */\nexport enum Jams_Update_Column {\n  /** column name */\n  Delay = 'delay',\n  /** column name */\n  EndTimestamp = 'end_timestamp',\n  /** column name */\n  Hour = 'hour',\n  /** column name */\n  IsWorkingDay = 'is_working_day',\n  /** column name */\n  Length = 'length',\n  /** column name */\n  Level = 'level',\n  /** column name */\n  LineId = 'line_id',\n  /** column name */\n  Speed = 'speed',\n  /** column name */\n  StartTimestamp = 'start_timestamp',\n  /** column name */\n  Uuid = 'uuid'\n}\n\n/** aggregate var_pop on columns */\nexport type Jams_Var_Pop_Fields = {\n  __typename?: 'jams_var_pop_fields';\n  delay?: Maybe<Scalars['Float']>;\n  is_working_day?: Maybe<Scalars['Float']>;\n  length?: Maybe<Scalars['Float']>;\n  level?: Maybe<Scalars['Float']>;\n  line_id?: Maybe<Scalars['Float']>;\n  speed?: Maybe<Scalars['Float']>;\n  uuid?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_samp on columns */\nexport type Jams_Var_Samp_Fields = {\n  __typename?: 'jams_var_samp_fields';\n  delay?: Maybe<Scalars['Float']>;\n  is_working_day?: Maybe<Scalars['Float']>;\n  length?: Maybe<Scalars['Float']>;\n  level?: Maybe<Scalars['Float']>;\n  line_id?: Maybe<Scalars['Float']>;\n  speed?: Maybe<Scalars['Float']>;\n  uuid?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate variance on columns */\nexport type Jams_Variance_Fields = {\n  __typename?: 'jams_variance_fields';\n  delay?: Maybe<Scalars['Float']>;\n  is_working_day?: Maybe<Scalars['Float']>;\n  length?: Maybe<Scalars['Float']>;\n  level?: Maybe<Scalars['Float']>;\n  line_id?: Maybe<Scalars['Float']>;\n  speed?: Maybe<Scalars['Float']>;\n  uuid?: Maybe<Scalars['Float']>;\n};\n\n/** mutation root */\nexport type Mutation_Root = {\n  __typename?: 'mutation_root';\n  /** delete data from the table: \"admin_levels\" */\n  delete_admin_levels?: Maybe<Admin_Levels_Mutation_Response>;\n  /** delete data from the table: \"comparativo_type\" */\n  delete_comparativo_type?: Maybe<Comparativo_Type_Mutation_Response>;\n  /** delete data from the table: \"evolutivo_type\" */\n  delete_evolutivo_type?: Maybe<Evolutivo_Type_Mutation_Response>;\n  /** delete data from the table: \"histogram_type\" */\n  delete_histogram_type?: Maybe<Histogram_Type_Mutation_Response>;\n  /** delete data from the table: \"jam_lines\" */\n  delete_jam_lines?: Maybe<Jam_Lines_Mutation_Response>;\n  /** delete single row from the table: \"jam_lines\" */\n  delete_jam_lines_by_pk?: Maybe<Jam_Lines>;\n  /** delete data from the table: \"jams\" */\n  delete_jams?: Maybe<Jams_Mutation_Response>;\n  /** delete data from the table: \"jams_agg_line\" */\n  delete_jams_agg_line?: Maybe<Jams_Agg_Line_Mutation_Response>;\n  /** delete single row from the table: \"jams\" */\n  delete_jams_by_pk?: Maybe<Jams>;\n  /** delete data from the table: \"simple_line_type\" */\n  delete_simple_line_type?: Maybe<Simple_Line_Type_Mutation_Response>;\n  /** delete data from the table: \"streets\" */\n  delete_streets?: Maybe<Streets_Mutation_Response>;\n  /** delete single row from the table: \"streets\" */\n  delete_streets_by_pk?: Maybe<Streets>;\n  /** insert data into the table: \"admin_levels\" */\n  insert_admin_levels?: Maybe<Admin_Levels_Mutation_Response>;\n  /** insert a single row into the table: \"admin_levels\" */\n  insert_admin_levels_one?: Maybe<Admin_Levels>;\n  /** insert data into the table: \"comparativo_type\" */\n  insert_comparativo_type?: Maybe<Comparativo_Type_Mutation_Response>;\n  /** insert a single row into the table: \"comparativo_type\" */\n  insert_comparativo_type_one?: Maybe<Comparativo_Type>;\n  /** insert data into the table: \"evolutivo_type\" */\n  insert_evolutivo_type?: Maybe<Evolutivo_Type_Mutation_Response>;\n  /** insert a single row into the table: \"evolutivo_type\" */\n  insert_evolutivo_type_one?: Maybe<Evolutivo_Type>;\n  /** insert data into the table: \"histogram_type\" */\n  insert_histogram_type?: Maybe<Histogram_Type_Mutation_Response>;\n  /** insert a single row into the table: \"histogram_type\" */\n  insert_histogram_type_one?: Maybe<Histogram_Type>;\n  /** insert data into the table: \"jam_lines\" */\n  insert_jam_lines?: Maybe<Jam_Lines_Mutation_Response>;\n  /** insert a single row into the table: \"jam_lines\" */\n  insert_jam_lines_one?: Maybe<Jam_Lines>;\n  /** insert data into the table: \"jams\" */\n  insert_jams?: Maybe<Jams_Mutation_Response>;\n  /** insert data into the table: \"jams_agg_line\" */\n  insert_jams_agg_line?: Maybe<Jams_Agg_Line_Mutation_Response>;\n  /** insert a single row into the table: \"jams_agg_line\" */\n  insert_jams_agg_line_one?: Maybe<Jams_Agg_Line>;\n  /** insert a single row into the table: \"jams\" */\n  insert_jams_one?: Maybe<Jams>;\n  /** insert data into the table: \"simple_line_type\" */\n  insert_simple_line_type?: Maybe<Simple_Line_Type_Mutation_Response>;\n  /** insert a single row into the table: \"simple_line_type\" */\n  insert_simple_line_type_one?: Maybe<Simple_Line_Type>;\n  /** insert data into the table: \"streets\" */\n  insert_streets?: Maybe<Streets_Mutation_Response>;\n  /** insert a single row into the table: \"streets\" */\n  insert_streets_one?: Maybe<Streets>;\n  /** update data of the table: \"admin_levels\" */\n  update_admin_levels?: Maybe<Admin_Levels_Mutation_Response>;\n  /** update data of the table: \"comparativo_type\" */\n  update_comparativo_type?: Maybe<Comparativo_Type_Mutation_Response>;\n  /** update data of the table: \"evolutivo_type\" */\n  update_evolutivo_type?: Maybe<Evolutivo_Type_Mutation_Response>;\n  /** update data of the table: \"histogram_type\" */\n  update_histogram_type?: Maybe<Histogram_Type_Mutation_Response>;\n  /** update data of the table: \"jam_lines\" */\n  update_jam_lines?: Maybe<Jam_Lines_Mutation_Response>;\n  /** update single row of the table: \"jam_lines\" */\n  update_jam_lines_by_pk?: Maybe<Jam_Lines>;\n  /** update data of the table: \"jams\" */\n  update_jams?: Maybe<Jams_Mutation_Response>;\n  /** update data of the table: \"jams_agg_line\" */\n  update_jams_agg_line?: Maybe<Jams_Agg_Line_Mutation_Response>;\n  /** update single row of the table: \"jams\" */\n  update_jams_by_pk?: Maybe<Jams>;\n  /** update data of the table: \"simple_line_type\" */\n  update_simple_line_type?: Maybe<Simple_Line_Type_Mutation_Response>;\n  /** update data of the table: \"streets\" */\n  update_streets?: Maybe<Streets_Mutation_Response>;\n  /** update single row of the table: \"streets\" */\n  update_streets_by_pk?: Maybe<Streets>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Admin_LevelsArgs = {\n  where: Admin_Levels_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Comparativo_TypeArgs = {\n  where: Comparativo_Type_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Evolutivo_TypeArgs = {\n  where: Evolutivo_Type_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Histogram_TypeArgs = {\n  where: Histogram_Type_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Jam_LinesArgs = {\n  where: Jam_Lines_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Jam_Lines_By_PkArgs = {\n  line_id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_JamsArgs = {\n  where: Jams_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Jams_Agg_LineArgs = {\n  where: Jams_Agg_Line_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Jams_By_PkArgs = {\n  uuid: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Simple_Line_TypeArgs = {\n  where: Simple_Line_Type_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_StreetsArgs = {\n  where: Streets_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Streets_By_PkArgs = {\n  street_id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Admin_LevelsArgs = {\n  objects: Array<Admin_Levels_Insert_Input>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Admin_Levels_OneArgs = {\n  object: Admin_Levels_Insert_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Comparativo_TypeArgs = {\n  objects: Array<Comparativo_Type_Insert_Input>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Comparativo_Type_OneArgs = {\n  object: Comparativo_Type_Insert_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Evolutivo_TypeArgs = {\n  objects: Array<Evolutivo_Type_Insert_Input>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Evolutivo_Type_OneArgs = {\n  object: Evolutivo_Type_Insert_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Histogram_TypeArgs = {\n  objects: Array<Histogram_Type_Insert_Input>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Histogram_Type_OneArgs = {\n  object: Histogram_Type_Insert_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Jam_LinesArgs = {\n  objects: Array<Jam_Lines_Insert_Input>;\n  on_conflict?: Maybe<Jam_Lines_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Jam_Lines_OneArgs = {\n  object: Jam_Lines_Insert_Input;\n  on_conflict?: Maybe<Jam_Lines_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_JamsArgs = {\n  objects: Array<Jams_Insert_Input>;\n  on_conflict?: Maybe<Jams_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Jams_Agg_LineArgs = {\n  objects: Array<Jams_Agg_Line_Insert_Input>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Jams_Agg_Line_OneArgs = {\n  object: Jams_Agg_Line_Insert_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Jams_OneArgs = {\n  object: Jams_Insert_Input;\n  on_conflict?: Maybe<Jams_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Simple_Line_TypeArgs = {\n  objects: Array<Simple_Line_Type_Insert_Input>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Simple_Line_Type_OneArgs = {\n  object: Simple_Line_Type_Insert_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_StreetsArgs = {\n  objects: Array<Streets_Insert_Input>;\n  on_conflict?: Maybe<Streets_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Streets_OneArgs = {\n  object: Streets_Insert_Input;\n  on_conflict?: Maybe<Streets_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Admin_LevelsArgs = {\n  _inc?: Maybe<Admin_Levels_Inc_Input>;\n  _set?: Maybe<Admin_Levels_Set_Input>;\n  where: Admin_Levels_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Comparativo_TypeArgs = {\n  _inc?: Maybe<Comparativo_Type_Inc_Input>;\n  _set?: Maybe<Comparativo_Type_Set_Input>;\n  where: Comparativo_Type_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Evolutivo_TypeArgs = {\n  _inc?: Maybe<Evolutivo_Type_Inc_Input>;\n  _set?: Maybe<Evolutivo_Type_Set_Input>;\n  where: Evolutivo_Type_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Histogram_TypeArgs = {\n  _inc?: Maybe<Histogram_Type_Inc_Input>;\n  _set?: Maybe<Histogram_Type_Set_Input>;\n  where: Histogram_Type_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Jam_LinesArgs = {\n  _inc?: Maybe<Jam_Lines_Inc_Input>;\n  _set?: Maybe<Jam_Lines_Set_Input>;\n  where: Jam_Lines_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Jam_Lines_By_PkArgs = {\n  _inc?: Maybe<Jam_Lines_Inc_Input>;\n  _set?: Maybe<Jam_Lines_Set_Input>;\n  pk_columns: Jam_Lines_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_JamsArgs = {\n  _inc?: Maybe<Jams_Inc_Input>;\n  _set?: Maybe<Jams_Set_Input>;\n  where: Jams_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Jams_Agg_LineArgs = {\n  _inc?: Maybe<Jams_Agg_Line_Inc_Input>;\n  _set?: Maybe<Jams_Agg_Line_Set_Input>;\n  where: Jams_Agg_Line_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Jams_By_PkArgs = {\n  _inc?: Maybe<Jams_Inc_Input>;\n  _set?: Maybe<Jams_Set_Input>;\n  pk_columns: Jams_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Simple_Line_TypeArgs = {\n  _inc?: Maybe<Simple_Line_Type_Inc_Input>;\n  _set?: Maybe<Simple_Line_Type_Set_Input>;\n  where: Simple_Line_Type_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_StreetsArgs = {\n  _inc?: Maybe<Streets_Inc_Input>;\n  _set?: Maybe<Streets_Set_Input>;\n  where: Streets_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Streets_By_PkArgs = {\n  _inc?: Maybe<Streets_Inc_Input>;\n  _set?: Maybe<Streets_Set_Input>;\n  pk_columns: Streets_Pk_Columns_Input;\n};\n\n/** column ordering options */\nexport enum Order_By {\n  /** in ascending order, nulls last */\n  Asc = 'asc',\n  /** in ascending order, nulls first */\n  AscNullsFirst = 'asc_nulls_first',\n  /** in ascending order, nulls last */\n  AscNullsLast = 'asc_nulls_last',\n  /** in descending order, nulls first */\n  Desc = 'desc',\n  /** in descending order, nulls first */\n  DescNullsFirst = 'desc_nulls_first',\n  /** in descending order, nulls last */\n  DescNullsLast = 'desc_nulls_last'\n}\n\nexport type Query_Root = {\n  __typename?: 'query_root';\n  /** fetch data from the table: \"admin_levels\" */\n  admin_levels: Array<Admin_Levels>;\n  /** fetch aggregated fields from the table: \"admin_levels\" */\n  admin_levels_aggregate: Admin_Levels_Aggregate;\n  /** fetch data from the table: \"comparativo_type\" */\n  comparativo_type: Array<Comparativo_Type>;\n  /** fetch aggregated fields from the table: \"comparativo_type\" */\n  comparativo_type_aggregate: Comparativo_Type_Aggregate;\n  /** fetch data from the table: \"evolutivo_type\" */\n  evolutivo_type: Array<Evolutivo_Type>;\n  /** fetch aggregated fields from the table: \"evolutivo_type\" */\n  evolutivo_type_aggregate: Evolutivo_Type_Aggregate;\n  /** execute function \"get_comparativo\" which returns \"comparativo_type\" */\n  get_comparativo: Array<Comparativo_Type>;\n  /** execute function \"get_comparativo\" and query aggregates on result of table type \"comparativo_type\" */\n  get_comparativo_aggregate: Comparativo_Type_Aggregate;\n  /** execute function \"get_evolutivo\" which returns \"evolutivo_type\" */\n  get_evolutivo: Array<Evolutivo_Type>;\n  /** execute function \"get_evolutivo\" and query aggregates on result of table type \"evolutivo_type\" */\n  get_evolutivo_aggregate: Evolutivo_Type_Aggregate;\n  /** execute function \"get_jams_lines\" which returns \"jams_agg_line\" */\n  get_jams_lines: Array<Jams_Agg_Line>;\n  /** execute function \"get_jams_lines\" and query aggregates on result of table type \"jams_agg_line\" */\n  get_jams_lines_aggregate: Jams_Agg_Line_Aggregate;\n  /** execute function \"get_lines\" which returns \"simple_line_type\" */\n  get_lines: Array<Simple_Line_Type>;\n  /** execute function \"get_lines\" and query aggregates on result of table type \"simple_line_type\" */\n  get_lines_aggregate: Simple_Line_Type_Aggregate;\n  /** execute function \"get_predictivo\" which returns \"evolutivo_type\" */\n  get_predictivo: Array<Evolutivo_Type>;\n  /** execute function \"get_predictivo\" and query aggregates on result of table type \"evolutivo_type\" */\n  get_predictivo_aggregate: Evolutivo_Type_Aggregate;\n  /** execute function \"get_summary\" which returns \"evolutivo_type\" */\n  get_summary: Array<Evolutivo_Type>;\n  /** execute function \"get_summary\" and query aggregates on result of table type \"evolutivo_type\" */\n  get_summary_aggregate: Evolutivo_Type_Aggregate;\n  /** fetch data from the table: \"histogram_type\" */\n  histogram_type: Array<Histogram_Type>;\n  /** fetch aggregated fields from the table: \"histogram_type\" */\n  histogram_type_aggregate: Histogram_Type_Aggregate;\n  /** fetch data from the table: \"jam_lines\" */\n  jam_lines: Array<Jam_Lines>;\n  /** fetch aggregated fields from the table: \"jam_lines\" */\n  jam_lines_aggregate: Jam_Lines_Aggregate;\n  /** fetch data from the table: \"jam_lines\" using primary key columns */\n  jam_lines_by_pk?: Maybe<Jam_Lines>;\n  /** fetch data from the table: \"jams\" */\n  jams: Array<Jams>;\n  /** fetch data from the table: \"jams_agg_line\" */\n  jams_agg_line: Array<Jams_Agg_Line>;\n  /** fetch aggregated fields from the table: \"jams_agg_line\" */\n  jams_agg_line_aggregate: Jams_Agg_Line_Aggregate;\n  /** fetch aggregated fields from the table: \"jams\" */\n  jams_aggregate: Jams_Aggregate;\n  /** fetch data from the table: \"jams\" using primary key columns */\n  jams_by_pk?: Maybe<Jams>;\n  /** fetch data from the table: \"simple_line_type\" */\n  simple_line_type: Array<Simple_Line_Type>;\n  /** fetch aggregated fields from the table: \"simple_line_type\" */\n  simple_line_type_aggregate: Simple_Line_Type_Aggregate;\n  /** fetch data from the table: \"streets\" */\n  streets: Array<Streets>;\n  /** fetch aggregated fields from the table: \"streets\" */\n  streets_aggregate: Streets_Aggregate;\n  /** fetch data from the table: \"streets\" using primary key columns */\n  streets_by_pk?: Maybe<Streets>;\n};\n\n\nexport type Query_RootAdmin_LevelsArgs = {\n  distinct_on?: Maybe<Array<Admin_Levels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Admin_Levels_Order_By>>;\n  where?: Maybe<Admin_Levels_Bool_Exp>;\n};\n\n\nexport type Query_RootAdmin_Levels_AggregateArgs = {\n  distinct_on?: Maybe<Array<Admin_Levels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Admin_Levels_Order_By>>;\n  where?: Maybe<Admin_Levels_Bool_Exp>;\n};\n\n\nexport type Query_RootComparativo_TypeArgs = {\n  distinct_on?: Maybe<Array<Comparativo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Comparativo_Type_Order_By>>;\n  where?: Maybe<Comparativo_Type_Bool_Exp>;\n};\n\n\nexport type Query_RootComparativo_Type_AggregateArgs = {\n  distinct_on?: Maybe<Array<Comparativo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Comparativo_Type_Order_By>>;\n  where?: Maybe<Comparativo_Type_Bool_Exp>;\n};\n\n\nexport type Query_RootEvolutivo_TypeArgs = {\n  distinct_on?: Maybe<Array<Evolutivo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Evolutivo_Type_Order_By>>;\n  where?: Maybe<Evolutivo_Type_Bool_Exp>;\n};\n\n\nexport type Query_RootEvolutivo_Type_AggregateArgs = {\n  distinct_on?: Maybe<Array<Evolutivo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Evolutivo_Type_Order_By>>;\n  where?: Maybe<Evolutivo_Type_Bool_Exp>;\n};\n\n\nexport type Query_RootGet_ComparativoArgs = {\n  args: Get_Comparativo_Args;\n  distinct_on?: Maybe<Array<Comparativo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Comparativo_Type_Order_By>>;\n  where?: Maybe<Comparativo_Type_Bool_Exp>;\n};\n\n\nexport type Query_RootGet_Comparativo_AggregateArgs = {\n  args: Get_Comparativo_Args;\n  distinct_on?: Maybe<Array<Comparativo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Comparativo_Type_Order_By>>;\n  where?: Maybe<Comparativo_Type_Bool_Exp>;\n};\n\n\nexport type Query_RootGet_EvolutivoArgs = {\n  args: Get_Evolutivo_Args;\n  distinct_on?: Maybe<Array<Evolutivo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Evolutivo_Type_Order_By>>;\n  where?: Maybe<Evolutivo_Type_Bool_Exp>;\n};\n\n\nexport type Query_RootGet_Evolutivo_AggregateArgs = {\n  args: Get_Evolutivo_Args;\n  distinct_on?: Maybe<Array<Evolutivo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Evolutivo_Type_Order_By>>;\n  where?: Maybe<Evolutivo_Type_Bool_Exp>;\n};\n\n\nexport type Query_RootGet_Jams_LinesArgs = {\n  args: Get_Jams_Lines_Args;\n  distinct_on?: Maybe<Array<Jams_Agg_Line_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Jams_Agg_Line_Order_By>>;\n  where?: Maybe<Jams_Agg_Line_Bool_Exp>;\n};\n\n\nexport type Query_RootGet_Jams_Lines_AggregateArgs = {\n  args: Get_Jams_Lines_Args;\n  distinct_on?: Maybe<Array<Jams_Agg_Line_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Jams_Agg_Line_Order_By>>;\n  where?: Maybe<Jams_Agg_Line_Bool_Exp>;\n};\n\n\nexport type Query_RootGet_LinesArgs = {\n  args: Get_Lines_Args;\n  distinct_on?: Maybe<Array<Simple_Line_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Simple_Line_Type_Order_By>>;\n  where?: Maybe<Simple_Line_Type_Bool_Exp>;\n};\n\n\nexport type Query_RootGet_Lines_AggregateArgs = {\n  args: Get_Lines_Args;\n  distinct_on?: Maybe<Array<Simple_Line_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Simple_Line_Type_Order_By>>;\n  where?: Maybe<Simple_Line_Type_Bool_Exp>;\n};\n\n\nexport type Query_RootGet_PredictivoArgs = {\n  args: Get_Predictivo_Args;\n  distinct_on?: Maybe<Array<Evolutivo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Evolutivo_Type_Order_By>>;\n  where?: Maybe<Evolutivo_Type_Bool_Exp>;\n};\n\n\nexport type Query_RootGet_Predictivo_AggregateArgs = {\n  args: Get_Predictivo_Args;\n  distinct_on?: Maybe<Array<Evolutivo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Evolutivo_Type_Order_By>>;\n  where?: Maybe<Evolutivo_Type_Bool_Exp>;\n};\n\n\nexport type Query_RootGet_SummaryArgs = {\n  args: Get_Summary_Args;\n  distinct_on?: Maybe<Array<Evolutivo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Evolutivo_Type_Order_By>>;\n  where?: Maybe<Evolutivo_Type_Bool_Exp>;\n};\n\n\nexport type Query_RootGet_Summary_AggregateArgs = {\n  args: Get_Summary_Args;\n  distinct_on?: Maybe<Array<Evolutivo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Evolutivo_Type_Order_By>>;\n  where?: Maybe<Evolutivo_Type_Bool_Exp>;\n};\n\n\nexport type Query_RootHistogram_TypeArgs = {\n  distinct_on?: Maybe<Array<Histogram_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Histogram_Type_Order_By>>;\n  where?: Maybe<Histogram_Type_Bool_Exp>;\n};\n\n\nexport type Query_RootHistogram_Type_AggregateArgs = {\n  distinct_on?: Maybe<Array<Histogram_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Histogram_Type_Order_By>>;\n  where?: Maybe<Histogram_Type_Bool_Exp>;\n};\n\n\nexport type Query_RootJam_LinesArgs = {\n  distinct_on?: Maybe<Array<Jam_Lines_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Jam_Lines_Order_By>>;\n  where?: Maybe<Jam_Lines_Bool_Exp>;\n};\n\n\nexport type Query_RootJam_Lines_AggregateArgs = {\n  distinct_on?: Maybe<Array<Jam_Lines_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Jam_Lines_Order_By>>;\n  where?: Maybe<Jam_Lines_Bool_Exp>;\n};\n\n\nexport type Query_RootJam_Lines_By_PkArgs = {\n  line_id: Scalars['Int'];\n};\n\n\nexport type Query_RootJamsArgs = {\n  distinct_on?: Maybe<Array<Jams_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Jams_Order_By>>;\n  where?: Maybe<Jams_Bool_Exp>;\n};\n\n\nexport type Query_RootJams_Agg_LineArgs = {\n  distinct_on?: Maybe<Array<Jams_Agg_Line_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Jams_Agg_Line_Order_By>>;\n  where?: Maybe<Jams_Agg_Line_Bool_Exp>;\n};\n\n\nexport type Query_RootJams_Agg_Line_AggregateArgs = {\n  distinct_on?: Maybe<Array<Jams_Agg_Line_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Jams_Agg_Line_Order_By>>;\n  where?: Maybe<Jams_Agg_Line_Bool_Exp>;\n};\n\n\nexport type Query_RootJams_AggregateArgs = {\n  distinct_on?: Maybe<Array<Jams_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Jams_Order_By>>;\n  where?: Maybe<Jams_Bool_Exp>;\n};\n\n\nexport type Query_RootJams_By_PkArgs = {\n  uuid: Scalars['Int'];\n};\n\n\nexport type Query_RootSimple_Line_TypeArgs = {\n  distinct_on?: Maybe<Array<Simple_Line_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Simple_Line_Type_Order_By>>;\n  where?: Maybe<Simple_Line_Type_Bool_Exp>;\n};\n\n\nexport type Query_RootSimple_Line_Type_AggregateArgs = {\n  distinct_on?: Maybe<Array<Simple_Line_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Simple_Line_Type_Order_By>>;\n  where?: Maybe<Simple_Line_Type_Bool_Exp>;\n};\n\n\nexport type Query_RootStreetsArgs = {\n  distinct_on?: Maybe<Array<Streets_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Streets_Order_By>>;\n  where?: Maybe<Streets_Bool_Exp>;\n};\n\n\nexport type Query_RootStreets_AggregateArgs = {\n  distinct_on?: Maybe<Array<Streets_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Streets_Order_By>>;\n  where?: Maybe<Streets_Bool_Exp>;\n};\n\n\nexport type Query_RootStreets_By_PkArgs = {\n  street_id: Scalars['Int'];\n};\n\n/** columns and relationships of \"simple_line_type\" */\nexport type Simple_Line_Type = {\n  __typename?: 'simple_line_type';\n  line_id?: Maybe<Scalars['Int']>;\n  street_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregated selection of \"simple_line_type\" */\nexport type Simple_Line_Type_Aggregate = {\n  __typename?: 'simple_line_type_aggregate';\n  aggregate?: Maybe<Simple_Line_Type_Aggregate_Fields>;\n  nodes: Array<Simple_Line_Type>;\n};\n\n/** aggregate fields of \"simple_line_type\" */\nexport type Simple_Line_Type_Aggregate_Fields = {\n  __typename?: 'simple_line_type_aggregate_fields';\n  avg?: Maybe<Simple_Line_Type_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Simple_Line_Type_Max_Fields>;\n  min?: Maybe<Simple_Line_Type_Min_Fields>;\n  stddev?: Maybe<Simple_Line_Type_Stddev_Fields>;\n  stddev_pop?: Maybe<Simple_Line_Type_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Simple_Line_Type_Stddev_Samp_Fields>;\n  sum?: Maybe<Simple_Line_Type_Sum_Fields>;\n  var_pop?: Maybe<Simple_Line_Type_Var_Pop_Fields>;\n  var_samp?: Maybe<Simple_Line_Type_Var_Samp_Fields>;\n  variance?: Maybe<Simple_Line_Type_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"simple_line_type\" */\nexport type Simple_Line_Type_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Simple_Line_Type_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** aggregate avg on columns */\nexport type Simple_Line_Type_Avg_Fields = {\n  __typename?: 'simple_line_type_avg_fields';\n  line_id?: Maybe<Scalars['Float']>;\n  street_id?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to filter rows from the table \"simple_line_type\". All fields are combined with a logical 'AND'. */\nexport type Simple_Line_Type_Bool_Exp = {\n  _and?: Maybe<Array<Simple_Line_Type_Bool_Exp>>;\n  _not?: Maybe<Simple_Line_Type_Bool_Exp>;\n  _or?: Maybe<Array<Simple_Line_Type_Bool_Exp>>;\n  line_id?: Maybe<Int_Comparison_Exp>;\n  street_id?: Maybe<Int_Comparison_Exp>;\n};\n\n/** input type for incrementing numeric columns in table \"simple_line_type\" */\nexport type Simple_Line_Type_Inc_Input = {\n  line_id?: Maybe<Scalars['Int']>;\n  street_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"simple_line_type\" */\nexport type Simple_Line_Type_Insert_Input = {\n  line_id?: Maybe<Scalars['Int']>;\n  street_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Simple_Line_Type_Max_Fields = {\n  __typename?: 'simple_line_type_max_fields';\n  line_id?: Maybe<Scalars['Int']>;\n  street_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate min on columns */\nexport type Simple_Line_Type_Min_Fields = {\n  __typename?: 'simple_line_type_min_fields';\n  line_id?: Maybe<Scalars['Int']>;\n  street_id?: Maybe<Scalars['Int']>;\n};\n\n/** response of any mutation on the table \"simple_line_type\" */\nexport type Simple_Line_Type_Mutation_Response = {\n  __typename?: 'simple_line_type_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Simple_Line_Type>;\n};\n\n/** Ordering options when selecting data from \"simple_line_type\". */\nexport type Simple_Line_Type_Order_By = {\n  line_id?: Maybe<Order_By>;\n  street_id?: Maybe<Order_By>;\n};\n\n/** select columns of table \"simple_line_type\" */\nexport enum Simple_Line_Type_Select_Column {\n  /** column name */\n  LineId = 'line_id',\n  /** column name */\n  StreetId = 'street_id'\n}\n\n/** input type for updating data in table \"simple_line_type\" */\nexport type Simple_Line_Type_Set_Input = {\n  line_id?: Maybe<Scalars['Int']>;\n  street_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Simple_Line_Type_Stddev_Fields = {\n  __typename?: 'simple_line_type_stddev_fields';\n  line_id?: Maybe<Scalars['Float']>;\n  street_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Simple_Line_Type_Stddev_Pop_Fields = {\n  __typename?: 'simple_line_type_stddev_pop_fields';\n  line_id?: Maybe<Scalars['Float']>;\n  street_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Simple_Line_Type_Stddev_Samp_Fields = {\n  __typename?: 'simple_line_type_stddev_samp_fields';\n  line_id?: Maybe<Scalars['Float']>;\n  street_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate sum on columns */\nexport type Simple_Line_Type_Sum_Fields = {\n  __typename?: 'simple_line_type_sum_fields';\n  line_id?: Maybe<Scalars['Int']>;\n  street_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate var_pop on columns */\nexport type Simple_Line_Type_Var_Pop_Fields = {\n  __typename?: 'simple_line_type_var_pop_fields';\n  line_id?: Maybe<Scalars['Float']>;\n  street_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_samp on columns */\nexport type Simple_Line_Type_Var_Samp_Fields = {\n  __typename?: 'simple_line_type_var_samp_fields';\n  line_id?: Maybe<Scalars['Float']>;\n  street_id?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate variance on columns */\nexport type Simple_Line_Type_Variance_Fields = {\n  __typename?: 'simple_line_type_variance_fields';\n  line_id?: Maybe<Scalars['Float']>;\n  street_id?: Maybe<Scalars['Float']>;\n};\n\nexport type St_D_Within_Geography_Input = {\n  distance: Scalars['Float'];\n  from: Scalars['geography'];\n  use_spheroid?: Maybe<Scalars['Boolean']>;\n};\n\nexport type St_D_Within_Input = {\n  distance: Scalars['Float'];\n  from: Scalars['geometry'];\n};\n\n/** columns and relationships of \"streets\" */\nexport type Streets = {\n  __typename?: 'streets';\n  last_update?: Maybe<Scalars['timestamptz']>;\n  line: Scalars['geometry'];\n  street_base_name: Scalars['String'];\n  street_id: Scalars['Int'];\n  street_name: Scalars['String'];\n  street_sufix?: Maybe<Scalars['String']>;\n  street_type: Scalars['Int'];\n};\n\n/** aggregated selection of \"streets\" */\nexport type Streets_Aggregate = {\n  __typename?: 'streets_aggregate';\n  aggregate?: Maybe<Streets_Aggregate_Fields>;\n  nodes: Array<Streets>;\n};\n\n/** aggregate fields of \"streets\" */\nexport type Streets_Aggregate_Fields = {\n  __typename?: 'streets_aggregate_fields';\n  avg?: Maybe<Streets_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Streets_Max_Fields>;\n  min?: Maybe<Streets_Min_Fields>;\n  stddev?: Maybe<Streets_Stddev_Fields>;\n  stddev_pop?: Maybe<Streets_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Streets_Stddev_Samp_Fields>;\n  sum?: Maybe<Streets_Sum_Fields>;\n  var_pop?: Maybe<Streets_Var_Pop_Fields>;\n  var_samp?: Maybe<Streets_Var_Samp_Fields>;\n  variance?: Maybe<Streets_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"streets\" */\nexport type Streets_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Streets_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** aggregate avg on columns */\nexport type Streets_Avg_Fields = {\n  __typename?: 'streets_avg_fields';\n  street_id?: Maybe<Scalars['Float']>;\n  street_type?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to filter rows from the table \"streets\". All fields are combined with a logical 'AND'. */\nexport type Streets_Bool_Exp = {\n  _and?: Maybe<Array<Streets_Bool_Exp>>;\n  _not?: Maybe<Streets_Bool_Exp>;\n  _or?: Maybe<Array<Streets_Bool_Exp>>;\n  last_update?: Maybe<Timestamptz_Comparison_Exp>;\n  line?: Maybe<Geometry_Comparison_Exp>;\n  street_base_name?: Maybe<String_Comparison_Exp>;\n  street_id?: Maybe<Int_Comparison_Exp>;\n  street_name?: Maybe<String_Comparison_Exp>;\n  street_sufix?: Maybe<String_Comparison_Exp>;\n  street_type?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"streets\" */\nexport enum Streets_Constraint {\n  /** unique or primary key constraint */\n  StreetsPkey = 'streets_pkey'\n}\n\n/** input type for incrementing numeric columns in table \"streets\" */\nexport type Streets_Inc_Input = {\n  street_id?: Maybe<Scalars['Int']>;\n  street_type?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"streets\" */\nexport type Streets_Insert_Input = {\n  last_update?: Maybe<Scalars['timestamptz']>;\n  line?: Maybe<Scalars['geometry']>;\n  street_base_name?: Maybe<Scalars['String']>;\n  street_id?: Maybe<Scalars['Int']>;\n  street_name?: Maybe<Scalars['String']>;\n  street_sufix?: Maybe<Scalars['String']>;\n  street_type?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Streets_Max_Fields = {\n  __typename?: 'streets_max_fields';\n  last_update?: Maybe<Scalars['timestamptz']>;\n  street_base_name?: Maybe<Scalars['String']>;\n  street_id?: Maybe<Scalars['Int']>;\n  street_name?: Maybe<Scalars['String']>;\n  street_sufix?: Maybe<Scalars['String']>;\n  street_type?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate min on columns */\nexport type Streets_Min_Fields = {\n  __typename?: 'streets_min_fields';\n  last_update?: Maybe<Scalars['timestamptz']>;\n  street_base_name?: Maybe<Scalars['String']>;\n  street_id?: Maybe<Scalars['Int']>;\n  street_name?: Maybe<Scalars['String']>;\n  street_sufix?: Maybe<Scalars['String']>;\n  street_type?: Maybe<Scalars['Int']>;\n};\n\n/** response of any mutation on the table \"streets\" */\nexport type Streets_Mutation_Response = {\n  __typename?: 'streets_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Streets>;\n};\n\n/** on conflict condition type for table \"streets\" */\nexport type Streets_On_Conflict = {\n  constraint: Streets_Constraint;\n  update_columns?: Array<Streets_Update_Column>;\n  where?: Maybe<Streets_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"streets\". */\nexport type Streets_Order_By = {\n  last_update?: Maybe<Order_By>;\n  line?: Maybe<Order_By>;\n  street_base_name?: Maybe<Order_By>;\n  street_id?: Maybe<Order_By>;\n  street_name?: Maybe<Order_By>;\n  street_sufix?: Maybe<Order_By>;\n  street_type?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: streets */\nexport type Streets_Pk_Columns_Input = {\n  street_id: Scalars['Int'];\n};\n\n/** select columns of table \"streets\" */\nexport enum Streets_Select_Column {\n  /** column name */\n  LastUpdate = 'last_update',\n  /** column name */\n  Line = 'line',\n  /** column name */\n  StreetBaseName = 'street_base_name',\n  /** column name */\n  StreetId = 'street_id',\n  /** column name */\n  StreetName = 'street_name',\n  /** column name */\n  StreetSufix = 'street_sufix',\n  /** column name */\n  StreetType = 'street_type'\n}\n\n/** input type for updating data in table \"streets\" */\nexport type Streets_Set_Input = {\n  last_update?: Maybe<Scalars['timestamptz']>;\n  line?: Maybe<Scalars['geometry']>;\n  street_base_name?: Maybe<Scalars['String']>;\n  street_id?: Maybe<Scalars['Int']>;\n  street_name?: Maybe<Scalars['String']>;\n  street_sufix?: Maybe<Scalars['String']>;\n  street_type?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Streets_Stddev_Fields = {\n  __typename?: 'streets_stddev_fields';\n  street_id?: Maybe<Scalars['Float']>;\n  street_type?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Streets_Stddev_Pop_Fields = {\n  __typename?: 'streets_stddev_pop_fields';\n  street_id?: Maybe<Scalars['Float']>;\n  street_type?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Streets_Stddev_Samp_Fields = {\n  __typename?: 'streets_stddev_samp_fields';\n  street_id?: Maybe<Scalars['Float']>;\n  street_type?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate sum on columns */\nexport type Streets_Sum_Fields = {\n  __typename?: 'streets_sum_fields';\n  street_id?: Maybe<Scalars['Int']>;\n  street_type?: Maybe<Scalars['Int']>;\n};\n\n/** update columns of table \"streets\" */\nexport enum Streets_Update_Column {\n  /** column name */\n  LastUpdate = 'last_update',\n  /** column name */\n  Line = 'line',\n  /** column name */\n  StreetBaseName = 'street_base_name',\n  /** column name */\n  StreetId = 'street_id',\n  /** column name */\n  StreetName = 'street_name',\n  /** column name */\n  StreetSufix = 'street_sufix',\n  /** column name */\n  StreetType = 'street_type'\n}\n\n/** aggregate var_pop on columns */\nexport type Streets_Var_Pop_Fields = {\n  __typename?: 'streets_var_pop_fields';\n  street_id?: Maybe<Scalars['Float']>;\n  street_type?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_samp on columns */\nexport type Streets_Var_Samp_Fields = {\n  __typename?: 'streets_var_samp_fields';\n  street_id?: Maybe<Scalars['Float']>;\n  street_type?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate variance on columns */\nexport type Streets_Variance_Fields = {\n  __typename?: 'streets_variance_fields';\n  street_id?: Maybe<Scalars['Float']>;\n  street_type?: Maybe<Scalars['Float']>;\n};\n\nexport type Subscription_Root = {\n  __typename?: 'subscription_root';\n  /** fetch data from the table: \"admin_levels\" */\n  admin_levels: Array<Admin_Levels>;\n  /** fetch aggregated fields from the table: \"admin_levels\" */\n  admin_levels_aggregate: Admin_Levels_Aggregate;\n  /** fetch data from the table: \"comparativo_type\" */\n  comparativo_type: Array<Comparativo_Type>;\n  /** fetch aggregated fields from the table: \"comparativo_type\" */\n  comparativo_type_aggregate: Comparativo_Type_Aggregate;\n  /** fetch data from the table: \"evolutivo_type\" */\n  evolutivo_type: Array<Evolutivo_Type>;\n  /** fetch aggregated fields from the table: \"evolutivo_type\" */\n  evolutivo_type_aggregate: Evolutivo_Type_Aggregate;\n  /** execute function \"get_comparativo\" which returns \"comparativo_type\" */\n  get_comparativo: Array<Comparativo_Type>;\n  /** execute function \"get_comparativo\" and query aggregates on result of table type \"comparativo_type\" */\n  get_comparativo_aggregate: Comparativo_Type_Aggregate;\n  /** execute function \"get_evolutivo\" which returns \"evolutivo_type\" */\n  get_evolutivo: Array<Evolutivo_Type>;\n  /** execute function \"get_evolutivo\" and query aggregates on result of table type \"evolutivo_type\" */\n  get_evolutivo_aggregate: Evolutivo_Type_Aggregate;\n  /** execute function \"get_jams_lines\" which returns \"jams_agg_line\" */\n  get_jams_lines: Array<Jams_Agg_Line>;\n  /** execute function \"get_jams_lines\" and query aggregates on result of table type \"jams_agg_line\" */\n  get_jams_lines_aggregate: Jams_Agg_Line_Aggregate;\n  /** execute function \"get_lines\" which returns \"simple_line_type\" */\n  get_lines: Array<Simple_Line_Type>;\n  /** execute function \"get_lines\" and query aggregates on result of table type \"simple_line_type\" */\n  get_lines_aggregate: Simple_Line_Type_Aggregate;\n  /** execute function \"get_predictivo\" which returns \"evolutivo_type\" */\n  get_predictivo: Array<Evolutivo_Type>;\n  /** execute function \"get_predictivo\" and query aggregates on result of table type \"evolutivo_type\" */\n  get_predictivo_aggregate: Evolutivo_Type_Aggregate;\n  /** execute function \"get_summary\" which returns \"evolutivo_type\" */\n  get_summary: Array<Evolutivo_Type>;\n  /** execute function \"get_summary\" and query aggregates on result of table type \"evolutivo_type\" */\n  get_summary_aggregate: Evolutivo_Type_Aggregate;\n  /** fetch data from the table: \"histogram_type\" */\n  histogram_type: Array<Histogram_Type>;\n  /** fetch aggregated fields from the table: \"histogram_type\" */\n  histogram_type_aggregate: Histogram_Type_Aggregate;\n  /** fetch data from the table: \"jam_lines\" */\n  jam_lines: Array<Jam_Lines>;\n  /** fetch aggregated fields from the table: \"jam_lines\" */\n  jam_lines_aggregate: Jam_Lines_Aggregate;\n  /** fetch data from the table: \"jam_lines\" using primary key columns */\n  jam_lines_by_pk?: Maybe<Jam_Lines>;\n  /** fetch data from the table: \"jams\" */\n  jams: Array<Jams>;\n  /** fetch data from the table: \"jams_agg_line\" */\n  jams_agg_line: Array<Jams_Agg_Line>;\n  /** fetch aggregated fields from the table: \"jams_agg_line\" */\n  jams_agg_line_aggregate: Jams_Agg_Line_Aggregate;\n  /** fetch aggregated fields from the table: \"jams\" */\n  jams_aggregate: Jams_Aggregate;\n  /** fetch data from the table: \"jams\" using primary key columns */\n  jams_by_pk?: Maybe<Jams>;\n  /** fetch data from the table: \"simple_line_type\" */\n  simple_line_type: Array<Simple_Line_Type>;\n  /** fetch aggregated fields from the table: \"simple_line_type\" */\n  simple_line_type_aggregate: Simple_Line_Type_Aggregate;\n  /** fetch data from the table: \"streets\" */\n  streets: Array<Streets>;\n  /** fetch aggregated fields from the table: \"streets\" */\n  streets_aggregate: Streets_Aggregate;\n  /** fetch data from the table: \"streets\" using primary key columns */\n  streets_by_pk?: Maybe<Streets>;\n};\n\n\nexport type Subscription_RootAdmin_LevelsArgs = {\n  distinct_on?: Maybe<Array<Admin_Levels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Admin_Levels_Order_By>>;\n  where?: Maybe<Admin_Levels_Bool_Exp>;\n};\n\n\nexport type Subscription_RootAdmin_Levels_AggregateArgs = {\n  distinct_on?: Maybe<Array<Admin_Levels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Admin_Levels_Order_By>>;\n  where?: Maybe<Admin_Levels_Bool_Exp>;\n};\n\n\nexport type Subscription_RootComparativo_TypeArgs = {\n  distinct_on?: Maybe<Array<Comparativo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Comparativo_Type_Order_By>>;\n  where?: Maybe<Comparativo_Type_Bool_Exp>;\n};\n\n\nexport type Subscription_RootComparativo_Type_AggregateArgs = {\n  distinct_on?: Maybe<Array<Comparativo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Comparativo_Type_Order_By>>;\n  where?: Maybe<Comparativo_Type_Bool_Exp>;\n};\n\n\nexport type Subscription_RootEvolutivo_TypeArgs = {\n  distinct_on?: Maybe<Array<Evolutivo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Evolutivo_Type_Order_By>>;\n  where?: Maybe<Evolutivo_Type_Bool_Exp>;\n};\n\n\nexport type Subscription_RootEvolutivo_Type_AggregateArgs = {\n  distinct_on?: Maybe<Array<Evolutivo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Evolutivo_Type_Order_By>>;\n  where?: Maybe<Evolutivo_Type_Bool_Exp>;\n};\n\n\nexport type Subscription_RootGet_ComparativoArgs = {\n  args: Get_Comparativo_Args;\n  distinct_on?: Maybe<Array<Comparativo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Comparativo_Type_Order_By>>;\n  where?: Maybe<Comparativo_Type_Bool_Exp>;\n};\n\n\nexport type Subscription_RootGet_Comparativo_AggregateArgs = {\n  args: Get_Comparativo_Args;\n  distinct_on?: Maybe<Array<Comparativo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Comparativo_Type_Order_By>>;\n  where?: Maybe<Comparativo_Type_Bool_Exp>;\n};\n\n\nexport type Subscription_RootGet_EvolutivoArgs = {\n  args: Get_Evolutivo_Args;\n  distinct_on?: Maybe<Array<Evolutivo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Evolutivo_Type_Order_By>>;\n  where?: Maybe<Evolutivo_Type_Bool_Exp>;\n};\n\n\nexport type Subscription_RootGet_Evolutivo_AggregateArgs = {\n  args: Get_Evolutivo_Args;\n  distinct_on?: Maybe<Array<Evolutivo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Evolutivo_Type_Order_By>>;\n  where?: Maybe<Evolutivo_Type_Bool_Exp>;\n};\n\n\nexport type Subscription_RootGet_Jams_LinesArgs = {\n  args: Get_Jams_Lines_Args;\n  distinct_on?: Maybe<Array<Jams_Agg_Line_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Jams_Agg_Line_Order_By>>;\n  where?: Maybe<Jams_Agg_Line_Bool_Exp>;\n};\n\n\nexport type Subscription_RootGet_Jams_Lines_AggregateArgs = {\n  args: Get_Jams_Lines_Args;\n  distinct_on?: Maybe<Array<Jams_Agg_Line_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Jams_Agg_Line_Order_By>>;\n  where?: Maybe<Jams_Agg_Line_Bool_Exp>;\n};\n\n\nexport type Subscription_RootGet_LinesArgs = {\n  args: Get_Lines_Args;\n  distinct_on?: Maybe<Array<Simple_Line_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Simple_Line_Type_Order_By>>;\n  where?: Maybe<Simple_Line_Type_Bool_Exp>;\n};\n\n\nexport type Subscription_RootGet_Lines_AggregateArgs = {\n  args: Get_Lines_Args;\n  distinct_on?: Maybe<Array<Simple_Line_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Simple_Line_Type_Order_By>>;\n  where?: Maybe<Simple_Line_Type_Bool_Exp>;\n};\n\n\nexport type Subscription_RootGet_PredictivoArgs = {\n  args: Get_Predictivo_Args;\n  distinct_on?: Maybe<Array<Evolutivo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Evolutivo_Type_Order_By>>;\n  where?: Maybe<Evolutivo_Type_Bool_Exp>;\n};\n\n\nexport type Subscription_RootGet_Predictivo_AggregateArgs = {\n  args: Get_Predictivo_Args;\n  distinct_on?: Maybe<Array<Evolutivo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Evolutivo_Type_Order_By>>;\n  where?: Maybe<Evolutivo_Type_Bool_Exp>;\n};\n\n\nexport type Subscription_RootGet_SummaryArgs = {\n  args: Get_Summary_Args;\n  distinct_on?: Maybe<Array<Evolutivo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Evolutivo_Type_Order_By>>;\n  where?: Maybe<Evolutivo_Type_Bool_Exp>;\n};\n\n\nexport type Subscription_RootGet_Summary_AggregateArgs = {\n  args: Get_Summary_Args;\n  distinct_on?: Maybe<Array<Evolutivo_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Evolutivo_Type_Order_By>>;\n  where?: Maybe<Evolutivo_Type_Bool_Exp>;\n};\n\n\nexport type Subscription_RootHistogram_TypeArgs = {\n  distinct_on?: Maybe<Array<Histogram_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Histogram_Type_Order_By>>;\n  where?: Maybe<Histogram_Type_Bool_Exp>;\n};\n\n\nexport type Subscription_RootHistogram_Type_AggregateArgs = {\n  distinct_on?: Maybe<Array<Histogram_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Histogram_Type_Order_By>>;\n  where?: Maybe<Histogram_Type_Bool_Exp>;\n};\n\n\nexport type Subscription_RootJam_LinesArgs = {\n  distinct_on?: Maybe<Array<Jam_Lines_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Jam_Lines_Order_By>>;\n  where?: Maybe<Jam_Lines_Bool_Exp>;\n};\n\n\nexport type Subscription_RootJam_Lines_AggregateArgs = {\n  distinct_on?: Maybe<Array<Jam_Lines_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Jam_Lines_Order_By>>;\n  where?: Maybe<Jam_Lines_Bool_Exp>;\n};\n\n\nexport type Subscription_RootJam_Lines_By_PkArgs = {\n  line_id: Scalars['Int'];\n};\n\n\nexport type Subscription_RootJamsArgs = {\n  distinct_on?: Maybe<Array<Jams_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Jams_Order_By>>;\n  where?: Maybe<Jams_Bool_Exp>;\n};\n\n\nexport type Subscription_RootJams_Agg_LineArgs = {\n  distinct_on?: Maybe<Array<Jams_Agg_Line_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Jams_Agg_Line_Order_By>>;\n  where?: Maybe<Jams_Agg_Line_Bool_Exp>;\n};\n\n\nexport type Subscription_RootJams_Agg_Line_AggregateArgs = {\n  distinct_on?: Maybe<Array<Jams_Agg_Line_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Jams_Agg_Line_Order_By>>;\n  where?: Maybe<Jams_Agg_Line_Bool_Exp>;\n};\n\n\nexport type Subscription_RootJams_AggregateArgs = {\n  distinct_on?: Maybe<Array<Jams_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Jams_Order_By>>;\n  where?: Maybe<Jams_Bool_Exp>;\n};\n\n\nexport type Subscription_RootJams_By_PkArgs = {\n  uuid: Scalars['Int'];\n};\n\n\nexport type Subscription_RootSimple_Line_TypeArgs = {\n  distinct_on?: Maybe<Array<Simple_Line_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Simple_Line_Type_Order_By>>;\n  where?: Maybe<Simple_Line_Type_Bool_Exp>;\n};\n\n\nexport type Subscription_RootSimple_Line_Type_AggregateArgs = {\n  distinct_on?: Maybe<Array<Simple_Line_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Simple_Line_Type_Order_By>>;\n  where?: Maybe<Simple_Line_Type_Bool_Exp>;\n};\n\n\nexport type Subscription_RootStreetsArgs = {\n  distinct_on?: Maybe<Array<Streets_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Streets_Order_By>>;\n  where?: Maybe<Streets_Bool_Exp>;\n};\n\n\nexport type Subscription_RootStreets_AggregateArgs = {\n  distinct_on?: Maybe<Array<Streets_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Streets_Order_By>>;\n  where?: Maybe<Streets_Bool_Exp>;\n};\n\n\nexport type Subscription_RootStreets_By_PkArgs = {\n  street_id: Scalars['Int'];\n};\n\n/** Boolean expression to compare columns of type \"timestamp\". All fields are combined with logical 'AND'. */\nexport type Timestamp_Comparison_Exp = {\n  _eq?: Maybe<Scalars['timestamp']>;\n  _gt?: Maybe<Scalars['timestamp']>;\n  _gte?: Maybe<Scalars['timestamp']>;\n  _in?: Maybe<Array<Scalars['timestamp']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['timestamp']>;\n  _lte?: Maybe<Scalars['timestamp']>;\n  _neq?: Maybe<Scalars['timestamp']>;\n  _nin?: Maybe<Array<Scalars['timestamp']>>;\n};\n\n/** Boolean expression to compare columns of type \"timestamptz\". All fields are combined with logical 'AND'. */\nexport type Timestamptz_Comparison_Exp = {\n  _eq?: Maybe<Scalars['timestamptz']>;\n  _gt?: Maybe<Scalars['timestamptz']>;\n  _gte?: Maybe<Scalars['timestamptz']>;\n  _in?: Maybe<Array<Scalars['timestamptz']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['timestamptz']>;\n  _lte?: Maybe<Scalars['timestamptz']>;\n  _neq?: Maybe<Scalars['timestamptz']>;\n  _nin?: Maybe<Array<Scalars['timestamptz']>>;\n};\n\nexport type LinesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LinesQuery = { __typename?: 'query_root', jam_lines: Array<{ __typename?: 'jam_lines', street_id: number, line_id: number, line?: any | null | undefined }> };\n\nexport type StreetsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type StreetsQuery = { __typename?: 'query_root', streets: Array<{ __typename?: 'streets', street_id: number, street_type: number, street_name: string, street_sufix?: string | null | undefined, line: any }> };\n\nexport type Admin_LevelsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type Admin_LevelsQuery = { __typename?: 'query_root', admin_levels: Array<{ __typename?: 'admin_levels', greater_admin_level_id: number, greater_admin_level_name: string, lower_admin_level_id: number, lower_admin_level_name: string, lines_ids: string, streets_ids: string, shape: any, last_update?: any | null | undefined }> };\n\nexport type JamsQueryVariables = Exact<{\n  date_from?: Maybe<Scalars['timestamp']>;\n  date_to?: Maybe<Scalars['timestamp']>;\n  hours?: Maybe<Scalars['_int4']>;\n  lines?: Maybe<Scalars['_int4']>;\n  aggFunc?: Maybe<Scalars['String']>;\n  working_days?: Maybe<Scalars['_int4']>;\n}>;\n\n\nexport type JamsQuery = { __typename?: 'query_root', get_jams_lines: Array<{ __typename?: 'jams_agg_line', line_id: number, level: number }> };\n\nexport type EvolutivoQueryVariables = Exact<{\n  date_from?: Maybe<Scalars['timestamp']>;\n  date_to?: Maybe<Scalars['timestamp']>;\n  hours?: Maybe<Scalars['_int4']>;\n  lines?: Maybe<Scalars['_int4']>;\n  metric?: Maybe<Scalars['String']>;\n  aggFunc?: Maybe<Scalars['String']>;\n  working_days?: Maybe<Scalars['_int4']>;\n}>;\n\n\nexport type EvolutivoQuery = { __typename?: 'query_root', get_evolutivo: Array<{ __typename?: 'evolutivo_type', index: string, val: number }> };\n\nexport type ComparativoQueryVariables = Exact<{\n  date_from?: Maybe<Scalars['timestamp']>;\n  date_to?: Maybe<Scalars['timestamp']>;\n  hours?: Maybe<Scalars['_int4']>;\n  lines?: Maybe<Scalars['_int4']>;\n  metric?: Maybe<Scalars['String']>;\n  aggFunc?: Maybe<Scalars['String']>;\n  working_days?: Maybe<Scalars['_int4']>;\n}>;\n\n\nexport type ComparativoQuery = { __typename?: 'query_root', get_comparativo: Array<{ __typename?: 'comparativo_type', year: number, month: number, val: number }> };\n\nexport type SummaryQueryVariables = Exact<{\n  date_from?: Maybe<Scalars['timestamp']>;\n  date_to?: Maybe<Scalars['timestamp']>;\n  hours?: Maybe<Scalars['_int4']>;\n  lines?: Maybe<Scalars['_int4']>;\n  aggFunc?: Maybe<Scalars['String']>;\n  working_days?: Maybe<Scalars['_int4']>;\n}>;\n\n\nexport type SummaryQuery = { __typename?: 'query_root', get_summary: Array<{ __typename?: 'evolutivo_type', index: string, val: number }> };\n\nexport type PredictivoQueryVariables = Exact<{\n  date_from?: Maybe<Scalars['timestamp']>;\n  date_to?: Maybe<Scalars['timestamp']>;\n  hours?: Maybe<Scalars['_int4']>;\n  lines?: Maybe<Scalars['_int4']>;\n  metric?: Maybe<Scalars['String']>;\n  aggFunc?: Maybe<Scalars['String']>;\n  working_days?: Maybe<Scalars['_int4']>;\n}>;\n\n\nexport type PredictivoQuery = { __typename?: 'query_root', get_predictivo: Array<{ __typename?: 'evolutivo_type', index: string, val: number }> };\n\nexport const LinesDocument = gql`\n    query lines {\n  jam_lines {\n    street_id\n    line_id\n    line\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class LinesGQL extends Apollo.Query<LinesQuery, LinesQueryVariables> {\n    document = LinesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const StreetsDocument = gql`\n    query streets {\n  streets {\n    street_id\n    street_type\n    street_name\n    street_sufix\n    line\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class StreetsGQL extends Apollo.Query<StreetsQuery, StreetsQueryVariables> {\n    document = StreetsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const Admin_LevelsDocument = gql`\n    query admin_levels {\n  admin_levels {\n    greater_admin_level_id\n    greater_admin_level_name\n    lower_admin_level_id\n    lower_admin_level_name\n    lines_ids\n    streets_ids\n    shape\n    last_update\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class Admin_LevelsGQL extends Apollo.Query<Admin_LevelsQuery, Admin_LevelsQueryVariables> {\n    document = Admin_LevelsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const JamsDocument = gql`\n    query jams($date_from: timestamp, $date_to: timestamp, $hours: _int4, $lines: _int4, $aggFunc: String, $working_days: _int4) {\n  get_jams_lines(\n    args: {date_from: $date_from, date_to: $date_to, hours: $hours, lines: $lines, agg_func: $aggFunc, working_days: $working_days}\n  ) {\n    line_id\n    level\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class JamsGQL extends Apollo.Query<JamsQuery, JamsQueryVariables> {\n    document = JamsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EvolutivoDocument = gql`\n    query evolutivo($date_from: timestamp, $date_to: timestamp, $hours: _int4, $lines: _int4, $metric: String, $aggFunc: String, $working_days: _int4) {\n  get_evolutivo(\n    args: {date_from: $date_from, date_to: $date_to, hours: $hours, lines: $lines, metric: $metric, agg_func: $aggFunc, working_days: $working_days}\n  ) {\n    index\n    val\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EvolutivoGQL extends Apollo.Query<EvolutivoQuery, EvolutivoQueryVariables> {\n    document = EvolutivoDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ComparativoDocument = gql`\n    query comparativo($date_from: timestamp, $date_to: timestamp, $hours: _int4, $lines: _int4, $metric: String, $aggFunc: String, $working_days: _int4) {\n  get_comparativo(\n    args: {date_from: $date_from, date_to: $date_to, hours: $hours, lines: $lines, metric: $metric, agg_func: $aggFunc, working_days: $working_days}\n  ) {\n    year\n    month\n    val\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ComparativoGQL extends Apollo.Query<ComparativoQuery, ComparativoQueryVariables> {\n    document = ComparativoDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SummaryDocument = gql`\n    query summary($date_from: timestamp, $date_to: timestamp, $hours: _int4, $lines: _int4, $aggFunc: String, $working_days: _int4) {\n  get_summary(\n    args: {date_from: $date_from, date_to: $date_to, hours: $hours, lines: $lines, agg_func: $aggFunc, working_days: $working_days}\n  ) {\n    index\n    val\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SummaryGQL extends Apollo.Query<SummaryQuery, SummaryQueryVariables> {\n    document = SummaryDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const PredictivoDocument = gql`\n    query predictivo($date_from: timestamp, $date_to: timestamp, $hours: _int4, $lines: _int4, $metric: String, $aggFunc: String, $working_days: _int4) {\n  get_predictivo(\n    args: {date_from: $date_from, date_to: $date_to, hours: $hours, lines: $lines, metric: $metric, agg_func: $aggFunc, working_days: $working_days}\n  ) {\n    index\n    val\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class PredictivoGQL extends Apollo.Query<PredictivoQuery, PredictivoQueryVariables> {\n    document = PredictivoDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }","import Dexie, { liveQuery, Table } from 'dexie';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface Line {\r\n  id: number;\r\n  streetId: number;\r\n  coordinates: [number, number][];\r\n  lastUpdate: string;\r\n}\r\nexport interface Street {\r\n  id: number;\r\n  name: string;\r\n  type: number;\r\n  shape:\r\n    | { coordinates: [number, number][]; type: 'LineString' }\r\n    | { coordinates: [number, number][][]; type: 'MultiLineString' };\r\n  lastUpdate: string;\r\n}\r\n\r\nexport interface AdminLevel {\r\n  greaterAdminLevelId: number;\r\n  greaterAdminLevelName: string;\r\n  lowerAdminLevelId: number;\r\n  lowerAdminLevelName: string;\r\n  linesIds: number[];\r\n  streetsIds: number[];\r\n  coordinates: [number, number][][][];\r\n  lastUpdate: string;\r\n}\r\nexport class IndexedDb extends Dexie {\r\n  segment_lines!: Table<Line, number>;\r\n  streets!: Table<Street, number>;\r\n\r\n  constructor() {\r\n    super('congestiometro');\r\n    this.version(3).stores({\r\n      segment_lines: '++id',\r\n      streets: '++id',\r\n    });\r\n    this.on('populate', () => {\r\n      this.bulkPutLines([]);\r\n      this.bulkPutStreets([]);\r\n    });\r\n  }\r\n\r\n  public bulkPutLines(newLines: Line[]) {\r\n    return this.segment_lines.bulkPut(newLines);\r\n  }\r\n\r\n  public getLines() {\r\n    return new Observable<Line[]>((subscriber) =>\r\n      liveQuery(() => this.segment_lines.toArray()).subscribe((lines) => subscriber.next(lines))\r\n    );\r\n  }\r\n\r\n  public clearLines() {\r\n    return this.segment_lines.clear();\r\n  }\r\n\r\n  public bulkPutStreets(newStreets: Street[]) {\r\n    return this.streets.bulkPut(newStreets);\r\n  }\r\n\r\n  public getStreets() {\r\n    return new Observable<Street[]>((subscriber) =>\r\n      liveQuery(() => this.streets.toArray()).subscribe((streets) => subscriber.next(streets))\r\n    );\r\n  }\r\n\r\n  public clearStreets() {\r\n    return this.streets.clear();\r\n  }\r\n}\r\n\r\nexport const indexedDb = new IndexedDb();\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Apollo } from 'apollo-angular';\r\n\r\nimport { fromEvent, merge, of, Subject, timer } from 'rxjs';\r\nimport { catchError, map, mapTo, shareReplay, switchMap, tap } from 'rxjs/operators';\r\n\r\nimport jwt_decode from 'jwt-decode';\r\nexport interface DBUser {\r\n  username: string;\r\n}\r\nexport interface User extends DBUser {\r\n  isAdmin: boolean;\r\n}\r\n\r\nconst oneHour = 60 * 60 * 1000;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserService {\r\n  private statusChange = new Subject<void>();\r\n\r\n  public currentUser = merge(timer(0, oneHour), this.statusChange).pipe(\r\n    switchMap(() => {\r\n      const token = localStorage.getItem('token');\r\n      // console.log({ token });\r\n      if (!token) return of(null);\r\n      const decodedToken = jwt_decode(token) as { id: string; username: string; exp: number };\r\n      // console.log({ decodedToken });\r\n      const expired = new Date().getTime() - decodedToken.exp * 1000 > oneHour;\r\n      if (expired) {\r\n        return this.refreshTokens().pipe(\r\n          mapTo(null),\r\n          catchError(() => of(null))\r\n        );\r\n      } else {\r\n        const user = { username: decodedToken.username, isAdmin: decodedToken.username === 'admin' } as User;\r\n        return of(Object.assign(user, { token }));\r\n      }\r\n    }),\r\n    shareReplay(1)\r\n  );\r\n\r\n  constructor(private http: HttpClient, private apollo: Apollo) {\r\n    fromEvent<StorageEvent>(window, 'storage').subscribe(console.log);\r\n  }\r\n\r\n  public async login(username: string, password: string) {\r\n    const { token } = (await this.http.post('/auth/login', { username, password }).toPromise()) as {\r\n      token: string;\r\n    };\r\n    localStorage.setItem('token', token);\r\n    this.statusChange.next();\r\n  }\r\n\r\n  public logout() {\r\n    localStorage.removeItem('token');\r\n    this.apollo.client.resetStore();\r\n    this.statusChange.next();\r\n  }\r\n\r\n  public refreshTokens = () => {\r\n    return this.http.get<{ token: string }>('/auth/refresh-token').pipe(\r\n      tap(({ token }) => {\r\n        localStorage.setItem('token', token);\r\n        this.statusChange.next();\r\n      })\r\n    );\r\n  };\r\n\r\n  private getAuthHeaders() {\r\n    return new HttpHeaders({ Authorization: localStorage.getItem('token') || '' });\r\n  }\r\n\r\n  public createUser = (username: string, password: string) => {\r\n    return this.http\r\n      .post<User>('/auth/users', { username, password }, { headers: this.getAuthHeaders() })\r\n      .toPromise();\r\n  };\r\n\r\n  public getUsers() {\r\n    return this.http\r\n      .get<DBUser[]>('/auth/users', { headers: this.getAuthHeaders() })\r\n      .pipe(map((users) => users.map((user) => ({ ...user, isAdmin: user.username === 'admin' }))));\r\n  }\r\n\r\n  public editUser(username: string, password: string) {\r\n    return this.http\r\n      .patch(`/auth/users/${username}`, { password }, { headers: this.getAuthHeaders() })\r\n      .toPromise();\r\n  }\r\n\r\n  public deleteUser = (username: string) => {\r\n    return this.http.delete(`/auth/users/${username}`, { headers: this.getAuthHeaders() }).toPromise();\r\n  };\r\n}\r\n","export const isValid = <T>(a: T | null | undefined): a is T => a !== null && a !== undefined;\r\n\r\nexport const range = (n: number) =>\r\n  Array(n)\r\n    .fill('')\r\n    .map((_, i) => i);\r\n\r\nexport const daysRange = (start: string, end: string) => {\r\n  const startDate = new Date(start);\r\n  const days = Math.round((new Date(end).getTime() - startDate.getTime()) / (1000 * 3600 * 24));\r\n  return range(days).map(\r\n    (differenceInDays) => new Date(new Date(start).setDate(startDate.getDate() + differenceInDays))\r\n  );\r\n};\r\n\r\nexport const getPartialDate = (date: Date) => {\r\n  const month = String(date.getMonth() + 1).padStart(2, '0');\r\n  const day = String(date.getDate()).padStart(2, '0');\r\n  return `${date.getFullYear()}-${month}-${day}`;\r\n};\r\n\r\nexport const normalizeString = (str: string) => {\r\n  return str\r\n    .normalize('NFD')\r\n    .replace(/[\\u0300-\\u036f]/g, '')\r\n    .replace(/[^\\w\\d\\s]/g, '')\r\n    .toLocaleLowerCase();\r\n};\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","var map = {\n\t\"./af\": 62275,\n\t\"./af.js\": 62275,\n\t\"./ar\": 90857,\n\t\"./ar-dz\": 11218,\n\t\"./ar-dz.js\": 11218,\n\t\"./ar-kw\": 14754,\n\t\"./ar-kw.js\": 14754,\n\t\"./ar-ly\": 66680,\n\t\"./ar-ly.js\": 66680,\n\t\"./ar-ma\": 92178,\n\t\"./ar-ma.js\": 92178,\n\t\"./ar-sa\": 56522,\n\t\"./ar-sa.js\": 56522,\n\t\"./ar-tn\": 95682,\n\t\"./ar-tn.js\": 95682,\n\t\"./ar.js\": 90857,\n\t\"./az\": 70164,\n\t\"./az.js\": 70164,\n\t\"./be\": 79774,\n\t\"./be.js\": 79774,\n\t\"./bg\": 60947,\n\t\"./bg.js\": 60947,\n\t\"./bm\": 21832,\n\t\"./bm.js\": 21832,\n\t\"./bn\": 89650,\n\t\"./bn-bd\": 74477,\n\t\"./bn-bd.js\": 74477,\n\t\"./bn.js\": 89650,\n\t\"./bo\": 66005,\n\t\"./bo.js\": 66005,\n\t\"./br\": 98492,\n\t\"./br.js\": 98492,\n\t\"./bs\": 70534,\n\t\"./bs.js\": 70534,\n\t\"./ca\": 52061,\n\t\"./ca.js\": 52061,\n\t\"./cs\": 84737,\n\t\"./cs.js\": 84737,\n\t\"./cv\": 61167,\n\t\"./cv.js\": 61167,\n\t\"./cy\": 77996,\n\t\"./cy.js\": 77996,\n\t\"./da\": 9528,\n\t\"./da.js\": 9528,\n\t\"./de\": 14540,\n\t\"./de-at\": 49430,\n\t\"./de-at.js\": 49430,\n\t\"./de-ch\": 67978,\n\t\"./de-ch.js\": 67978,\n\t\"./de.js\": 14540,\n\t\"./dv\": 83426,\n\t\"./dv.js\": 83426,\n\t\"./el\": 6616,\n\t\"./el.js\": 6616,\n\t\"./en-au\": 63816,\n\t\"./en-au.js\": 63816,\n\t\"./en-ca\": 32162,\n\t\"./en-ca.js\": 32162,\n\t\"./en-gb\": 83305,\n\t\"./en-gb.js\": 83305,\n\t\"./en-ie\": 61954,\n\t\"./en-ie.js\": 61954,\n\t\"./en-il\": 43060,\n\t\"./en-il.js\": 43060,\n\t\"./en-in\": 59923,\n\t\"./en-in.js\": 59923,\n\t\"./en-nz\": 13540,\n\t\"./en-nz.js\": 13540,\n\t\"./en-sg\": 16505,\n\t\"./en-sg.js\": 16505,\n\t\"./eo\": 41907,\n\t\"./eo.js\": 41907,\n\t\"./es\": 86640,\n\t\"./es-do\": 41246,\n\t\"./es-do.js\": 41246,\n\t\"./es-mx\": 56131,\n\t\"./es-mx.js\": 56131,\n\t\"./es-us\": 36430,\n\t\"./es-us.js\": 36430,\n\t\"./es.js\": 86640,\n\t\"./et\": 62551,\n\t\"./et.js\": 62551,\n\t\"./eu\": 32711,\n\t\"./eu.js\": 32711,\n\t\"./fa\": 54572,\n\t\"./fa.js\": 54572,\n\t\"./fi\": 33390,\n\t\"./fi.js\": 33390,\n\t\"./fil\": 87860,\n\t\"./fil.js\": 87860,\n\t\"./fo\": 48216,\n\t\"./fo.js\": 48216,\n\t\"./fr\": 99291,\n\t\"./fr-ca\": 98527,\n\t\"./fr-ca.js\": 98527,\n\t\"./fr-ch\": 58407,\n\t\"./fr-ch.js\": 58407,\n\t\"./fr.js\": 99291,\n\t\"./fy\": 47054,\n\t\"./fy.js\": 47054,\n\t\"./ga\": 49540,\n\t\"./ga.js\": 49540,\n\t\"./gd\": 73917,\n\t\"./gd.js\": 73917,\n\t\"./gl\": 51486,\n\t\"./gl.js\": 51486,\n\t\"./gom-deva\": 56245,\n\t\"./gom-deva.js\": 56245,\n\t\"./gom-latn\": 48868,\n\t\"./gom-latn.js\": 48868,\n\t\"./gu\": 59652,\n\t\"./gu.js\": 59652,\n\t\"./he\": 89019,\n\t\"./he.js\": 89019,\n\t\"./hi\": 42040,\n\t\"./hi.js\": 42040,\n\t\"./hr\": 63402,\n\t\"./hr.js\": 63402,\n\t\"./hu\": 79322,\n\t\"./hu.js\": 79322,\n\t\"./hy-am\": 27609,\n\t\"./hy-am.js\": 27609,\n\t\"./id\": 57942,\n\t\"./id.js\": 57942,\n\t\"./is\": 98275,\n\t\"./is.js\": 98275,\n\t\"./it\": 73053,\n\t\"./it-ch\": 4378,\n\t\"./it-ch.js\": 4378,\n\t\"./it.js\": 73053,\n\t\"./ja\": 46176,\n\t\"./ja.js\": 46176,\n\t\"./jv\": 679,\n\t\"./jv.js\": 679,\n\t\"./ka\": 92726,\n\t\"./ka.js\": 92726,\n\t\"./kk\": 72953,\n\t\"./kk.js\": 72953,\n\t\"./km\": 86957,\n\t\"./km.js\": 86957,\n\t\"./kn\": 59181,\n\t\"./kn.js\": 59181,\n\t\"./ko\": 47148,\n\t\"./ko.js\": 47148,\n\t\"./ku\": 27752,\n\t\"./ku.js\": 27752,\n\t\"./ky\": 65675,\n\t\"./ky.js\": 65675,\n\t\"./lb\": 41263,\n\t\"./lb.js\": 41263,\n\t\"./lo\": 65746,\n\t\"./lo.js\": 65746,\n\t\"./lt\": 11143,\n\t\"./lt.js\": 11143,\n\t\"./lv\": 38753,\n\t\"./lv.js\": 38753,\n\t\"./me\": 44054,\n\t\"./me.js\": 44054,\n\t\"./mi\": 31573,\n\t\"./mi.js\": 31573,\n\t\"./mk\": 30202,\n\t\"./mk.js\": 30202,\n\t\"./ml\": 68523,\n\t\"./ml.js\": 68523,\n\t\"./mn\": 79794,\n\t\"./mn.js\": 79794,\n\t\"./mr\": 56681,\n\t\"./mr.js\": 56681,\n\t\"./ms\": 56975,\n\t\"./ms-my\": 39859,\n\t\"./ms-my.js\": 39859,\n\t\"./ms.js\": 56975,\n\t\"./mt\": 3691,\n\t\"./mt.js\": 3691,\n\t\"./my\": 5152,\n\t\"./my.js\": 5152,\n\t\"./nb\": 7607,\n\t\"./nb.js\": 7607,\n\t\"./ne\": 21526,\n\t\"./ne.js\": 21526,\n\t\"./nl\": 86368,\n\t\"./nl-be\": 40076,\n\t\"./nl-be.js\": 40076,\n\t\"./nl.js\": 86368,\n\t\"./nn\": 68420,\n\t\"./nn.js\": 68420,\n\t\"./oc-lnc\": 51906,\n\t\"./oc-lnc.js\": 51906,\n\t\"./pa-in\": 94504,\n\t\"./pa-in.js\": 94504,\n\t\"./pl\": 54721,\n\t\"./pl.js\": 54721,\n\t\"./pt\": 74645,\n\t\"./pt-br\": 54548,\n\t\"./pt-br.js\": 54548,\n\t\"./pt.js\": 74645,\n\t\"./ro\": 71977,\n\t\"./ro.js\": 71977,\n\t\"./ru\": 26042,\n\t\"./ru.js\": 26042,\n\t\"./sd\": 78849,\n\t\"./sd.js\": 78849,\n\t\"./se\": 27739,\n\t\"./se.js\": 27739,\n\t\"./si\": 50084,\n\t\"./si.js\": 50084,\n\t\"./sk\": 92449,\n\t\"./sk.js\": 92449,\n\t\"./sl\": 23086,\n\t\"./sl.js\": 23086,\n\t\"./sq\": 33139,\n\t\"./sq.js\": 33139,\n\t\"./sr\": 30607,\n\t\"./sr-cyrl\": 30063,\n\t\"./sr-cyrl.js\": 30063,\n\t\"./sr.js\": 30607,\n\t\"./ss\": 40131,\n\t\"./ss.js\": 40131,\n\t\"./sv\": 21665,\n\t\"./sv.js\": 21665,\n\t\"./sw\": 5642,\n\t\"./sw.js\": 5642,\n\t\"./ta\": 33622,\n\t\"./ta.js\": 33622,\n\t\"./te\": 74825,\n\t\"./te.js\": 74825,\n\t\"./tet\": 48336,\n\t\"./tet.js\": 48336,\n\t\"./tg\": 39238,\n\t\"./tg.js\": 39238,\n\t\"./th\": 99463,\n\t\"./th.js\": 99463,\n\t\"./tk\": 39986,\n\t\"./tk.js\": 39986,\n\t\"./tl-ph\": 29672,\n\t\"./tl-ph.js\": 29672,\n\t\"./tlh\": 40043,\n\t\"./tlh.js\": 40043,\n\t\"./tr\": 51212,\n\t\"./tr.js\": 51212,\n\t\"./tzl\": 50110,\n\t\"./tzl.js\": 50110,\n\t\"./tzm\": 80482,\n\t\"./tzm-latn\": 38309,\n\t\"./tzm-latn.js\": 38309,\n\t\"./tzm.js\": 80482,\n\t\"./ug-cn\": 42495,\n\t\"./ug-cn.js\": 42495,\n\t\"./uk\": 54157,\n\t\"./uk.js\": 54157,\n\t\"./ur\": 80984,\n\t\"./ur.js\": 80984,\n\t\"./uz\": 64141,\n\t\"./uz-latn\": 43662,\n\t\"./uz-latn.js\": 43662,\n\t\"./uz.js\": 64141,\n\t\"./vi\": 12607,\n\t\"./vi.js\": 12607,\n\t\"./x-pseudo\": 66460,\n\t\"./x-pseudo.js\": 66460,\n\t\"./yo\": 92948,\n\t\"./yo.js\": 92948,\n\t\"./zh-cn\": 62658,\n\t\"./zh-cn.js\": 62658,\n\t\"./zh-hk\": 39352,\n\t\"./zh-hk.js\": 39352,\n\t\"./zh-mo\": 38274,\n\t\"./zh-mo.js\": 38274,\n\t\"./zh-tw\": 98451,\n\t\"./zh-tw.js\": 98451\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 46700;"],"names":["COMMA","ENTER","BehaviorSubject","combineLatest","merge","Subject","debounceTime","distinctUntilChanged","filter","map","pluck","shareReplay","startWith","switchMap","take","tap","aggFuncs","charts","metrics","isValid","normalizeString","range","BaseChartDirective","FormControl","i0","ctx_r46","chart_r58","selected_r52","$event","_r55","_r56","_r53","ctx_r51","ctx_r70","ctx_r76","_r7","_r9","barData_r78","config_r80","ctx_r81","dataInfo_r91","config_r87","ctx_r90","lineWithMapData_r96","config_r99","ctx_r98","ctx_r110","ctx_r124","barData_r126","config_r128","ctx_r129","_r5","ctx_r134","_r1","AppComponent","constructor","userService","dataService","activatedRoute","router","queryParams","pipe","q","find","c","id","leftChart","comparableChart","url","chart","params","metric","aggFunc","dateStart","Date","date_from","dateEnd","date_to","hours","JSON","parse","slice","leftData","rightData","rightChart","data","summary","type","label","difference","delay","Math","min","max","length","speed","responsive","scales","yAxes","ticks","display","xAxes","callback","v","Number","toLocaleString","maximumFractionDigits","bar","leftBarData","rightBarData","barSameMaximum","sameMaximum","dataset","flat","undefined","barMaximum","labels","unit","options","getOptions","isNaN","colors","getColors","console","log","x","p","getFullYear","streets","name","selectedComparativeCharts","selectedComparativeCharts$","a","b","stringify","comparativeStreetSearch","valueChanges","selected","search","includes","streetIds","Object","values","changeUrl","comparativeStreetsIds","comparativeCharts","comparativeSameMaximum","datasets","obs","exportableData","csvData","key","_a","times","value","join","some","ngAfterViewInit","changes","subscribe","resize","datasetLength","dense","line","backgroundColor","borderColor","isNumber","xLabel","maintainAspectRatio","scaleLabel","labelString","padding","fontSize","suggestedMax","beginAtZero","maxTicksLimit","minimumFractionDigits","toggleUsers","showUsers","toggleCompare","compare","resetFilters","navigate","relativeTo","queryParamsHandling","selectLineYear","greaterDate","toggleComparativeChart","action","input","index","indexOf","push","splice","next","setValue","blur","selectors","viewQuery","_r3","EventEmitter","of","ctx_r0","ButtonIconComponent","ngOnChanges","isImg","ext","icon","endsWith","inputs","color","tooltip","tooltipPosition","sizeImg","sizeIcon","disabled","outputs","clickEvent","features","decls","vars","consts","template","ctx","animate","state","style","transition","trigger","MatTableDataSource","MatPaginator","FormGroup","Validators","ctx_r22","ctx_r32","username_r29","DisplayUsersComponent","displayLogService","title","field","columns","selectedUser","user","username","password","required","ngOnInit","dataSource$","users","nameSearch","toLocaleLowerCase","sort","paginator","onKeyUp","event","target","clearSearch","searchInput","nativeElement","editUser","confirm","loading","then","editUserForm","reset","openLogSuccess","catch","err","openLogError","error","message","finally","deleteUser","height","changeDetection","timer","withLatestFrom","Feature","Map","OlMap","View","OSM","defaults","defaultInteractions","Draw","fromLonLat","toLonLat","VectorSource","GeometryType","TileLayer","VectorLayer","LineString","Polygon","Fill","Stroke","Style","booleanContains","point","turfPoint","polygon","turfPolygon","multiPolygon","turfMultiPolygon","booleanIntersects","saveAs","ctx_r25","ctx_r61","_r60","ctx_r63","ctx_r66","state_r18","ctx_r82","ctx_r83","_r27","_r31","getTurfFeature","getCoordinates","FiltersComponent","media","h","neighborhoods","greaterAdminLevelId","reduce","prev","nei","findIndex","greaterAdminLevelName","neighborhoodIds","lowerAdminLevelId","secondary","show","forceShow","source","drawnPolygon","POLYGON","urlParams","right","left","mapPolygon","selectedStreets","clear","set","syncParams","otherState","neighborhoodsIds","n","form","workingDays","autoSelectStreets","autoSelectAvenues","coords","feature","geometry","setStyle","stroke","width","fill","addFeature","controls","lines","coordinates","selectedNeighborhoodIds","selectedNeighborhoods","turfMapPolygon","intersected","linesIds","allSelectedIds","Array","from","Set","keys","lineId","s","l","streetId","filteredStreetIds","filteredStreets","street","streetSearch","geoFilteredStreets","sorted","draw","on","drawEvent","getGeometry","subscriptions","ready","show$","interactions","layers","preload","view","center","zoom","addInteraction","asObservable","isActive","updateSize","changeChartType","newType","clone","apply","sync","completeState","fromEntries","entries","getTime","allSelected","allNeighborhoods","every","neighborhood","someSelected","setSelectedNeighborhoods","control","select","newNeighborhoods","arr","id2","download","headers","csv","row","fieldName","Blob","ngOnDestroy","unsubscribe","ngContentSelectors","ctx_r7","LoginComponent","fb","loginForm","group","login","errorMessage","Tile","Vector","MultiLineString","MapComponent","nextId","redraw","lineVectorSource","addFeatures","fit","getExtent","size","getSize","maxZoom","changed","boxSide","ctx_r5","ctx_r11","ctx_r13","ctx_r15","UsersComponent","displayLog","updateUsers","getUsers","valid","exists","setErrors","errors","alreadyExistingUsername","statusChanges","existingUsername","status","createUser","creatingNewUser","cancel","TitleCasePipe","MultiPolygon","Text","VectorMapComponent","text","font","toPromise","subscription","shapes","transform","lowerAdminLevelName","highlight","points","minX","minY","maxX","maxY","vectorSource","extent","newSelectedNeighborhoods","getStyleOptions","dragging","displayFeatureInfo","getEventPixel","originalEvent","forEachFeatureAtPixel","f","getStyle","getText","newNeighborhood","newSelected","toggleHighlight","fillColor","alpha","zIndex","_b","shape","getTargetElement","cursor","alreadySelected","pixel","highlightText","prevHighlight","_c","featureText","_d","_e","_f","closed","HttpHeaders","fromEvent","catchError","mapTo","jwt_decode","oneHour","UserService","http","apollo","statusChange","token","localStorage","getItem","decodedToken","expired","exp","refreshTokens","isAdmin","assign","get","setItem","post","getAuthHeaders","delete","window","logout","removeItem","client","resetStore","Authorization","patch","factory","providedIn"],"sourceRoot":"webpack:///"}